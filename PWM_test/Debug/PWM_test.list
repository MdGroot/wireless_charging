
PWM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08008470  08008470  00018470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800888c  0800888c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800888c  0800888c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800888c  0800888c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000230  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000040c  2000040c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013868  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002586  00000000  00000000  00033a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f70  00000000  00000000  00036000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e88  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d494  00000000  00000000  00037df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012c7b  00000000  00000000  0005528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000adb29  00000000  00000000  00067f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00115a30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005140  00000000  00000000  00115a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008454 	.word	0x08008454

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008454 	.word	0x08008454

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fcfa 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f824 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f000 fa10 	bl	8000fd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 f9c0 	bl	8000f3c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000bbc:	f000 f8f4 	bl	8000da8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bc0:	f000 f946 	bl	8000e50 <MX_TIM2_Init>
  MX_DMA_Init();
 8000bc4:	f000 f9ea 	bl	8000f9c <MX_DMA_Init>
  MX_ADC1_Init();
 8000bc8:	f000 f872 	bl	8000cb0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //hal_TIM_Base_Start(&htim3);
  HAL_TIM_Base_Start_IT(&htim2);
 8000bcc:	4808      	ldr	r0, [pc, #32]	; (8000bf0 <main+0x48>)
 8000bce:	f003 fbcf 	bl	8004370 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <main+0x48>)
 8000bd6:	f003 fc89 	bl	80044ec <HAL_TIM_PWM_Start>

   HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <main+0x4c>)
 8000bde:	f000 ffc7 	bl	8001b70 <HAL_ADCEx_Calibration_Start>
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Buff, 2);
 8000be2:	2202      	movs	r2, #2
 8000be4:	4904      	ldr	r1, [pc, #16]	; (8000bf8 <main+0x50>)
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <main+0x4c>)
 8000be8:	f000 fee8 	bl	80019bc <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <main+0x44>
 8000bee:	bf00      	nop
 8000bf0:	20000320 	.word	0x20000320
 8000bf4:	20000230 	.word	0x20000230
 8000bf8:	20000314 	.word	0x20000314

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b096      	sub	sp, #88	; 0x58
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c06:	2228      	movs	r2, #40	; 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 ff48 	bl	8005aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
 8000c2e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c30:	2302      	movs	r3, #2
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c34:	2301      	movs	r3, #1
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c40:	2300      	movs	r3, #0
 8000c42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c44:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 f8d2 	bl	8002df8 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000c5a:	f000 fa2f 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2302      	movs	r3, #2
 8000c64:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2102      	movs	r1, #2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 ffc4 	bl	8003c08 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c86:	f000 fa19 	bl	80010bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 f9ec 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ca2:	f000 fa0b 	bl	80010bc <Error_Handler>
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3758      	adds	r7, #88	; 0x58
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	; 0x28
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000cd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000cda:	4b32      	ldr	r3, [pc, #200]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ce0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cfc:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d02:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d08:	4b26      	ldr	r3, [pc, #152]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d0e:	4b25      	ldr	r3, [pc, #148]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d14:	4b23      	ldr	r3, [pc, #140]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d1c:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d22:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d28:	4b1e      	ldr	r3, [pc, #120]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d2e:	481d      	ldr	r0, [pc, #116]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d30:	f000 fcb2 	bl	8001698 <HAL_ADC_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000d3a:	f000 f9bf 	bl	80010bc <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d42:	f107 031c 	add.w	r3, r7, #28
 8000d46:	4619      	mov	r1, r3
 8000d48:	4816      	ldr	r0, [pc, #88]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d4a:	f001 fa45 	bl	80021d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000d54:	f000 f9b2 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d58:	230b      	movs	r3, #11
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d76:	f000 ff6d 	bl	8001c54 <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000d80:	f000 f99c 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_ADC1_Init+0xf4>)
 8000d8e:	f000 ff61 	bl	8001c54 <HAL_ADC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000d98:	f000 f990 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000230 	.word	0x20000230

08000da8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000dc8:	4a20      	ldr	r2, [pc, #128]	; (8000e4c <MX_TIM1_Init+0xa4>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8000de6:	4b18      	ldr	r3, [pc, #96]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dec:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000df2:	4815      	ldr	r0, [pc, #84]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000df4:	f003 fa64 	bl	80042c0 <HAL_TIM_Base_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000dfe:	f000 f95d 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	480e      	ldr	r0, [pc, #56]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000e10:	f003 fd6c 	bl	80048ec <HAL_TIM_ConfigClockSource>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e1a:	f000 f94f 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e1e:	2320      	movs	r3, #32
 8000e20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4806      	ldr	r0, [pc, #24]	; (8000e48 <MX_TIM1_Init+0xa0>)
 8000e30:	f004 fa04 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e3a:	f000 f93f 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	3720      	adds	r7, #32
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200002c4 	.word	0x200002c4
 8000e4c:	40012c00 	.word	0x40012c00

08000e50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08e      	sub	sp, #56	; 0x38
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e70:	463b      	mov	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]
 8000e7e:	615a      	str	r2, [r3, #20]
 8000e80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000e8c:	221f      	movs	r2, #31
 8000e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e90:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000e92:	2220      	movs	r2, #32
 8000e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000e98:	2213      	movs	r2, #19
 8000e9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea2:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000eaa:	f003 fa09 	bl	80042c0 <HAL_TIM_Base_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000eb4:	f000 f902 	bl	80010bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481c      	ldr	r0, [pc, #112]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000ec6:	f003 fd11 	bl	80048ec <HAL_TIM_ConfigClockSource>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ed0:	f000 f8f4 	bl	80010bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ed4:	4818      	ldr	r0, [pc, #96]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000ed6:	f003 faa7 	bl	8004428 <HAL_TIM_PWM_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ee0:	f000 f8ec 	bl	80010bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000ef4:	f004 f9a2 	bl	800523c <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000efe:	f000 f8dd 	bl	80010bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f02:	2360      	movs	r3, #96	; 0x60
 8000f04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 7;
 8000f06:	2307      	movs	r3, #7
 8000f08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f12:	463b      	mov	r3, r7
 8000f14:	2200      	movs	r2, #0
 8000f16:	4619      	mov	r1, r3
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000f1a:	f003 fbd3 	bl	80046c4 <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f24:	f000 f8ca 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_TIM2_Init+0xe8>)
 8000f2a:	f000 f98d 	bl	8001248 <HAL_TIM_MspPostInit>

}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	; 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000320 	.word	0x20000320

08000f3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f40:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f42:	4a15      	ldr	r2, [pc, #84]	; (8000f98 <MX_USART2_UART_Init+0x5c>)
 8000f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f46:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4e:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f62:	220c      	movs	r2, #12
 8000f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART2_UART_Init+0x58>)
 8000f80:	f004 f9ca 	bl	8005318 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f8a:	f000 f897 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000036c 	.word	0x2000036c
 8000f98:	40004400 	.word	0x40004400

08000f9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_DMA_Init+0x38>)
 8000fa4:	695b      	ldr	r3, [r3, #20]
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <MX_DMA_Init+0x38>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6153      	str	r3, [r2, #20]
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_DMA_Init+0x38>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	200b      	movs	r0, #11
 8000fc0:	f001 fbdb 	bl	800277a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fc4:	200b      	movs	r0, #11
 8000fc6:	f001 fbf4 	bl	80027b2 <HAL_NVIC_EnableIRQ>

}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <MX_GPIO_Init+0x5c>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a14      	ldr	r2, [pc, #80]	; (8001034 <MX_GPIO_Init+0x5c>)
 8000fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_GPIO_Init+0x5c>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_GPIO_Init+0x5c>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <MX_GPIO_Init+0x5c>)
 8000ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001000:	6153      	str	r3, [r2, #20]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_GPIO_Init+0x5c>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_GPIO_Init+0x5c>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <MX_GPIO_Init+0x5c>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6153      	str	r3, [r2, #20]
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_GPIO_Init+0x5c>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	//prevent unused arguments compilation warning
	UNUSED(hadc);

	adc_val_1 = ADC_Buff[0];
 8001040:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <HAL_ADC_ConvCpltCallback+0x68>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001046:	6013      	str	r3, [r2, #0]
		adc_val_2 = ADC_Buff[1];
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_ADC_ConvCpltCallback+0x68>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x70>)
 800104e:	6013      	str	r3, [r2, #0]



	    voltage_1 = (((float)adc_val_1)/4095.0f)*3.3f;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105c:	eddf 6a13 	vldr	s13, [pc, #76]	; 80010ac <HAL_ADC_ConvCpltCallback+0x74>
 8001060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001064:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80010b0 <HAL_ADC_ConvCpltCallback+0x78>
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x7c>)
 800106e:	edc3 7a00 	vstr	s15, [r3]



		current_1 = (((float)adc_val_2)/4095.0f)*3.3f;
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_ADC_ConvCpltCallback+0x70>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	ee07 3a90 	vmov	s15, r3
 800107a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800107e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80010ac <HAL_ADC_ConvCpltCallback+0x74>
 8001082:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001086:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80010b0 <HAL_ADC_ConvCpltCallback+0x78>
 800108a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001090:	edc3 7a00 	vstr	s15, [r3]


}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	20000314 	.word	0x20000314
 80010a4:	2000031c 	.word	0x2000031c
 80010a8:	2000021c 	.word	0x2000021c
 80010ac:	457ff000 	.word	0x457ff000
 80010b0:	40533333 	.word	0x40533333
 80010b4:	200003f4 	.word	0x200003f4
 80010b8:	20000204 	.word	0x20000204

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <Error_Handler+0x8>
	...

080010c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b0f      	ldr	r3, [pc, #60]	; (800110c <HAL_MspInit+0x44>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	4a0e      	ldr	r2, [pc, #56]	; (800110c <HAL_MspInit+0x44>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6193      	str	r3, [r2, #24]
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <HAL_MspInit+0x44>)
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <HAL_MspInit+0x44>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a08      	ldr	r2, [pc, #32]	; (800110c <HAL_MspInit+0x44>)
 80010ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_MspInit+0x44>)
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001130:	d14b      	bne.n	80011ca <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001132:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <HAL_ADC_MspInit+0xc4>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	4a27      	ldr	r2, [pc, #156]	; (80011d4 <HAL_ADC_MspInit+0xc4>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6153      	str	r3, [r2, #20]
 800113e:	4b25      	ldr	r3, [pc, #148]	; (80011d4 <HAL_ADC_MspInit+0xc4>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b22      	ldr	r3, [pc, #136]	; (80011d4 <HAL_ADC_MspInit+0xc4>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <HAL_ADC_MspInit+0xc4>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6153      	str	r3, [r2, #20]
 8001156:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_ADC_MspInit+0xc4>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN11
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001162:	2303      	movs	r3, #3
 8001164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001166:	2303      	movs	r3, #3
 8001168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116e:	f107 0314 	add.w	r3, r7, #20
 8001172:	4619      	mov	r1, r3
 8001174:	4818      	ldr	r0, [pc, #96]	; (80011d8 <HAL_ADC_MspInit+0xc8>)
 8001176:	f001 fccd 	bl	8002b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 800117c:	4a18      	ldr	r2, [pc, #96]	; (80011e0 <HAL_ADC_MspInit+0xd0>)
 800117e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001180:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 8001182:	2200      	movs	r2, #0
 8001184:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 8001194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001198:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 800119c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 80011a4:	2220      	movs	r2, #32
 80011a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 80011b0:	f001 fb19 	bl	80027e6 <HAL_DMA_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 80011ba:	f7ff ff7f 	bl	80010bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a06      	ldr	r2, [pc, #24]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38
 80011c4:	4a05      	ldr	r2, [pc, #20]	; (80011dc <HAL_ADC_MspInit+0xcc>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	20000280 	.word	0x20000280
 80011e0:	40020008 	.word	0x40020008

080011e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a13      	ldr	r2, [pc, #76]	; (8001240 <HAL_TIM_Base_MspInit+0x5c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d10c      	bne.n	8001210 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_TIM_Base_MspInit+0x60>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <HAL_TIM_Base_MspInit+0x60>)
 80011fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001200:	6193      	str	r3, [r2, #24]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_TIM_Base_MspInit+0x60>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800120e:	e010      	b.n	8001232 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001218:	d10b      	bne.n	8001232 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_TIM_Base_MspInit+0x60>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_TIM_Base_MspInit+0x60>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_TIM_Base_MspInit+0x60>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40012c00 	.word	0x40012c00
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001268:	d11c      	bne.n	80012a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_TIM_MspPostInit+0x64>)
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_TIM_MspPostInit+0x64>)
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	6153      	str	r3, [r2, #20]
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_TIM_MspPostInit+0x64>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001282:	2301      	movs	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001292:	2301      	movs	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a0:	f001 fc38 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021000 	.word	0x40021000

080012b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_UART_MspInit+0x80>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d129      	bne.n	8001326 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	6153      	str	r3, [r2, #20]
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_UART_MspInit+0x84>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001302:	f248 0304 	movw	r3, #32772	; 0x8004
 8001306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001314:	2307      	movs	r3, #7
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f001 fbf7 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40004400 	.word	0x40004400
 8001334:	40021000 	.word	0x40021000

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f954 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <DMA1_Channel1_IRQHandler+0x10>)
 8001392:	f001 face 	bl	8002932 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000280 	.word	0x20000280

080013a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_kill>:

int _kill(int pid, int sig)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013ba:	f004 fb47 	bl	8005a4c <__errno>
 80013be:	4603      	mov	r3, r0
 80013c0:	2216      	movs	r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
	return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_exit>:

void _exit (int status)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe7 	bl	80013b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013e2:	e7fe      	b.n	80013e2 <_exit+0x12>

080013e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
	}

return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf1      	blt.n	8001430 <_write+0x12>
	}
	return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_close>:

int _close(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
	return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
	return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
	return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f004 faac 	bl	8005a4c <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20003000 	.word	0x20003000
 8001520:	00000400 	.word	0x00000400
 8001524:	200001f8 	.word	0x200001f8
 8001528:	20000410 	.word	0x20000410

0800152c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001554:	f7ff ffea 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <LoopForever+0x6>)
  ldr r1, =_edata
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <LoopForever+0xa>)
  ldr r2, =_sidata
 800155c:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <LoopForever+0xe>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001570:	4c0a      	ldr	r4, [pc, #40]	; (800159c <LoopForever+0x16>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800157e:	f004 fa6b 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001582:	f7ff fb11 	bl	8000ba8 <main>

08001586 <LoopForever>:

LoopForever:
    b LoopForever
 8001586:	e7fe      	b.n	8001586 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001588:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800158c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001590:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001594:	08008894 	.word	0x08008894
  ldr r2, =_sbss
 8001598:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800159c:	2000040c 	.word	0x2000040c

080015a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC1_2_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_Init+0x28>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_Init+0x28>)
 80015ae:	f043 0310 	orr.w	r3, r3, #16
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f001 f8d5 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fd82 	bl	80010c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000

080015d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 f8ed 	bl	80027ce <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f001 f8b5 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	200003f8 	.word	0x200003f8

08001658 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;  
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200003f8 	.word	0x200003f8

08001670 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b09a      	sub	sp, #104	; 0x68
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e172      	b.n	800199e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d176      	bne.n	80017b8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d152      	bne.n	8001778 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fd0f 	bl	8001110 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d13b      	bne.n	8001778 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fef9 	bl	80024f8 <ADC_Disable>
 8001706:	4603      	mov	r3, r0
 8001708:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f003 0310 	and.w	r3, r3, #16
 8001714:	2b00      	cmp	r3, #0
 8001716:	d12f      	bne.n	8001778 <HAL_ADC_Init+0xe0>
 8001718:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800171c:	2b00      	cmp	r3, #0
 800171e:	d12b      	bne.n	8001778 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001728:	f023 0302 	bic.w	r3, r3, #2
 800172c:	f043 0202 	orr.w	r2, r3, #2
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001742:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001752:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001754:	4b94      	ldr	r3, [pc, #592]	; (80019a8 <HAL_ADC_Init+0x310>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a94      	ldr	r2, [pc, #592]	; (80019ac <HAL_ADC_Init+0x314>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0c9a      	lsrs	r2, r3, #18
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800176a:	e002      	b.n	8001772 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3b01      	subs	r3, #1
 8001770:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001772:	68bb      	ldr	r3, [r7, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f9      	bne.n	800176c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001790:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001794:	d110      	bne.n	80017b8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f023 0312 	bic.w	r3, r3, #18
 800179e:	f043 0210 	orr.w	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f040 80df 	bne.w	8001984 <HAL_ADC_Init+0x2ec>
 80017c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f040 80da 	bne.w	8001984 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 80d2 	bne.w	8001984 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017e8:	f043 0202 	orr.w	r2, r3, #2
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f0:	4b6f      	ldr	r3, [pc, #444]	; (80019b0 <HAL_ADC_Init+0x318>)
 80017f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017fc:	d102      	bne.n	8001804 <HAL_ADC_Init+0x16c>
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_ADC_Init+0x31c>)
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e002      	b.n	800180a <HAL_ADC_Init+0x172>
 8001804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001808:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d108      	bne.n	800182a <HAL_ADC_Init+0x192>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d101      	bne.n	800182a <HAL_ADC_Init+0x192>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_ADC_Init+0x194>
 800182a:	2300      	movs	r3, #0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d11c      	bne.n	800186a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001830:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001832:	2b00      	cmp	r3, #0
 8001834:	d010      	beq.n	8001858 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 0303 	and.w	r3, r3, #3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d107      	bne.n	8001852 <HAL_ADC_Init+0x1ba>
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b01      	cmp	r3, #1
 800184c:	d101      	bne.n	8001852 <HAL_ADC_Init+0x1ba>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_ADC_Init+0x1bc>
 8001852:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001854:	2b00      	cmp	r3, #0
 8001856:	d108      	bne.n	800186a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	431a      	orrs	r2, r3
 8001866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001868:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7e5b      	ldrb	r3, [r3, #25]
 800186e:	035b      	lsls	r3, r3, #13
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001874:	2a01      	cmp	r2, #1
 8001876:	d002      	beq.n	800187e <HAL_ADC_Init+0x1e6>
 8001878:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800187c:	e000      	b.n	8001880 <HAL_ADC_Init+0x1e8>
 800187e:	2200      	movs	r2, #0
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	431a      	orrs	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4313      	orrs	r3, r2
 800188e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001890:	4313      	orrs	r3, r2
 8001892:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 3020 	ldrb.w	r3, [r3, #32]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d11b      	bne.n	80018d6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7e5b      	ldrb	r3, [r3, #25]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	3b01      	subs	r3, #1
 80018ac:	045a      	lsls	r2, r3, #17
 80018ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018b0:	4313      	orrs	r3, r2
 80018b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b6:	663b      	str	r3, [r7, #96]	; 0x60
 80018b8:	e00d      	b.n	80018d6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018c2:	f043 0220 	orr.w	r2, r3, #32
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	4313      	orrs	r3, r2
 80018e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ea:	4313      	orrs	r3, r2
 80018ec:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f003 030c 	and.w	r3, r3, #12
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d114      	bne.n	8001926 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800190a:	f023 0302 	bic.w	r3, r3, #2
 800190e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7e1b      	ldrb	r3, [r3, #24]
 8001914:	039a      	lsls	r2, r3, #14
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4313      	orrs	r3, r2
 8001920:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001922:	4313      	orrs	r3, r2
 8001924:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_ADC_Init+0x320>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001936:	430b      	orrs	r3, r1
 8001938:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d10c      	bne.n	800195c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	f023 010f 	bic.w	r1, r3, #15
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	1e5a      	subs	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	e007      	b.n	800196c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 020f 	bic.w	r2, r2, #15
 800196a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0201 	orr.w	r2, r3, #1
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	641a      	str	r2, [r3, #64]	; 0x40
 8001982:	e00a      	b.n	800199a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	f023 0312 	bic.w	r3, r3, #18
 800198c:	f043 0210 	orr.w	r2, r3, #16
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001994:	2301      	movs	r3, #1
 8001996:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800199a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3768      	adds	r7, #104	; 0x68
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000000 	.word	0x20000000
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	50000300 	.word	0x50000300
 80019b4:	50000100 	.word	0x50000100
 80019b8:	fff0c007 	.word	0xfff0c007

080019bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80b9 	bne.w	8001b4e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_Start_DMA+0x2e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e0b4      	b.n	8001b54 <HAL_ADC_Start_DMA+0x198>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80019f2:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <HAL_ADC_Start_DMA+0x1a0>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f040 80a0 	bne.w	8001b40 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 fd15 	bl	8002430 <ADC_Enable>
 8001a06:	4603      	mov	r3, r0
 8001a08:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a0a:	7dfb      	ldrb	r3, [r7, #23]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f040 8092 	bne.w	8001b36 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a1a:	f023 0301 	bic.w	r3, r3, #1
 8001a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <HAL_ADC_Start_DMA+0x1a0>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_ADC_Start_DMA+0x80>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a3a:	d115      	bne.n	8001a68 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d027      	beq.n	8001aa6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001a66:	e01e      	b.n	8001aa6 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7c:	d004      	beq.n	8001a88 <HAL_ADC_Start_DMA+0xcc>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a37      	ldr	r2, [pc, #220]	; (8001b60 <HAL_ADC_Start_DMA+0x1a4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d10e      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0xea>
 8001a88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d007      	beq.n	8001aa6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ab2:	d106      	bne.n	8001ac2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	f023 0206 	bic.w	r2, r3, #6
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	645a      	str	r2, [r3, #68]	; 0x44
 8001ac0:	e002      	b.n	8001ac8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	4a23      	ldr	r2, [pc, #140]	; (8001b64 <HAL_ADC_Start_DMA+0x1a8>)
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001adc:	4a22      	ldr	r2, [pc, #136]	; (8001b68 <HAL_ADC_Start_DMA+0x1ac>)
 8001ade:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_ADC_Start_DMA+0x1b0>)
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	221c      	movs	r2, #28
 8001aee:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0210 	orr.w	r2, r2, #16
 8001afe:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3340      	adds	r3, #64	; 0x40
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f000 fea8 	bl	8002874 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0204 	orr.w	r2, r2, #4
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00d      	b.n	8001b52 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b3e:	e008      	b.n	8001b52 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001b4c:	e001      	b.n	8001b52 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	50000300 	.word	0x50000300
 8001b60:	50000100 	.word	0x50000100
 8001b64:	08002365 	.word	0x08002365
 8001b68:	080023df 	.word	0x080023df
 8001b6c:	080023fb 	.word	0x080023fb

08001b70 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ADCEx_Calibration_Start+0x1c>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e05f      	b.n	8001c4c <HAL_ADCEx_Calibration_Start+0xdc>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 fcaf 	bl	80024f8 <ADC_Disable>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d14e      	bne.n	8001c42 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001bb8:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d107      	bne.n	8001bd0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bce:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001bde:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001be0:	f7ff fd3a 	bl	8001658 <HAL_GetTick>
 8001be4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001be6:	e01c      	b.n	8001c22 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001be8:	f7ff fd36 	bl	8001658 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b0a      	cmp	r3, #10
 8001bf4:	d915      	bls.n	8001c22 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c04:	d10d      	bne.n	8001c22 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f023 0312 	bic.w	r3, r3, #18
 8001c0e:	f043 0210 	orr.w	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e014      	b.n	8001c4c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c30:	d0da      	beq.n	8001be8 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b09b      	sub	sp, #108	; 0x6c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_ADC_ConfigChannel+0x22>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e2a5      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x56e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f040 8289 	bne.w	80021a0 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d81c      	bhi.n	8001cd0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	461a      	mov	r2, r3
 8001caa:	231f      	movs	r3, #31
 8001cac:	4093      	lsls	r3, r2
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	4019      	ands	r1, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6818      	ldr	r0, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8001cce:	e063      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d81e      	bhi.n	8001d16 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	3b1e      	subs	r3, #30
 8001cec:	221f      	movs	r2, #31
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
 8001d14:	e040      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b0e      	cmp	r3, #14
 8001d1c:	d81e      	bhi.n	8001d5c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	3b3c      	subs	r3, #60	; 0x3c
 8001d32:	221f      	movs	r2, #31
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	4019      	ands	r1, r3
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	3b3c      	subs	r3, #60	; 0x3c
 8001d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	639a      	str	r2, [r3, #56]	; 0x38
 8001d5a:	e01d      	b.n	8001d98 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	3b5a      	subs	r3, #90	; 0x5a
 8001d70:	221f      	movs	r2, #31
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4019      	ands	r1, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	3b5a      	subs	r3, #90	; 0x5a
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 80e5 	bne.w	8001f72 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d91c      	bls.n	8001dea <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6999      	ldr	r1, [r3, #24]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b1e      	subs	r3, #30
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4019      	ands	r1, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6898      	ldr	r0, [r3, #8]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	619a      	str	r2, [r3, #24]
 8001de8:	e019      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6959      	ldr	r1, [r3, #20]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	4019      	ands	r1, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6898      	ldr	r0, [r3, #8]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	fa00 f203 	lsl.w	r2, r0, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d84f      	bhi.n	8001ee0 <HAL_ADC_ConfigChannel+0x28c>
 8001e40:	a201      	add	r2, pc, #4	; (adr r2, 8001e48 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e46:	bf00      	nop
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e7b 	.word	0x08001e7b
 8001e50:	08001e9d 	.word	0x08001e9d
 8001e54:	08001ebf 	.word	0x08001ebf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e5e:	4b9e      	ldr	r3, [pc, #632]	; (80020d8 <HAL_ADC_ConfigChannel+0x484>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	0691      	lsls	r1, r2, #26
 8001e68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e76:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e78:	e07e      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e80:	4b95      	ldr	r3, [pc, #596]	; (80020d8 <HAL_ADC_ConfigChannel+0x484>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	0691      	lsls	r1, r2, #26
 8001e8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e98:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e9a:	e06d      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ea2:	4b8d      	ldr	r3, [pc, #564]	; (80020d8 <HAL_ADC_ConfigChannel+0x484>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	0691      	lsls	r1, r2, #26
 8001eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eba:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ebc:	e05c      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ec4:	4b84      	ldr	r3, [pc, #528]	; (80020d8 <HAL_ADC_ConfigChannel+0x484>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	0691      	lsls	r1, r2, #26
 8001ece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001edc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ede:	e04b      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	069b      	lsls	r3, r3, #26
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f02:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	069b      	lsls	r3, r3, #26
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f26:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	069b      	lsls	r3, r3, #26
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f4a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	069b      	lsls	r3, r3, #26
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d10a      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f6e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f70:	e001      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001f76:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d108      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x344>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x344>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x346>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 810b 	bne.w	80021b6 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d00f      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fc6:	e049      	b.n	800205c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b09      	cmp	r3, #9
 8001fe8:	d91c      	bls.n	8002024 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6999      	ldr	r1, [r3, #24]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b1b      	subs	r3, #27
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	4019      	ands	r1, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6898      	ldr	r0, [r3, #8]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1b      	subs	r3, #27
 8002016:	fa00 f203 	lsl.w	r2, r0, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	619a      	str	r2, [r3, #24]
 8002022:	e01b      	b.n	800205c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6959      	ldr	r1, [r3, #20]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	2207      	movs	r2, #7
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	4019      	ands	r1, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6898      	ldr	r0, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	fa00 f203 	lsl.w	r2, r0, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800205c:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HAL_ADC_ConfigChannel+0x488>)
 800205e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b10      	cmp	r3, #16
 8002066:	d105      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002078:	2b11      	cmp	r3, #17
 800207a:	d105      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800207c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00b      	beq.n	80020a0 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800208c:	2b12      	cmp	r3, #18
 800208e:	f040 8092 	bne.w	80021b6 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 808b 	bne.w	80021b6 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a8:	d102      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x45c>
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <HAL_ADC_ConfigChannel+0x48c>)
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e002      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x462>
 80020b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020b4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d10f      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x490>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d108      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x490>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e007      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x492>
 80020d6:	bf00      	nop
 80020d8:	83fff000 	.word	0x83fff000
 80020dc:	50000300 	.word	0x50000300
 80020e0:	50000100 	.word	0x50000100
 80020e4:	2300      	movs	r3, #0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d150      	bne.n	800218c <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d107      	bne.n	800210c <HAL_ADC_ConfigChannel+0x4b8>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x4b8>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_ADC_ConfigChannel+0x4ba>
 800210c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800210e:	2b00      	cmp	r3, #0
 8002110:	d13c      	bne.n	800218c <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b10      	cmp	r3, #16
 8002118:	d11d      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x502>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002122:	d118      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800212c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800212e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_ADC_ConfigChannel+0x57c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_ADC_ConfigChannel+0x580>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	0c9a      	lsrs	r2, r3, #18
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002146:	e002      	b.n	800214e <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002154:	e02e      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b11      	cmp	r3, #17
 800215c:	d10b      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x522>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002166:	d106      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002172:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002174:	e01e      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b12      	cmp	r3, #18
 800217c:	d11a      	bne.n	80021b4 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800217e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002188:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800218a:	e013      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800219e:	e00a      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021b4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80021be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	376c      	adds	r7, #108	; 0x6c
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000000 	.word	0x20000000
 80021d4:	431bde83 	.word	0x431bde83

080021d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80021d8:	b480      	push	{r7}
 80021da:	b099      	sub	sp, #100	; 0x64
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f0:	d102      	bne.n	80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80021f2:	4b5a      	ldr	r3, [pc, #360]	; (800235c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	e002      	b.n	80021fe <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80021f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021fc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0a2      	b.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002212:	2302      	movs	r3, #2
 8002214:	e09b      	b.n	800234e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d17f      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d179      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002238:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800223a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d040      	beq.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002244:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002256:	035b      	lsls	r3, r3, #13
 8002258:	430b      	orrs	r3, r1
 800225a:	431a      	orrs	r2, r3
 800225c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800225e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002280:	2300      	movs	r3, #0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d15c      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80022a2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d14b      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80022b0:	f023 030f 	bic.w	r3, r3, #15
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	6811      	ldr	r1, [r2, #0]
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	6892      	ldr	r2, [r2, #8]
 80022bc:	430a      	orrs	r2, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022c4:	e03c      	b.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80022c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d108      	bne.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80022f2:	2300      	movs	r3, #0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d123      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002314:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d112      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800231a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002322:	f023 030f 	bic.w	r3, r3, #15
 8002326:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002328:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800232a:	e009      	b.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800233e:	e000      	b.n	8002342 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002340:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800234a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800234e:	4618      	mov	r0, r3
 8002350:	3764      	adds	r7, #100	; 0x64
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300

08002364 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800237a:	2b00      	cmp	r3, #0
 800237c:	d126      	bne.n	80023cc <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002394:	2b00      	cmp	r3, #0
 8002396:	d115      	bne.n	80023c4 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d105      	bne.n	80023c4 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f043 0201 	orr.w	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7fe fe37 	bl	8001038 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023ca:	e004      	b.n	80023d6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
}
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff f93f 	bl	8001670 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f043 0204 	orr.w	r2, r3, #4
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff f92f 	bl	8001684 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d108      	bne.n	800245c <ADC_Enable+0x2c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <ADC_Enable+0x2c>
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <ADC_Enable+0x2e>
 800245c:	2300      	movs	r3, #0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d143      	bne.n	80024ea <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <ADC_Enable+0xc4>)
 800246a:	4013      	ands	r3, r2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f043 0201 	orr.w	r2, r3, #1
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e02f      	b.n	80024ec <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800249c:	f7ff f8dc 	bl	8001658 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024a2:	e01b      	b.n	80024dc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024a4:	f7ff f8d8 	bl	8001658 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d914      	bls.n	80024dc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d00d      	beq.n	80024dc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0210 	orr.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d1dc      	bne.n	80024a4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	8000003f 	.word	0x8000003f

080024f8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <ADC_Disable+0x2c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <ADC_Disable+0x2c>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <ADC_Disable+0x2e>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d047      	beq.n	80025ba <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030d 	and.w	r3, r3, #13
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10f      	bne.n	8002558 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0202 	orr.w	r2, r2, #2
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2203      	movs	r2, #3
 800254e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002550:	f7ff f882 	bl	8001658 <HAL_GetTick>
 8002554:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002556:	e029      	b.n	80025ac <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0210 	orr.w	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	f043 0201 	orr.w	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e023      	b.n	80025bc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002574:	f7ff f870 	bl	8001658 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d914      	bls.n	80025ac <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d10d      	bne.n	80025ac <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f043 0210 	orr.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e007      	b.n	80025bc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d0dc      	beq.n	8002574 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <__NVIC_EnableIRQ+0x38>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	; (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	; (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	; 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	; (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff29 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff3e 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff31 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa2 	bl	8002720 <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e037      	b.n	800286c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2202      	movs	r2, #2
 8002800:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002812:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002816:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800282c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f940 	bl	8002ad4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}  
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_DMA_Start_IT+0x20>
 8002890:	2302      	movs	r3, #2
 8002892:	e04a      	b.n	800292a <HAL_DMA_Start_IT+0xb6>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d13a      	bne.n	800291c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2202      	movs	r2, #2
 80028aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f8d4 	bl	8002a78 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f042 020e 	orr.w	r2, r2, #14
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e00f      	b.n	800290a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 020a 	orr.w	r2, r2, #10
 80028f8:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0204 	bic.w	r2, r2, #4
 8002908:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0201 	orr.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	e005      	b.n	8002928 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002924:	2302      	movs	r3, #2
 8002926:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002928:	7dfb      	ldrb	r3, [r7, #23]
} 
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d024      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x72>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d01f      	beq.n	80029a4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0204 	bic.w	r2, r2, #4
 8002980:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	2104      	movs	r1, #4
 800298c:	fa01 f202 	lsl.w	r2, r1, r2
 8002990:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d06a      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80029a2:	e065      	b.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	2202      	movs	r2, #2
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d02c      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xdc>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d027      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10b      	bne.n	80029e4 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 020a 	bic.w	r2, r2, #10
 80029da:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	2102      	movs	r1, #2
 80029ee:	fa01 f202 	lsl.w	r2, r1, r2
 80029f2:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d035      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002a0c:	e030      	b.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2208      	movs	r2, #8
 8002a14:	409a      	lsls	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d028      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 020e 	bic.w	r2, r2, #14
 8002a36:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4798      	blx	r3
    }
  }
}  
 8002a6e:	e7ff      	b.n	8002a70 <HAL_DMA_IRQHandler+0x13e>
 8002a70:	bf00      	nop
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	2101      	movs	r1, #1
 8002a90:	fa01 f202 	lsl.w	r2, r1, r2
 8002a94:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d108      	bne.n	8002ab8 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ab6:	e007      	b.n	8002ac8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
}
 8002ac8:	bf00      	nop
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <DMA_CalcBaseAndBitshift+0x34>)
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <DMA_CalcBaseAndBitshift+0x38>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	009a      	lsls	r2, r3, #2
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a06      	ldr	r2, [pc, #24]	; (8002b10 <DMA_CalcBaseAndBitshift+0x3c>)
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	bffdfff8 	.word	0xbffdfff8
 8002b0c:	cccccccd 	.word	0xcccccccd
 8002b10:	40020000 	.word	0x40020000

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b22:	e14e      	b.n	8002dc2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	4013      	ands	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 8140 	beq.w	8002dbc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d005      	beq.n	8002b54 <HAL_GPIO_Init+0x40>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d130      	bne.n	8002bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 0201 	and.w	r2, r3, #1
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d017      	beq.n	8002bf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d123      	bne.n	8002c46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	08da      	lsrs	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3208      	adds	r2, #8
 8002c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	08da      	lsrs	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3208      	adds	r2, #8
 8002c40:	6939      	ldr	r1, [r7, #16]
 8002c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0203 	and.w	r2, r3, #3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 809a 	beq.w	8002dbc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c88:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <HAL_GPIO_Init+0x2cc>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	4a54      	ldr	r2, [pc, #336]	; (8002de0 <HAL_GPIO_Init+0x2cc>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6193      	str	r3, [r2, #24]
 8002c94:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_GPIO_Init+0x2cc>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ca0:	4a50      	ldr	r2, [pc, #320]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cca:	d013      	beq.n	8002cf4 <HAL_GPIO_Init+0x1e0>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a46      	ldr	r2, [pc, #280]	; (8002de8 <HAL_GPIO_Init+0x2d4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_GPIO_Init+0x1dc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a45      	ldr	r2, [pc, #276]	; (8002dec <HAL_GPIO_Init+0x2d8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d007      	beq.n	8002cec <HAL_GPIO_Init+0x1d8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a44      	ldr	r2, [pc, #272]	; (8002df0 <HAL_GPIO_Init+0x2dc>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_GPIO_Init+0x1d4>
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e006      	b.n	8002cf6 <HAL_GPIO_Init+0x1e2>
 8002ce8:	2305      	movs	r3, #5
 8002cea:	e004      	b.n	8002cf6 <HAL_GPIO_Init+0x1e2>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e002      	b.n	8002cf6 <HAL_GPIO_Init+0x1e2>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_GPIO_Init+0x1e2>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	f002 0203 	and.w	r2, r2, #3
 8002cfc:	0092      	lsls	r2, r2, #2
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d06:	4937      	ldr	r1, [pc, #220]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	089b      	lsrs	r3, r3, #2
 8002d0c:	3302      	adds	r3, #2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d14:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d38:	4a2e      	ldr	r2, [pc, #184]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d62:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	43db      	mvns	r3, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002db6:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <HAL_GPIO_Init+0x2e0>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f aea9 	bne.w	8002b24 <HAL_GPIO_Init+0x10>
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40010000 	.word	0x40010000
 8002de8:	48000400 	.word	0x48000400
 8002dec:	48000800 	.word	0x48000800
 8002df0:	48000c00 	.word	0x48000c00
 8002df4:	40010400 	.word	0x40010400

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e04:	1d3b      	adds	r3, r7, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f000 bef4 	b.w	8003bfa <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 816a 	beq.w	80030f6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e22:	4bb3      	ldr	r3, [pc, #716]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 030c 	and.w	r3, r3, #12
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d00c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e2e:	4bb0      	ldr	r3, [pc, #704]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 030c 	and.w	r3, r3, #12
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d159      	bne.n	8002eee <HAL_RCC_OscConfig+0xf6>
 8002e3a:	4bad      	ldr	r3, [pc, #692]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e46:	d152      	bne.n	8002eee <HAL_RCC_OscConfig+0xf6>
 8002e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e4c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e5c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d102      	bne.n	8002e7a <HAL_RCC_OscConfig+0x82>
 8002e74:	4b9e      	ldr	r3, [pc, #632]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	e015      	b.n	8002ea6 <HAL_RCC_OscConfig+0xae>
 8002e7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e7e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e82:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e92:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e96:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002ea2:	4b93      	ldr	r3, [pc, #588]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eaa:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002eae:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002eb2:	fa92 f2a2 	rbit	r2, r2
 8002eb6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002eba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002ebe:	fab2 f282 	clz	r2, r2
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f042 0220 	orr.w	r2, r2, #32
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	f002 021f 	and.w	r2, r2, #31
 8002ece:	2101      	movs	r1, #1
 8002ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 810c 	beq.w	80030f4 <HAL_RCC_OscConfig+0x2fc>
 8002edc:	1d3b      	adds	r3, r7, #4
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 8106 	bne.w	80030f4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	f000 be86 	b.w	8003bfa <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eee:	1d3b      	adds	r3, r7, #4
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x110>
 8002efa:	4b7d      	ldr	r3, [pc, #500]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7c      	ldr	r2, [pc, #496]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e030      	b.n	8002f6a <HAL_RCC_OscConfig+0x172>
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x134>
 8002f12:	4b77      	ldr	r3, [pc, #476]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a76      	ldr	r2, [pc, #472]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b74      	ldr	r3, [pc, #464]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a73      	ldr	r2, [pc, #460]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01e      	b.n	8002f6a <HAL_RCC_OscConfig+0x172>
 8002f2c:	1d3b      	adds	r3, r7, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCC_OscConfig+0x15a>
 8002f38:	4b6d      	ldr	r3, [pc, #436]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a6c      	ldr	r2, [pc, #432]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b6a      	ldr	r3, [pc, #424]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a69      	ldr	r2, [pc, #420]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	e00b      	b.n	8002f6a <HAL_RCC_OscConfig+0x172>
 8002f52:	4b67      	ldr	r3, [pc, #412]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a66      	ldr	r2, [pc, #408]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b64      	ldr	r3, [pc, #400]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a63      	ldr	r2, [pc, #396]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b61      	ldr	r3, [pc, #388]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6e:	f023 020f 	bic.w	r2, r3, #15
 8002f72:	1d3b      	adds	r3, r7, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	495d      	ldr	r1, [pc, #372]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d059      	beq.n	800303c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7fe fb66 	bl	8001658 <HAL_GetTick>
 8002f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f92:	f7fe fb61 	bl	8001658 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d902      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	f000 be29 	b.w	8003bfa <HAL_RCC_OscConfig+0xe02>
 8002fa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002fb4:	fa93 f3a3 	rbit	r3, r3
 8002fb8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002fbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_RCC_OscConfig+0x1e2>
 8002fd4:	4b46      	ldr	r3, [pc, #280]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	e015      	b.n	8003006 <HAL_RCC_OscConfig+0x20e>
 8002fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fde:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002ff6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002ffa:	fa93 f3a3 	rbit	r3, r3
 8002ffe:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800300a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800300e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003012:	fa92 f2a2 	rbit	r2, r2
 8003016:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800301a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800301e:	fab2 f282 	clz	r2, r2
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	f042 0220 	orr.w	r2, r2, #32
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	f002 021f 	and.w	r2, r2, #31
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f202 	lsl.w	r2, r1, r2
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0ab      	beq.n	8002f92 <HAL_RCC_OscConfig+0x19a>
 800303a:	e05c      	b.n	80030f6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fb0c 	bl	8001658 <HAL_GetTick>
 8003040:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003044:	e00a      	b.n	800305c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003046:	f7fe fb07 	bl	8001658 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d902      	bls.n	800305c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	f000 bdcf 	b.w	8003bfa <HAL_RCC_OscConfig+0xe02>
 800305c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003060:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003070:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d102      	bne.n	800308e <HAL_RCC_OscConfig+0x296>
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	e015      	b.n	80030ba <HAL_RCC_OscConfig+0x2c2>
 800308e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003092:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80030a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80030aa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_RCC_OscConfig+0x2f8>)
 80030b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030be:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80030c2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030c6:	fa92 f2a2 	rbit	r2, r2
 80030ca:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80030ce:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80030d2:	fab2 f282 	clz	r2, r2
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	f042 0220 	orr.w	r2, r2, #32
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f002 021f 	and.w	r2, r2, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ab      	bne.n	8003046 <HAL_RCC_OscConfig+0x24e>
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_OscConfig+0x2fe>
 80030f0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	1d3b      	adds	r3, r7, #4
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 816f 	beq.w	80033e4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003106:	4bd0      	ldr	r3, [pc, #832]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003112:	4bcd      	ldr	r3, [pc, #820]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	2b08      	cmp	r3, #8
 800311c:	d16c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x400>
 800311e:	4bca      	ldr	r3, [pc, #808]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d166      	bne.n	80031f8 <HAL_RCC_OscConfig+0x400>
 800312a:	2302      	movs	r3, #2
 800312c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800313c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003140:	fab3 f383 	clz	r3, r3
 8003144:	b2db      	uxtb	r3, r3
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f043 0301 	orr.w	r3, r3, #1
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d102      	bne.n	800315a <HAL_RCC_OscConfig+0x362>
 8003154:	4bbc      	ldr	r3, [pc, #752]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	e013      	b.n	8003182 <HAL_RCC_OscConfig+0x38a>
 800315a:	2302      	movs	r3, #2
 800315c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800316c:	2302      	movs	r3, #2
 800316e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003172:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003176:	fa93 f3a3 	rbit	r3, r3
 800317a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800317e:	4bb2      	ldr	r3, [pc, #712]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	2202      	movs	r2, #2
 8003184:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003188:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800318c:	fa92 f2a2 	rbit	r2, r2
 8003190:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003194:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003198:	fab2 f282 	clz	r2, r2
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	f042 0220 	orr.w	r2, r2, #32
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	f002 021f 	and.w	r2, r2, #31
 80031a8:	2101      	movs	r1, #1
 80031aa:	fa01 f202 	lsl.w	r2, r1, r2
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3cc>
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	f000 bd1b 	b.w	8003bfa <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c4:	4ba0      	ldr	r3, [pc, #640]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	21f8      	movs	r1, #248	; 0xf8
 80031d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031dc:	fa91 f1a1 	rbit	r1, r1
 80031e0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80031e4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80031e8:	fab1 f181 	clz	r1, r1
 80031ec:	b2c9      	uxtb	r1, r1
 80031ee:	408b      	lsls	r3, r1
 80031f0:	4995      	ldr	r1, [pc, #596]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	e0f5      	b.n	80033e4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031f8:	1d3b      	adds	r3, r7, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8085 	beq.w	800330e <HAL_RCC_OscConfig+0x516>
 8003204:	2301      	movs	r3, #1
 8003206:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800320e:	fa93 f3a3 	rbit	r3, r3
 8003212:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003216:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003224:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	461a      	mov	r2, r3
 800322c:	2301      	movs	r3, #1
 800322e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003230:	f7fe fa12 	bl	8001658 <HAL_GetTick>
 8003234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800323a:	f7fe fa0d 	bl	8001658 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d902      	bls.n	8003250 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	f000 bcd5 	b.w	8003bfa <HAL_RCC_OscConfig+0xe02>
 8003250:	2302      	movs	r3, #2
 8003252:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003262:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	fab3 f383 	clz	r3, r3
 800326a:	b2db      	uxtb	r3, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b01      	cmp	r3, #1
 8003278:	d102      	bne.n	8003280 <HAL_RCC_OscConfig+0x488>
 800327a:	4b73      	ldr	r3, [pc, #460]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	e013      	b.n	80032a8 <HAL_RCC_OscConfig+0x4b0>
 8003280:	2302      	movs	r3, #2
 8003282:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003292:	2302      	movs	r3, #2
 8003294:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003298:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2202      	movs	r2, #2
 80032aa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80032ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032b2:	fa92 f2a2 	rbit	r2, r2
 80032b6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80032ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032be:	fab2 f282 	clz	r2, r2
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f042 0220 	orr.w	r2, r2, #32
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	f002 021f 	and.w	r2, r2, #31
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f202 	lsl.w	r2, r1, r2
 80032d4:	4013      	ands	r3, r2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0af      	beq.n	800323a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b5b      	ldr	r3, [pc, #364]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	1d3b      	adds	r3, r7, #4
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	21f8      	movs	r1, #248	; 0xf8
 80032ea:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032f2:	fa91 f1a1 	rbit	r1, r1
 80032f6:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80032fa:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80032fe:	fab1 f181 	clz	r1, r1
 8003302:	b2c9      	uxtb	r1, r1
 8003304:	408b      	lsls	r3, r1
 8003306:	4950      	ldr	r1, [pc, #320]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e06a      	b.n	80033e4 <HAL_RCC_OscConfig+0x5ec>
 800330e:	2301      	movs	r3, #1
 8003310:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003320:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	461a      	mov	r2, r3
 8003336:	2300      	movs	r3, #0
 8003338:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7fe f98d 	bl	8001658 <HAL_GetTick>
 800333e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	e00a      	b.n	800335a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003344:	f7fe f988 	bl	8001658 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d902      	bls.n	800335a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	f000 bc50 	b.w	8003bfa <HAL_RCC_OscConfig+0xe02>
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800336c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <HAL_RCC_OscConfig+0x592>
 8003384:	4b30      	ldr	r3, [pc, #192]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	e013      	b.n	80033b2 <HAL_RCC_OscConfig+0x5ba>
 800338a:	2302      	movs	r3, #2
 800338c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003394:	fa93 f3a3 	rbit	r3, r3
 8003398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800339c:	2302      	movs	r3, #2
 800339e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033a6:	fa93 f3a3 	rbit	r3, r3
 80033aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_RCC_OscConfig+0x650>)
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	2202      	movs	r2, #2
 80033b4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80033b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033bc:	fa92 f2a2 	rbit	r2, r2
 80033c0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80033c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80033c8:	fab2 f282 	clz	r2, r2
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	f042 0220 	orr.w	r2, r2, #32
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f002 021f 	and.w	r2, r2, #31
 80033d8:	2101      	movs	r1, #1
 80033da:	fa01 f202 	lsl.w	r2, r1, r2
 80033de:	4013      	ands	r3, r2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1af      	bne.n	8003344 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f000 80da 	beq.w	80035a8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d069      	beq.n	80034d2 <HAL_RCC_OscConfig+0x6da>
 80033fe:	2301      	movs	r3, #1
 8003400:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003408:	fa93 f3a3 	rbit	r3, r3
 800340c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003414:	fab3 f383 	clz	r3, r3
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_OscConfig+0x654>)
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	461a      	mov	r2, r3
 8003424:	2301      	movs	r3, #1
 8003426:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7fe f916 	bl	8001658 <HAL_GetTick>
 800342c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003430:	e00e      	b.n	8003450 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fe f911 	bl	8001658 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d906      	bls.n	8003450 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e3d9      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	10908120 	.word	0x10908120
 8003450:	2302      	movs	r3, #2
 8003452:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003462:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003466:	2202      	movs	r2, #2
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	fa93 f2a3 	rbit	r2, r3
 8003474:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800347e:	2202      	movs	r2, #2
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f2a3 	rbit	r2, r3
 800348c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003490:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003492:	4ba5      	ldr	r3, [pc, #660]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003496:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800349a:	2102      	movs	r1, #2
 800349c:	6019      	str	r1, [r3, #0]
 800349e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	fa93 f1a3 	rbit	r1, r3
 80034a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034ac:	6019      	str	r1, [r3, #0]
  return result;
 80034ae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	4013      	ands	r3, r2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0b0      	beq.n	8003432 <HAL_RCC_OscConfig+0x63a>
 80034d0:	e06a      	b.n	80035a8 <HAL_RCC_OscConfig+0x7b0>
 80034d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	fa93 f2a3 	rbit	r2, r3
 80034e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034e8:	601a      	str	r2, [r3, #0]
  return result;
 80034ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80034ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	4b8c      	ldr	r3, [pc, #560]	; (800372c <HAL_RCC_OscConfig+0x934>)
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	461a      	mov	r2, r3
 8003500:	2300      	movs	r3, #0
 8003502:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003504:	f7fe f8a8 	bl	8001658 <HAL_GetTick>
 8003508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800350c:	e009      	b.n	8003522 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350e:	f7fe f8a3 	bl	8001658 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e36b      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
 8003522:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003526:	2202      	movs	r2, #2
 8003528:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	fa93 f2a3 	rbit	r2, r3
 8003534:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800353e:	2202      	movs	r2, #2
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	fa93 f2a3 	rbit	r2, r3
 800354c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003556:	2202      	movs	r2, #2
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	fa93 f2a3 	rbit	r2, r3
 8003564:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003568:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356a:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 800356c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800356e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003572:	2102      	movs	r1, #2
 8003574:	6019      	str	r1, [r3, #0]
 8003576:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	fa93 f1a3 	rbit	r1, r3
 8003580:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003584:	6019      	str	r1, [r3, #0]
  return result;
 8003586:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	2101      	movs	r1, #1
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1b2      	bne.n	800350e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 8158 	beq.w	8003868 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4b5a      	ldr	r3, [pc, #360]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d112      	bne.n	80035f0 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	4a56      	ldr	r2, [pc, #344]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d4:	61d3      	str	r3, [r2, #28]
 80035d6:	4b54      	ldr	r3, [pc, #336]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80035de:	f107 0308 	add.w	r3, r7, #8
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	f107 0308 	add.w	r3, r7, #8
 80035e8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f0:	4b4f      	ldr	r3, [pc, #316]	; (8003730 <HAL_RCC_OscConfig+0x938>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d11a      	bne.n	8003632 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fc:	4b4c      	ldr	r3, [pc, #304]	; (8003730 <HAL_RCC_OscConfig+0x938>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <HAL_RCC_OscConfig+0x938>)
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003608:	f7fe f826 	bl	8001658 <HAL_GetTick>
 800360c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003610:	e009      	b.n	8003626 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003612:	f7fe f821 	bl	8001658 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e2e9      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b42      	ldr	r3, [pc, #264]	; (8003730 <HAL_RCC_OscConfig+0x938>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ef      	beq.n	8003612 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d106      	bne.n	800364a <HAL_RCC_OscConfig+0x852>
 800363c:	4b3a      	ldr	r3, [pc, #232]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a39      	ldr	r2, [pc, #228]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6213      	str	r3, [r2, #32]
 8003648:	e02f      	b.n	80036aa <HAL_RCC_OscConfig+0x8b2>
 800364a:	1d3b      	adds	r3, r7, #4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10c      	bne.n	800366e <HAL_RCC_OscConfig+0x876>
 8003654:	4b34      	ldr	r3, [pc, #208]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a33      	ldr	r2, [pc, #204]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	4b31      	ldr	r3, [pc, #196]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a30      	ldr	r2, [pc, #192]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003666:	f023 0304 	bic.w	r3, r3, #4
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e01d      	b.n	80036aa <HAL_RCC_OscConfig+0x8b2>
 800366e:	1d3b      	adds	r3, r7, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	2b05      	cmp	r3, #5
 8003676:	d10c      	bne.n	8003692 <HAL_RCC_OscConfig+0x89a>
 8003678:	4b2b      	ldr	r3, [pc, #172]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a2a      	ldr	r2, [pc, #168]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	4b28      	ldr	r3, [pc, #160]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4a27      	ldr	r2, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6213      	str	r3, [r2, #32]
 8003690:	e00b      	b.n	80036aa <HAL_RCC_OscConfig+0x8b2>
 8003692:	4b25      	ldr	r3, [pc, #148]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a24      	ldr	r2, [pc, #144]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	6213      	str	r3, [r2, #32]
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a21      	ldr	r2, [pc, #132]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 80036a4:	f023 0304 	bic.w	r3, r3, #4
 80036a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d06b      	beq.n	800378c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b4:	f7fd ffd0 	bl	8001658 <HAL_GetTick>
 80036b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00b      	b.n	80036d6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fd ffcb 	bl	8001658 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e291      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
 80036d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036da:	2202      	movs	r2, #2
 80036dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	fa93 f2a3 	rbit	r2, r3
 80036e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036f2:	2202      	movs	r2, #2
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	fa93 f2a3 	rbit	r2, r3
 8003700:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003704:	601a      	str	r2, [r3, #0]
  return result;
 8003706:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800370a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800370c:	fab3 f383 	clz	r3, r3
 8003710:	b2db      	uxtb	r3, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f043 0302 	orr.w	r3, r3, #2
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d109      	bne.n	8003734 <HAL_RCC_OscConfig+0x93c>
 8003720:	4b01      	ldr	r3, [pc, #4]	; (8003728 <HAL_RCC_OscConfig+0x930>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	e014      	b.n	8003750 <HAL_RCC_OscConfig+0x958>
 8003726:	bf00      	nop
 8003728:	40021000 	.word	0x40021000
 800372c:	10908120 	.word	0x10908120
 8003730:	40007000 	.word	0x40007000
 8003734:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003738:	2202      	movs	r2, #2
 800373a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	fa93 f2a3 	rbit	r2, r3
 8003746:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	4bbb      	ldr	r3, [pc, #748]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003754:	2102      	movs	r1, #2
 8003756:	6011      	str	r1, [r2, #0]
 8003758:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	fa92 f1a2 	rbit	r1, r2
 8003762:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003766:	6011      	str	r1, [r2, #0]
  return result;
 8003768:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	fab2 f282 	clz	r2, r2
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f002 021f 	and.w	r2, r2, #31
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f202 	lsl.w	r2, r1, r2
 8003784:	4013      	ands	r3, r2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d099      	beq.n	80036be <HAL_RCC_OscConfig+0x8c6>
 800378a:	e063      	b.n	8003854 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378c:	f7fd ff64 	bl	8001658 <HAL_GetTick>
 8003790:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	e00b      	b.n	80037ae <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd ff5f 	bl	8001658 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e225      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
 80037ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037b2:	2202      	movs	r2, #2
 80037b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	fa93 f2a3 	rbit	r2, r3
 80037c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037ca:	2202      	movs	r2, #2
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	fa93 f2a3 	rbit	r2, r3
 80037d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037dc:	601a      	str	r2, [r3, #0]
  return result;
 80037de:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037e2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e4:	fab3 f383 	clz	r3, r3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	f043 0302 	orr.w	r3, r3, #2
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d102      	bne.n	80037fe <HAL_RCC_OscConfig+0xa06>
 80037f8:	4b90      	ldr	r3, [pc, #576]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	e00d      	b.n	800381a <HAL_RCC_OscConfig+0xa22>
 80037fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003802:	2202      	movs	r2, #2
 8003804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003806:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	4b89      	ldr	r3, [pc, #548]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800381e:	2102      	movs	r1, #2
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	fa92 f1a2 	rbit	r1, r2
 800382c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003830:	6011      	str	r1, [r2, #0]
  return result;
 8003832:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	fab2 f282 	clz	r2, r2
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	f002 021f 	and.w	r2, r2, #31
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1a0      	bne.n	8003796 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003854:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003858:	2b01      	cmp	r3, #1
 800385a:	d105      	bne.n	8003868 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800385c:	4b77      	ldr	r3, [pc, #476]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	4a76      	ldr	r2, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 8003862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003866:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 81c2 	beq.w	8003bf8 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003874:	4b71      	ldr	r3, [pc, #452]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 030c 	and.w	r3, r3, #12
 800387c:	2b08      	cmp	r3, #8
 800387e:	f000 819c 	beq.w	8003bba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	2b02      	cmp	r3, #2
 800388a:	f040 8114 	bne.w	8003ab6 <HAL_RCC_OscConfig+0xcbe>
 800388e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003892:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	fa93 f2a3 	rbit	r2, r3
 80038a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038a6:	601a      	str	r2, [r3, #0]
  return result;
 80038a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80038ac:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	fab3 f383 	clz	r3, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	461a      	mov	r2, r3
 80038c0:	2300      	movs	r3, #0
 80038c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fd fec8 	bl	8001658 <HAL_GetTick>
 80038c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038cc:	e009      	b.n	80038e2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fd fec3 	bl	8001658 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e18b      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
 80038e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	fa93 f2a3 	rbit	r2, r3
 80038f6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80038fa:	601a      	str	r2, [r3, #0]
  return result;
 80038fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003900:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003902:	fab3 f383 	clz	r3, r3
 8003906:	b2db      	uxtb	r3, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_RCC_OscConfig+0xb24>
 8003916:	4b49      	ldr	r3, [pc, #292]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e01b      	b.n	8003954 <HAL_RCC_OscConfig+0xb5c>
 800391c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003920:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003926:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800393a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	fa93 f2a3 	rbit	r2, r3
 800394a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	4b3a      	ldr	r3, [pc, #232]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003958:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800395c:	6011      	str	r1, [r2, #0]
 800395e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	fa92 f1a2 	rbit	r1, r2
 8003968:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800396c:	6011      	str	r1, [r2, #0]
  return result;
 800396e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	fab2 f282 	clz	r2, r2
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	f042 0220 	orr.w	r2, r2, #32
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	f002 021f 	and.w	r2, r2, #31
 8003984:	2101      	movs	r1, #1
 8003986:	fa01 f202 	lsl.w	r2, r1, r2
 800398a:	4013      	ands	r3, r2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d19e      	bne.n	80038ce <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003990:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003998:	1d3b      	adds	r3, r7, #4
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800399e:	1d3b      	adds	r3, r7, #4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	4925      	ldr	r1, [pc, #148]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	fa93 f2a3 	rbit	r2, r3
 80039c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039c4:	601a      	str	r2, [r3, #0]
  return result;
 80039c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80039ca:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	461a      	mov	r2, r3
 80039de:	2301      	movs	r3, #1
 80039e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fd fe39 	bl	8001658 <HAL_GetTick>
 80039e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039ea:	e009      	b.n	8003a00 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ec:	f7fd fe34 	bl	8001658 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e0fc      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
 8003a00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	fa93 f2a3 	rbit	r2, r3
 8003a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a18:	601a      	str	r2, [r3, #0]
  return result;
 8003a1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a20:	fab3 f383 	clz	r3, r3
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	095b      	lsrs	r3, r3, #5
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d105      	bne.n	8003a40 <HAL_RCC_OscConfig+0xc48>
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <HAL_RCC_OscConfig+0xc44>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	e01e      	b.n	8003a78 <HAL_RCC_OscConfig+0xc80>
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	fa93 f2a3 	rbit	r2, r3
 8003a6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <HAL_RCC_OscConfig+0xe0c>)
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a7c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a80:	6011      	str	r1, [r2, #0]
 8003a82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003a86:	6812      	ldr	r2, [r2, #0]
 8003a88:	fa92 f1a2 	rbit	r1, r2
 8003a8c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a90:	6011      	str	r1, [r2, #0]
  return result;
 8003a92:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	fab2 f282 	clz	r2, r2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	f042 0220 	orr.w	r2, r2, #32
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	f002 021f 	and.w	r2, r2, #31
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d09b      	beq.n	80039ec <HAL_RCC_OscConfig+0xbf4>
 8003ab4:	e0a0      	b.n	8003bf8 <HAL_RCC_OscConfig+0xe00>
 8003ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003aba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003abe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	fa93 f2a3 	rbit	r2, r3
 8003aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ace:	601a      	str	r2, [r3, #0]
  return result;
 8003ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ad4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ae0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2300      	movs	r3, #0
 8003aea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aec:	f7fd fdb4 	bl	8001658 <HAL_GetTick>
 8003af0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003af4:	e009      	b.n	8003b0a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af6:	f7fd fdaf 	bl	8001658 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e077      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
 8003b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	fa93 f2a3 	rbit	r2, r3
 8003b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b22:	601a      	str	r2, [r3, #0]
  return result;
 8003b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCC_OscConfig+0xd4c>
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_RCC_OscConfig+0xe0c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	e01b      	b.n	8003b7c <HAL_RCC_OscConfig+0xd84>
 8003b44:	f107 0320 	add.w	r3, r7, #32
 8003b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b4e:	f107 0320 	add.w	r3, r7, #32
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	fa93 f2a3 	rbit	r2, r3
 8003b58:	f107 031c 	add.w	r3, r7, #28
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f107 0318 	add.w	r3, r7, #24
 8003b62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	f107 0318 	add.w	r3, r7, #24
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	fa93 f2a3 	rbit	r2, r3
 8003b72:	f107 0314 	add.w	r3, r7, #20
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	4b22      	ldr	r3, [pc, #136]	; (8003c04 <HAL_RCC_OscConfig+0xe0c>)
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f107 0210 	add.w	r2, r7, #16
 8003b80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	f107 0210 	add.w	r2, r7, #16
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fa92 f1a2 	rbit	r1, r2
 8003b90:	f107 020c 	add.w	r2, r7, #12
 8003b94:	6011      	str	r1, [r2, #0]
  return result;
 8003b96:	f107 020c 	add.w	r2, r7, #12
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	fab2 f282 	clz	r2, r2
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	f042 0220 	orr.w	r2, r2, #32
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	f002 021f 	and.w	r2, r2, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d19e      	bne.n	8003af6 <HAL_RCC_OscConfig+0xcfe>
 8003bb8:	e01e      	b.n	8003bf8 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e018      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_RCC_OscConfig+0xe0c>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bd0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003bd8:	1d3b      	adds	r3, r7, #4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d108      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003be2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003be6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d001      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40021000 	.word	0x40021000

08003c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b09e      	sub	sp, #120	; 0x78
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e162      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c20:	4b90      	ldr	r3, [pc, #576]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d910      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b8d      	ldr	r3, [pc, #564]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 0207 	bic.w	r2, r3, #7
 8003c36:	498b      	ldr	r1, [pc, #556]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b89      	ldr	r3, [pc, #548]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e14a      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c5c:	4b82      	ldr	r3, [pc, #520]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	497f      	ldr	r1, [pc, #508]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80dc 	beq.w	8003e34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d13c      	bne.n	8003cfe <HAL_RCC_ClockConfig+0xf6>
 8003c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c88:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f043 0301 	orr.w	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d102      	bne.n	8003cae <HAL_RCC_ClockConfig+0xa6>
 8003ca8:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	e00f      	b.n	8003cce <HAL_RCC_ClockConfig+0xc6>
 8003cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cb6:	fa93 f3a3 	rbit	r3, r3
 8003cba:	667b      	str	r3, [r7, #100]	; 0x64
 8003cbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cc4:	fa93 f3a3 	rbit	r3, r3
 8003cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cca:	4b67      	ldr	r3, [pc, #412]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cd2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cd6:	fa92 f2a2 	rbit	r2, r2
 8003cda:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003cdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003cde:	fab2 f282 	clz	r2, r2
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	f042 0220 	orr.w	r2, r2, #32
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f002 021f 	and.w	r2, r2, #31
 8003cee:	2101      	movs	r1, #1
 8003cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d17b      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0f3      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d13c      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x178>
 8003d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0e:	fa93 f3a3 	rbit	r3, r3
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d16:	fab3 f383 	clz	r3, r3
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d102      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x128>
 8003d2a:	4b4f      	ldr	r3, [pc, #316]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	e00f      	b.n	8003d50 <HAL_RCC_ClockConfig+0x148>
 8003d30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d38:	fa93 f3a3 	rbit	r3, r3
 8003d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d46:	fa93 f3a3 	rbit	r3, r3
 8003d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d4c:	4b46      	ldr	r3, [pc, #280]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d54:	63ba      	str	r2, [r7, #56]	; 0x38
 8003d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d58:	fa92 f2a2 	rbit	r2, r2
 8003d5c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d60:	fab2 f282 	clz	r2, r2
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	f042 0220 	orr.w	r2, r2, #32
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	f002 021f 	and.w	r2, r2, #31
 8003d70:	2101      	movs	r1, #1
 8003d72:	fa01 f202 	lsl.w	r2, r1, r2
 8003d76:	4013      	ands	r3, r2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13a      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0b2      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x2de>
 8003d80:	2302      	movs	r3, #2
 8003d82:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	fa93 f3a3 	rbit	r3, r3
 8003d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	095b      	lsrs	r3, r3, #5
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d102      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x1a0>
 8003da2:	4b31      	ldr	r3, [pc, #196]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	e00d      	b.n	8003dc4 <HAL_RCC_ClockConfig+0x1bc>
 8003da8:	2302      	movs	r3, #2
 8003daa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	2302      	movs	r3, #2
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	6a3b      	ldr	r3, [r7, #32]
 8003dba:	fa93 f3a3 	rbit	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	61ba      	str	r2, [r7, #24]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	fa92 f2a2 	rbit	r2, r2
 8003dce:	617a      	str	r2, [r7, #20]
  return result;
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	fab2 f282 	clz	r2, r2
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	f042 0220 	orr.w	r2, r2, #32
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	f002 021f 	and.w	r2, r2, #31
 8003de2:	2101      	movs	r1, #1
 8003de4:	fa01 f202 	lsl.w	r2, r1, r2
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e079      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	491a      	ldr	r1, [pc, #104]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fd fc28 	bl	8001658 <HAL_GetTick>
 8003e08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fd fc24 	bl	8001658 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e061      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <HAL_RCC_ClockConfig+0x260>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d214      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 0207 	bic.w	r2, r3, #7
 8003e4a:	4906      	ldr	r1, [pc, #24]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_RCC_ClockConfig+0x25c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0307 	and.w	r3, r3, #7
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e040      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x2de>
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	4b1d      	ldr	r3, [pc, #116]	; (8003ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	491a      	ldr	r1, [pc, #104]	; (8003ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4912      	ldr	r1, [pc, #72]	; (8003ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003eaa:	f000 f829 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 8003eae:	4601      	mov	r1, r0
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <HAL_RCC_ClockConfig+0x2e8>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb8:	22f0      	movs	r2, #240	; 0xf0
 8003eba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	fa92 f2a2 	rbit	r2, r2
 8003ec2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	fab2 f282 	clz	r2, r2
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	40d3      	lsrs	r3, r2
 8003ece:	4a09      	ldr	r2, [pc, #36]	; (8003ef4 <HAL_RCC_ClockConfig+0x2ec>)
 8003ed0:	5cd3      	ldrb	r3, [r2, r3]
 8003ed2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ed6:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <HAL_RCC_ClockConfig+0x2f0>)
 8003ed8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <HAL_RCC_ClockConfig+0x2f4>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fd fb76 	bl	80015d0 <HAL_InitTick>
  
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3778      	adds	r7, #120	; 0x78
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	08008470 	.word	0x08008470
 8003ef8:	20000000 	.word	0x20000000
 8003efc:	20000004 	.word	0x20000004

08003f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b08b      	sub	sp, #44	; 0x2c
 8003f04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d002      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x30>
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCC_GetSysClockFreq+0x36>
 8003f2e:	e03c      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f30:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f32:	623b      	str	r3, [r7, #32]
      break;
 8003f34:	e03c      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f40:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	fa92 f2a2 	rbit	r2, r2
 8003f48:	607a      	str	r2, [r7, #4]
  return result;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	fab2 f282 	clz	r2, r2
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	40d3      	lsrs	r3, r2
 8003f54:	4a1c      	ldr	r2, [pc, #112]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f56:	5cd3      	ldrb	r3, [r2, r3]
 8003f58:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	220f      	movs	r2, #15
 8003f64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	fa92 f2a2 	rbit	r2, r2
 8003f6c:	60fa      	str	r2, [r7, #12]
  return result;
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	fab2 f282 	clz	r2, r2
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	40d3      	lsrs	r3, r2
 8003f78:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f7a:	5cd3      	ldrb	r3, [r2, r3]
 8003f7c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f88:	4a0e      	ldr	r2, [pc, #56]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	fb02 f303 	mul.w	r3, r2, r3
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e004      	b.n	8003fa4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f9e:	fb02 f303 	mul.w	r3, r2, r3
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	623b      	str	r3, [r7, #32]
      break;
 8003fa8:	e002      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fac:	623b      	str	r3, [r7, #32]
      break;
 8003fae:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	372c      	adds	r7, #44	; 0x2c
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	007a1200 	.word	0x007a1200
 8003fc8:	08008488 	.word	0x08008488
 8003fcc:	08008498 	.word	0x08008498
 8003fd0:	003d0900 	.word	0x003d0900

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000000 	.word	0x20000000

08003fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ff2:	f7ff ffef 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff6:	4601      	mov	r1, r0
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004000:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004004:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	fa92 f2a2 	rbit	r2, r2
 800400c:	603a      	str	r2, [r7, #0]
  return result;
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	fab2 f282 	clz	r2, r2
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	40d3      	lsrs	r3, r2
 8004018:	4a04      	ldr	r2, [pc, #16]	; (800402c <HAL_RCC_GetPCLK1Freq+0x40>)
 800401a:	5cd3      	ldrb	r3, [r2, r3]
 800401c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40021000 	.word	0x40021000
 800402c:	08008480 	.word	0x08008480

08004030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004036:	f7ff ffcd 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 800403a:	4601      	mov	r1, r0
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004044:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004048:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	fa92 f2a2 	rbit	r2, r2
 8004050:	603a      	str	r2, [r7, #0]
  return result;
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	fab2 f282 	clz	r2, r2
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	40d3      	lsrs	r3, r2
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <HAL_RCC_GetPCLK2Freq+0x40>)
 800405e:	5cd3      	ldrb	r3, [r2, r3]
 8004060:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004064:	4618      	mov	r0, r3
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40021000 	.word	0x40021000
 8004070:	08008480 	.word	0x08008480

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b092      	sub	sp, #72	; 0x48
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80cd 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004098:	4b86      	ldr	r3, [pc, #536]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10e      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a4:	4b83      	ldr	r3, [pc, #524]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4a82      	ldr	r2, [pc, #520]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ae:	61d3      	str	r3, [r2, #28]
 80040b0:	4b80      	ldr	r3, [pc, #512]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c2:	4b7d      	ldr	r3, [pc, #500]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d118      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ce:	4b7a      	ldr	r3, [pc, #488]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a79      	ldr	r2, [pc, #484]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040da:	f7fd fabd 	bl	8001658 <HAL_GetTick>
 80040de:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e0:	e008      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e2:	f7fd fab9 	bl	8001658 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b64      	cmp	r3, #100	; 0x64
 80040ee:	d901      	bls.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0db      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	4b70      	ldr	r3, [pc, #448]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0f0      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004100:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004108:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800410a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800410c:	2b00      	cmp	r3, #0
 800410e:	d07d      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004118:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800411a:	429a      	cmp	r2, r3
 800411c:	d076      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800411e:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004126:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	fa93 f3a3 	rbit	r3, r3
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	4b5e      	ldr	r3, [pc, #376]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	461a      	mov	r2, r3
 8004148:	2301      	movs	r3, #1
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800415c:	fab3 f383 	clz	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	4b55      	ldr	r3, [pc, #340]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	461a      	mov	r2, r3
 800416c:	2300      	movs	r3, #0
 800416e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004170:	4a50      	ldr	r2, [pc, #320]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004174:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d045      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004180:	f7fd fa6a 	bl	8001658 <HAL_GetTick>
 8004184:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	e00a      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f7fd fa66 	bl	8001658 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	f241 3288 	movw	r2, #5000	; 0x1388
 8004196:	4293      	cmp	r3, r2
 8004198:	d901      	bls.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e086      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x238>
 800419e:	2302      	movs	r3, #2
 80041a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	fa93 f3a3 	rbit	r3, r3
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
 80041aa:	2302      	movs	r3, #2
 80041ac:	623b      	str	r3, [r7, #32]
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	fa93 f3a3 	rbit	r3, r3
 80041b4:	61fb      	str	r3, [r7, #28]
  return result;
 80041b6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f043 0302 	orr.w	r3, r3, #2
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d102      	bne.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80041cc:	4b39      	ldr	r3, [pc, #228]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	e007      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80041d2:	2302      	movs	r3, #2
 80041d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	fa93 f3a3 	rbit	r3, r3
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	2202      	movs	r2, #2
 80041e4:	613a      	str	r2, [r7, #16]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	fa92 f2a2 	rbit	r2, r2
 80041ec:	60fa      	str	r2, [r7, #12]
  return result;
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	fab2 f282 	clz	r2, r2
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	f002 021f 	and.w	r2, r2, #31
 8004200:	2101      	movs	r1, #1
 8004202:	fa01 f202 	lsl.w	r2, r1, r2
 8004206:	4013      	ands	r3, r2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0bd      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800420c:	4b29      	ldr	r3, [pc, #164]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4926      	ldr	r1, [pc, #152]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800421a:	4313      	orrs	r3, r2
 800421c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800421e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	4a22      	ldr	r2, [pc, #136]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800422c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004230:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d008      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800423e:	4b1d      	ldr	r3, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	f023 0203 	bic.w	r2, r3, #3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	491a      	ldr	r1, [pc, #104]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800424c:	4313      	orrs	r3, r2
 800424e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800425c:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	f023 0210 	bic.w	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	4912      	ldr	r1, [pc, #72]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800426a:	4313      	orrs	r3, r2
 800426c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004276:	2b00      	cmp	r3, #0
 8004278:	d008      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800427a:	4b0e      	ldr	r3, [pc, #56]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	490b      	ldr	r1, [pc, #44]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004288:	4313      	orrs	r3, r2
 800428a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d008      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	4903      	ldr	r1, [pc, #12]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3748      	adds	r7, #72	; 0x48
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40007000 	.word	0x40007000
 80042bc:	10908100 	.word	0x10908100

080042c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d101      	bne.n	80042d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e049      	b.n	8004366 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc ff7c 	bl	80011e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3304      	adds	r3, #4
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f000 fbbe 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
	...

08004370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004370:	b480      	push	{r7}
 8004372:	b085      	sub	sp, #20
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d001      	beq.n	8004388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e040      	b.n	800440a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <HAL_TIM_Base_Start_IT+0xa8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x58>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b2:	d009      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x58>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_TIM_Base_Start_IT+0xac>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_TIM_Base_Start_IT+0x58>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_TIM_Base_Start_IT+0xb0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d115      	bne.n	80043f4 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	4b15      	ldr	r3, [pc, #84]	; (8004424 <HAL_TIM_Base_Start_IT+0xb4>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2b06      	cmp	r3, #6
 80043d8:	d015      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x96>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d011      	beq.n	8004406 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0201 	orr.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043f2:	e008      	b.n	8004406 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e000      	b.n	8004408 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004406:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40014000 	.word	0x40014000
 8004424:	00010007 	.word	0x00010007

08004428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e049      	b.n	80044ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f841 	bl	80044d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4619      	mov	r1, r3
 8004466:	4610      	mov	r0, r2
 8004468:	f000 fb0a 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d109      	bne.n	8004510 <HAL_TIM_PWM_Start+0x24>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	e03c      	b.n	800458a <HAL_TIM_PWM_Start+0x9e>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	2b04      	cmp	r3, #4
 8004514:	d109      	bne.n	800452a <HAL_TIM_PWM_Start+0x3e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b01      	cmp	r3, #1
 8004520:	bf14      	ite	ne
 8004522:	2301      	movne	r3, #1
 8004524:	2300      	moveq	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	e02f      	b.n	800458a <HAL_TIM_PWM_Start+0x9e>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d109      	bne.n	8004544 <HAL_TIM_PWM_Start+0x58>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	bf14      	ite	ne
 800453c:	2301      	movne	r3, #1
 800453e:	2300      	moveq	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	e022      	b.n	800458a <HAL_TIM_PWM_Start+0x9e>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d109      	bne.n	800455e <HAL_TIM_PWM_Start+0x72>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b01      	cmp	r3, #1
 8004554:	bf14      	ite	ne
 8004556:	2301      	movne	r3, #1
 8004558:	2300      	moveq	r3, #0
 800455a:	b2db      	uxtb	r3, r3
 800455c:	e015      	b.n	800458a <HAL_TIM_PWM_Start+0x9e>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b10      	cmp	r3, #16
 8004562:	d109      	bne.n	8004578 <HAL_TIM_PWM_Start+0x8c>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	bf14      	ite	ne
 8004570:	2301      	movne	r3, #1
 8004572:	2300      	moveq	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e008      	b.n	800458a <HAL_TIM_PWM_Start+0x9e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b01      	cmp	r3, #1
 8004582:	bf14      	ite	ne
 8004584:	2301      	movne	r3, #1
 8004586:	2300      	moveq	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e088      	b.n	80046a4 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <HAL_TIM_PWM_Start+0xb6>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045a0:	e023      	b.n	80045ea <HAL_TIM_PWM_Start+0xfe>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d104      	bne.n	80045b2 <HAL_TIM_PWM_Start+0xc6>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b0:	e01b      	b.n	80045ea <HAL_TIM_PWM_Start+0xfe>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d104      	bne.n	80045c2 <HAL_TIM_PWM_Start+0xd6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c0:	e013      	b.n	80045ea <HAL_TIM_PWM_Start+0xfe>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b0c      	cmp	r3, #12
 80045c6:	d104      	bne.n	80045d2 <HAL_TIM_PWM_Start+0xe6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045d0:	e00b      	b.n	80045ea <HAL_TIM_PWM_Start+0xfe>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d104      	bne.n	80045e2 <HAL_TIM_PWM_Start+0xf6>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e0:	e003      	b.n	80045ea <HAL_TIM_PWM_Start+0xfe>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2201      	movs	r2, #1
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fdfc 	bl	80051f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2b      	ldr	r2, [pc, #172]	; (80046ac <HAL_TIM_PWM_Start+0x1c0>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d00e      	beq.n	8004620 <HAL_TIM_PWM_Start+0x134>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <HAL_TIM_PWM_Start+0x1c4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d009      	beq.n	8004620 <HAL_TIM_PWM_Start+0x134>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a28      	ldr	r2, [pc, #160]	; (80046b4 <HAL_TIM_PWM_Start+0x1c8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d004      	beq.n	8004620 <HAL_TIM_PWM_Start+0x134>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a27      	ldr	r2, [pc, #156]	; (80046b8 <HAL_TIM_PWM_Start+0x1cc>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d101      	bne.n	8004624 <HAL_TIM_PWM_Start+0x138>
 8004620:	2301      	movs	r3, #1
 8004622:	e000      	b.n	8004626 <HAL_TIM_PWM_Start+0x13a>
 8004624:	2300      	movs	r3, #0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d007      	beq.n	800463a <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004638:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1b      	ldr	r2, [pc, #108]	; (80046ac <HAL_TIM_PWM_Start+0x1c0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00e      	beq.n	8004662 <HAL_TIM_PWM_Start+0x176>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464c:	d009      	beq.n	8004662 <HAL_TIM_PWM_Start+0x176>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1a      	ldr	r2, [pc, #104]	; (80046bc <HAL_TIM_PWM_Start+0x1d0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d004      	beq.n	8004662 <HAL_TIM_PWM_Start+0x176>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <HAL_TIM_PWM_Start+0x1c4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d115      	bne.n	800468e <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_TIM_PWM_Start+0x1d4>)
 800466a:	4013      	ands	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b06      	cmp	r3, #6
 8004672:	d015      	beq.n	80046a0 <HAL_TIM_PWM_Start+0x1b4>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467a:	d011      	beq.n	80046a0 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800468c:	e008      	b.n	80046a0 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681a      	ldr	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f042 0201 	orr.w	r2, r2, #1
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e000      	b.n	80046a2 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40014000 	.word	0x40014000
 80046b4:	40014400 	.word	0x40014400
 80046b8:	40014800 	.word	0x40014800
 80046bc:	40000400 	.word	0x40000400
 80046c0:	00010007 	.word	0x00010007

080046c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046de:	2302      	movs	r3, #2
 80046e0:	e0ff      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b14      	cmp	r3, #20
 80046ee:	f200 80f0 	bhi.w	80048d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	080048d3 	.word	0x080048d3
 8004700:	080048d3 	.word	0x080048d3
 8004704:	080048d3 	.word	0x080048d3
 8004708:	0800478d 	.word	0x0800478d
 800470c:	080048d3 	.word	0x080048d3
 8004710:	080048d3 	.word	0x080048d3
 8004714:	080048d3 	.word	0x080048d3
 8004718:	080047cf 	.word	0x080047cf
 800471c:	080048d3 	.word	0x080048d3
 8004720:	080048d3 	.word	0x080048d3
 8004724:	080048d3 	.word	0x080048d3
 8004728:	0800480f 	.word	0x0800480f
 800472c:	080048d3 	.word	0x080048d3
 8004730:	080048d3 	.word	0x080048d3
 8004734:	080048d3 	.word	0x080048d3
 8004738:	08004851 	.word	0x08004851
 800473c:	080048d3 	.word	0x080048d3
 8004740:	080048d3 	.word	0x080048d3
 8004744:	080048d3 	.word	0x080048d3
 8004748:	08004891 	.word	0x08004891
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fa0c 	bl	8004b70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0208 	orr.w	r2, r2, #8
 8004766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0204 	bic.w	r2, r2, #4
 8004776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	619a      	str	r2, [r3, #24]
      break;
 800478a:	e0a5      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fa72 	bl	8004c7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6999      	ldr	r1, [r3, #24]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	021a      	lsls	r2, r3, #8
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	619a      	str	r2, [r3, #24]
      break;
 80047cc:	e084      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fad1 	bl	8004d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0208 	orr.w	r2, r2, #8
 80047e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0204 	bic.w	r2, r2, #4
 80047f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69d9      	ldr	r1, [r3, #28]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	61da      	str	r2, [r3, #28]
      break;
 800480c:	e064      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fb2f 	bl	8004e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69d9      	ldr	r1, [r3, #28]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	021a      	lsls	r2, r3, #8
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	61da      	str	r2, [r3, #28]
      break;
 800484e:	e043      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fb72 	bl	8004f40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0208 	orr.w	r2, r2, #8
 800486a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	691a      	ldr	r2, [r3, #16]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800488e:	e023      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68b9      	ldr	r1, [r7, #8]
 8004896:	4618      	mov	r0, r3
 8004898:	f000 fbb0 	bl	8004ffc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048d0:	e002      	b.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
      break;
 80048d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop

080048ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004900:	2b01      	cmp	r3, #1
 8004902:	d101      	bne.n	8004908 <HAL_TIM_ConfigClockSource+0x1c>
 8004904:	2302      	movs	r3, #2
 8004906:	e0b6      	b.n	8004a76 <HAL_TIM_ConfigClockSource+0x18a>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004932:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004944:	d03e      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0xd8>
 8004946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494a:	f200 8087 	bhi.w	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 800494e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004952:	f000 8086 	beq.w	8004a62 <HAL_TIM_ConfigClockSource+0x176>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495a:	d87f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 800495c:	2b70      	cmp	r3, #112	; 0x70
 800495e:	d01a      	beq.n	8004996 <HAL_TIM_ConfigClockSource+0xaa>
 8004960:	2b70      	cmp	r3, #112	; 0x70
 8004962:	d87b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 8004964:	2b60      	cmp	r3, #96	; 0x60
 8004966:	d050      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x11e>
 8004968:	2b60      	cmp	r3, #96	; 0x60
 800496a:	d877      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 800496c:	2b50      	cmp	r3, #80	; 0x50
 800496e:	d03c      	beq.n	80049ea <HAL_TIM_ConfigClockSource+0xfe>
 8004970:	2b50      	cmp	r3, #80	; 0x50
 8004972:	d873      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	d058      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x13e>
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d86f      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 800497c:	2b30      	cmp	r3, #48	; 0x30
 800497e:	d064      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15e>
 8004980:	2b30      	cmp	r3, #48	; 0x30
 8004982:	d86b      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d060      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15e>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d867      	bhi.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d05c      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15e>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d05a      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x15e>
 8004994:	e062      	b.n	8004a5c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f000 fc03 	bl	80051b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	609a      	str	r2, [r3, #8]
      break;
 80049c2:	e04f      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f000 fbec 	bl	80051b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049e6:	609a      	str	r2, [r3, #8]
      break;
 80049e8:	e03c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6859      	ldr	r1, [r3, #4]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f000 fb60 	bl	80050bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2150      	movs	r1, #80	; 0x50
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 fbb9 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004a08:	e02c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	461a      	mov	r2, r3
 8004a18:	f000 fb7f 	bl	800511a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2160      	movs	r1, #96	; 0x60
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fba9 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004a28:	e01c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f000 fb40 	bl	80050bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2140      	movs	r1, #64	; 0x40
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 fb99 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004a48:	e00c      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f000 fb90 	bl	800517a <TIM_ITRx_SetConfig>
      break;
 8004a5a:	e003      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e000      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004a62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <TIM_Base_SetConfig+0xdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d007      	beq.n	8004aa8 <TIM_Base_SetConfig+0x28>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9e:	d003      	beq.n	8004aa8 <TIM_Base_SetConfig+0x28>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a2f      	ldr	r2, [pc, #188]	; (8004b60 <TIM_Base_SetConfig+0xe0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d108      	bne.n	8004aba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <TIM_Base_SetConfig+0xdc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <TIM_Base_SetConfig+0x6a>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d00f      	beq.n	8004aea <TIM_Base_SetConfig+0x6a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <TIM_Base_SetConfig+0xe0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <TIM_Base_SetConfig+0x6a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a23      	ldr	r2, [pc, #140]	; (8004b64 <TIM_Base_SetConfig+0xe4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <TIM_Base_SetConfig+0x6a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <TIM_Base_SetConfig+0xe8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_Base_SetConfig+0x6a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a21      	ldr	r2, [pc, #132]	; (8004b6c <TIM_Base_SetConfig+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d108      	bne.n	8004afc <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <TIM_Base_SetConfig+0xdc>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00b      	beq.n	8004b40 <TIM_Base_SetConfig+0xc0>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a0e      	ldr	r2, [pc, #56]	; (8004b64 <TIM_Base_SetConfig+0xe4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <TIM_Base_SetConfig+0xc0>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <TIM_Base_SetConfig+0xe8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_Base_SetConfig+0xc0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <TIM_Base_SetConfig+0xec>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	615a      	str	r2, [r3, #20]
}
 8004b4e:	bf00      	nop
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40012c00 	.word	0x40012c00
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	40014400 	.word	0x40014400
 8004b6c:	40014800 	.word	0x40014800

08004b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0303 	bic.w	r3, r3, #3
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f023 0302 	bic.w	r3, r3, #2
 8004bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a28      	ldr	r2, [pc, #160]	; (8004c6c <TIM_OC1_SetConfig+0xfc>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00b      	beq.n	8004be8 <TIM_OC1_SetConfig+0x78>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <TIM_OC1_SetConfig+0x100>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d007      	beq.n	8004be8 <TIM_OC1_SetConfig+0x78>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a26      	ldr	r2, [pc, #152]	; (8004c74 <TIM_OC1_SetConfig+0x104>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <TIM_OC1_SetConfig+0x78>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a25      	ldr	r2, [pc, #148]	; (8004c78 <TIM_OC1_SetConfig+0x108>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d10c      	bne.n	8004c02 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f023 0308 	bic.w	r3, r3, #8
 8004bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a19      	ldr	r2, [pc, #100]	; (8004c6c <TIM_OC1_SetConfig+0xfc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00b      	beq.n	8004c22 <TIM_OC1_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a18      	ldr	r2, [pc, #96]	; (8004c70 <TIM_OC1_SetConfig+0x100>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d007      	beq.n	8004c22 <TIM_OC1_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <TIM_OC1_SetConfig+0x104>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d003      	beq.n	8004c22 <TIM_OC1_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <TIM_OC1_SetConfig+0x108>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d111      	bne.n	8004c46 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	621a      	str	r2, [r3, #32]
}
 8004c60:	bf00      	nop
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	40012c00 	.word	0x40012c00
 8004c70:	40014000 	.word	0x40014000
 8004c74:	40014400 	.word	0x40014400
 8004c78:	40014800 	.word	0x40014800

08004c7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f023 0210 	bic.w	r2, r3, #16
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	021b      	lsls	r3, r3, #8
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f023 0320 	bic.w	r3, r3, #32
 8004cca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a24      	ldr	r2, [pc, #144]	; (8004d6c <TIM_OC2_SetConfig+0xf0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d10d      	bne.n	8004cfc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ce6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a1b      	ldr	r2, [pc, #108]	; (8004d6c <TIM_OC2_SetConfig+0xf0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d00b      	beq.n	8004d1c <TIM_OC2_SetConfig+0xa0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <TIM_OC2_SetConfig+0xf4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d007      	beq.n	8004d1c <TIM_OC2_SetConfig+0xa0>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a19      	ldr	r2, [pc, #100]	; (8004d74 <TIM_OC2_SetConfig+0xf8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC2_SetConfig+0xa0>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a18      	ldr	r2, [pc, #96]	; (8004d78 <TIM_OC2_SetConfig+0xfc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d113      	bne.n	8004d44 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	621a      	str	r2, [r3, #32]
}
 8004d5e:	bf00      	nop
 8004d60:	371c      	adds	r7, #28
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40014400 	.word	0x40014400
 8004d78:	40014800 	.word	0x40014800

08004d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0303 	bic.w	r3, r3, #3
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a23      	ldr	r2, [pc, #140]	; (8004e68 <TIM_OC3_SetConfig+0xec>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d10d      	bne.n	8004dfa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004df8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a1a      	ldr	r2, [pc, #104]	; (8004e68 <TIM_OC3_SetConfig+0xec>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00b      	beq.n	8004e1a <TIM_OC3_SetConfig+0x9e>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a19      	ldr	r2, [pc, #100]	; (8004e6c <TIM_OC3_SetConfig+0xf0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d007      	beq.n	8004e1a <TIM_OC3_SetConfig+0x9e>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a18      	ldr	r2, [pc, #96]	; (8004e70 <TIM_OC3_SetConfig+0xf4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d003      	beq.n	8004e1a <TIM_OC3_SetConfig+0x9e>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <TIM_OC3_SetConfig+0xf8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d113      	bne.n	8004e42 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	011b      	lsls	r3, r3, #4
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	621a      	str	r2, [r3, #32]
}
 8004e5c:	bf00      	nop
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	40012c00 	.word	0x40012c00
 8004e6c:	40014000 	.word	0x40014000
 8004e70:	40014400 	.word	0x40014400
 8004e74:	40014800 	.word	0x40014800

08004e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <TIM_OC4_SetConfig+0xb8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <TIM_OC4_SetConfig+0x7c>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4a15      	ldr	r2, [pc, #84]	; (8004f34 <TIM_OC4_SetConfig+0xbc>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d007      	beq.n	8004ef4 <TIM_OC4_SetConfig+0x7c>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a14      	ldr	r2, [pc, #80]	; (8004f38 <TIM_OC4_SetConfig+0xc0>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_OC4_SetConfig+0x7c>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <TIM_OC4_SetConfig+0xc4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d109      	bne.n	8004f08 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004efa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	019b      	lsls	r3, r3, #6
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685a      	ldr	r2, [r3, #4]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40012c00 	.word	0x40012c00
 8004f34:	40014000 	.word	0x40014000
 8004f38:	40014400 	.word	0x40014400
 8004f3c:	40014800 	.word	0x40014800

08004f40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a15      	ldr	r2, [pc, #84]	; (8004fec <TIM_OC5_SetConfig+0xac>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x72>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <TIM_OC5_SetConfig+0xb0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x72>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <TIM_OC5_SetConfig+0xb4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_OC5_SetConfig+0x72>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a12      	ldr	r2, [pc, #72]	; (8004ff8 <TIM_OC5_SetConfig+0xb8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d109      	bne.n	8004fc6 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	621a      	str	r2, [r3, #32]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40014400 	.word	0x40014400
 8004ff8:	40014800 	.word	0x40014800

08004ffc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800502a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800502e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	051b      	lsls	r3, r3, #20
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <TIM_OC6_SetConfig+0xb0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00b      	beq.n	8005070 <TIM_OC6_SetConfig+0x74>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <TIM_OC6_SetConfig+0xb4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d007      	beq.n	8005070 <TIM_OC6_SetConfig+0x74>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <TIM_OC6_SetConfig+0xb8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d003      	beq.n	8005070 <TIM_OC6_SetConfig+0x74>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <TIM_OC6_SetConfig+0xbc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d109      	bne.n	8005084 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	029b      	lsls	r3, r3, #10
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	4313      	orrs	r3, r2
 8005082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40012c00 	.word	0x40012c00
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800

080050bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 030a 	bic.w	r3, r3, #10
 80050f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4313      	orrs	r3, r2
 8005100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	371c      	adds	r7, #28
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800511a:	b480      	push	{r7}
 800511c:	b087      	sub	sp, #28
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	f023 0210 	bic.w	r2, r3, #16
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005144:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	031b      	lsls	r3, r3, #12
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005156:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	621a      	str	r2, [r3, #32]
}
 800516e:	bf00      	nop
 8005170:	371c      	adds	r7, #28
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800517a:	b480      	push	{r7}
 800517c:	b085      	sub	sp, #20
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4313      	orrs	r3, r2
 8005198:	f043 0307 	orr.w	r3, r3, #7
 800519c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	609a      	str	r2, [r3, #8]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b087      	sub	sp, #28
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
 80051bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	021a      	lsls	r2, r3, #8
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	4313      	orrs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	609a      	str	r2, [r3, #8]
}
 80051e4:	bf00      	nop
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 031f 	and.w	r3, r3, #31
 8005202:	2201      	movs	r2, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a1a      	ldr	r2, [r3, #32]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	43db      	mvns	r3, r3
 8005212:	401a      	ands	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1a      	ldr	r2, [r3, #32]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	fa01 f303 	lsl.w	r3, r1, r3
 8005228:	431a      	orrs	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
}
 800522e:	bf00      	nop
 8005230:	371c      	adds	r7, #28
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005250:	2302      	movs	r3, #2
 8005252:	e054      	b.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a24      	ldr	r2, [pc, #144]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d108      	bne.n	8005290 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005284:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	4313      	orrs	r3, r2
 800528e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052bc:	d009      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a13      	ldr	r2, [pc, #76]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a11      	ldr	r2, [pc, #68]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10c      	bne.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	68ba      	ldr	r2, [r7, #8]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40000400 	.word	0x40000400
 8005314:	40014000 	.word	0x40014000

08005318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e040      	b.n	80053ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fb ffb8 	bl	80012b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2224      	movs	r2, #36	; 0x24
 8005344:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f82c 	bl	80053b4 <UART_SetConfig>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e022      	b.n	80053ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f956 	bl	8005620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f9dd 	bl	8005764 <UART_CheckIdleState>
 80053aa:	4603      	mov	r3, r0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b8a      	ldr	r3, [pc, #552]	; (8005608 <UART_SetConfig+0x254>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6812      	ldr	r2, [r2, #0]
 80053e6:	6979      	ldr	r1, [r7, #20]
 80053e8:	430b      	orrs	r3, r1
 80053ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	430a      	orrs	r2, r1
 8005424:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a78      	ldr	r2, [pc, #480]	; (800560c <UART_SetConfig+0x258>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d120      	bne.n	8005472 <UART_SetConfig+0xbe>
 8005430:	4b77      	ldr	r3, [pc, #476]	; (8005610 <UART_SetConfig+0x25c>)
 8005432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005434:	f003 0303 	and.w	r3, r3, #3
 8005438:	2b03      	cmp	r3, #3
 800543a:	d817      	bhi.n	800546c <UART_SetConfig+0xb8>
 800543c:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <UART_SetConfig+0x90>)
 800543e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005442:	bf00      	nop
 8005444:	08005455 	.word	0x08005455
 8005448:	08005461 	.word	0x08005461
 800544c:	08005467 	.word	0x08005467
 8005450:	0800545b 	.word	0x0800545b
 8005454:	2300      	movs	r3, #0
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e01d      	b.n	8005496 <UART_SetConfig+0xe2>
 800545a:	2302      	movs	r3, #2
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e01a      	b.n	8005496 <UART_SetConfig+0xe2>
 8005460:	2304      	movs	r3, #4
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e017      	b.n	8005496 <UART_SetConfig+0xe2>
 8005466:	2308      	movs	r3, #8
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e014      	b.n	8005496 <UART_SetConfig+0xe2>
 800546c:	2310      	movs	r3, #16
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e011      	b.n	8005496 <UART_SetConfig+0xe2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a67      	ldr	r2, [pc, #412]	; (8005614 <UART_SetConfig+0x260>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d102      	bne.n	8005482 <UART_SetConfig+0xce>
 800547c:	2300      	movs	r3, #0
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e009      	b.n	8005496 <UART_SetConfig+0xe2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a64      	ldr	r2, [pc, #400]	; (8005618 <UART_SetConfig+0x264>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d102      	bne.n	8005492 <UART_SetConfig+0xde>
 800548c:	2300      	movs	r3, #0
 800548e:	77fb      	strb	r3, [r7, #31]
 8005490:	e001      	b.n	8005496 <UART_SetConfig+0xe2>
 8005492:	2310      	movs	r3, #16
 8005494:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549e:	d15a      	bne.n	8005556 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80054a0:	7ffb      	ldrb	r3, [r7, #31]
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d827      	bhi.n	80054f6 <UART_SetConfig+0x142>
 80054a6:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <UART_SetConfig+0xf8>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	080054f7 	.word	0x080054f7
 80054bc:	080054e7 	.word	0x080054e7
 80054c0:	080054f7 	.word	0x080054f7
 80054c4:	080054f7 	.word	0x080054f7
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	080054ef 	.word	0x080054ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054d0:	f7fe fd8c 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 80054d4:	61b8      	str	r0, [r7, #24]
        break;
 80054d6:	e013      	b.n	8005500 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d8:	f7fe fdaa 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 80054dc:	61b8      	str	r0, [r7, #24]
        break;
 80054de:	e00f      	b.n	8005500 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e0:	4b4e      	ldr	r3, [pc, #312]	; (800561c <UART_SetConfig+0x268>)
 80054e2:	61bb      	str	r3, [r7, #24]
        break;
 80054e4:	e00c      	b.n	8005500 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054e6:	f7fe fd0b 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 80054ea:	61b8      	str	r0, [r7, #24]
        break;
 80054ec:	e008      	b.n	8005500 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054f2:	61bb      	str	r3, [r7, #24]
        break;
 80054f4:	e004      	b.n	8005500 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	77bb      	strb	r3, [r7, #30]
        break;
 80054fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d074      	beq.n	80055f0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	085b      	lsrs	r3, r3, #1
 8005510:	441a      	add	r2, r3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b0f      	cmp	r3, #15
 8005520:	d916      	bls.n	8005550 <UART_SetConfig+0x19c>
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005528:	d212      	bcs.n	8005550 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f023 030f 	bic.w	r3, r3, #15
 8005532:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b29b      	uxth	r3, r3
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	b29a      	uxth	r2, r3
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	4313      	orrs	r3, r2
 8005544:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	89fa      	ldrh	r2, [r7, #14]
 800554c:	60da      	str	r2, [r3, #12]
 800554e:	e04f      	b.n	80055f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	77bb      	strb	r3, [r7, #30]
 8005554:	e04c      	b.n	80055f0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005556:	7ffb      	ldrb	r3, [r7, #31]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d828      	bhi.n	80055ae <UART_SetConfig+0x1fa>
 800555c:	a201      	add	r2, pc, #4	; (adr r2, 8005564 <UART_SetConfig+0x1b0>)
 800555e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005562:	bf00      	nop
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	080055af 	.word	0x080055af
 8005574:	0800559f 	.word	0x0800559f
 8005578:	080055af 	.word	0x080055af
 800557c:	080055af 	.word	0x080055af
 8005580:	080055af 	.word	0x080055af
 8005584:	080055a7 	.word	0x080055a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005588:	f7fe fd30 	bl	8003fec <HAL_RCC_GetPCLK1Freq>
 800558c:	61b8      	str	r0, [r7, #24]
        break;
 800558e:	e013      	b.n	80055b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe fd4e 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 8005594:	61b8      	str	r0, [r7, #24]
        break;
 8005596:	e00f      	b.n	80055b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005598:	4b20      	ldr	r3, [pc, #128]	; (800561c <UART_SetConfig+0x268>)
 800559a:	61bb      	str	r3, [r7, #24]
        break;
 800559c:	e00c      	b.n	80055b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559e:	f7fe fcaf 	bl	8003f00 <HAL_RCC_GetSysClockFreq>
 80055a2:	61b8      	str	r0, [r7, #24]
        break;
 80055a4:	e008      	b.n	80055b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055aa:	61bb      	str	r3, [r7, #24]
        break;
 80055ac:	e004      	b.n	80055b8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77bb      	strb	r3, [r7, #30]
        break;
 80055b6:	bf00      	nop
    }

    if (pclk != 0U)
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d018      	beq.n	80055f0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	085a      	lsrs	r2, r3, #1
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	441a      	add	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b0f      	cmp	r3, #15
 80055d6:	d909      	bls.n	80055ec <UART_SetConfig+0x238>
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055de:	d205      	bcs.n	80055ec <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e001      	b.n	80055f0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80055fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	efff69f3 	.word	0xefff69f3
 800560c:	40013800 	.word	0x40013800
 8005610:	40021000 	.word	0x40021000
 8005614:	40004400 	.word	0x40004400
 8005618:	40004800 	.word	0x40004800
 800561c:	007a1200 	.word	0x007a1200

08005620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00a      	beq.n	800564a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00a      	beq.n	800566c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00a      	beq.n	800568e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01a      	beq.n	8005736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800571e:	d10a      	bne.n	8005736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  }
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b098      	sub	sp, #96	; 0x60
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005774:	f7fb ff70 	bl	8001658 <HAL_GetTick>
 8005778:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b08      	cmp	r3, #8
 8005786:	d12e      	bne.n	80057e6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005790:	2200      	movs	r2, #0
 8005792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 f88c 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d021      	beq.n	80057e6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057b6:	653b      	str	r3, [r7, #80]	; 0x50
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	461a      	mov	r2, r3
 80057be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c0:	647b      	str	r3, [r7, #68]	; 0x44
 80057c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057c8:	e841 2300 	strex	r3, r2, [r1]
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1e6      	bne.n	80057a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e062      	b.n	80058ac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d149      	bne.n	8005888 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fc:	2200      	movs	r2, #0
 80057fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f856 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d03c      	beq.n	8005888 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	623b      	str	r3, [r7, #32]
   return(result);
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582c:	633b      	str	r3, [r7, #48]	; 0x30
 800582e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e6      	bne.n	800580e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3308      	adds	r3, #8
 8005846:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	64bb      	str	r3, [r7, #72]	; 0x48
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3308      	adds	r3, #8
 800585e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005860:	61fa      	str	r2, [r7, #28]
 8005862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	69b9      	ldr	r1, [r7, #24]
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	617b      	str	r3, [r7, #20]
   return(result);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e011      	b.n	80058ac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2220      	movs	r2, #32
 8005892:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3758      	adds	r7, #88	; 0x58
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	e049      	b.n	800595a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d045      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fb fec3 	bl	8001658 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e048      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d031      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d110      	bne.n	8005926 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2208      	movs	r2, #8
 800590a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f838 	bl	8005982 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2208      	movs	r2, #8
 8005916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e029      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005934:	d111      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800593e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f81e 	bl	8005982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e00f      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	429a      	cmp	r2, r3
 8005976:	d0a6      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005982:	b480      	push	{r7}
 8005984:	b095      	sub	sp, #84	; 0x54
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800599e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a8:	643b      	str	r3, [r7, #64]	; 0x40
 80059aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d118      	bne.n	8005a2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f023 0310 	bic.w	r3, r3, #16
 8005a0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6979      	ldr	r1, [r7, #20]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	613b      	str	r3, [r7, #16]
   return(result);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a3e:	bf00      	nop
 8005a40:	3754      	adds	r7, #84	; 0x54
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <__errno>:
 8005a4c:	4b01      	ldr	r3, [pc, #4]	; (8005a54 <__errno+0x8>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4d0d      	ldr	r5, [pc, #52]	; (8005a90 <__libc_init_array+0x38>)
 8005a5c:	4c0d      	ldr	r4, [pc, #52]	; (8005a94 <__libc_init_array+0x3c>)
 8005a5e:	1b64      	subs	r4, r4, r5
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	2600      	movs	r6, #0
 8005a64:	42a6      	cmp	r6, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	4d0b      	ldr	r5, [pc, #44]	; (8005a98 <__libc_init_array+0x40>)
 8005a6a:	4c0c      	ldr	r4, [pc, #48]	; (8005a9c <__libc_init_array+0x44>)
 8005a6c:	f002 fcf2 	bl	8008454 <_init>
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	2600      	movs	r6, #0
 8005a76:	42a6      	cmp	r6, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a80:	4798      	blx	r3
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8a:	4798      	blx	r3
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	0800888c 	.word	0x0800888c
 8005a94:	0800888c 	.word	0x0800888c
 8005a98:	0800888c 	.word	0x0800888c
 8005a9c:	08008890 	.word	0x08008890

08005aa0 <memset>:
 8005aa0:	4402      	add	r2, r0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <memset+0xa>
 8005aa8:	4770      	bx	lr
 8005aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8005aae:	e7f9      	b.n	8005aa4 <memset+0x4>

08005ab0 <__cvt>:
 8005ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab4:	ec55 4b10 	vmov	r4, r5, d0
 8005ab8:	2d00      	cmp	r5, #0
 8005aba:	460e      	mov	r6, r1
 8005abc:	4619      	mov	r1, r3
 8005abe:	462b      	mov	r3, r5
 8005ac0:	bfbb      	ittet	lt
 8005ac2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ac6:	461d      	movlt	r5, r3
 8005ac8:	2300      	movge	r3, #0
 8005aca:	232d      	movlt	r3, #45	; 0x2d
 8005acc:	700b      	strb	r3, [r1, #0]
 8005ace:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ad4:	4691      	mov	r9, r2
 8005ad6:	f023 0820 	bic.w	r8, r3, #32
 8005ada:	bfbc      	itt	lt
 8005adc:	4622      	movlt	r2, r4
 8005ade:	4614      	movlt	r4, r2
 8005ae0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ae4:	d005      	beq.n	8005af2 <__cvt+0x42>
 8005ae6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005aea:	d100      	bne.n	8005aee <__cvt+0x3e>
 8005aec:	3601      	adds	r6, #1
 8005aee:	2102      	movs	r1, #2
 8005af0:	e000      	b.n	8005af4 <__cvt+0x44>
 8005af2:	2103      	movs	r1, #3
 8005af4:	ab03      	add	r3, sp, #12
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	ab02      	add	r3, sp, #8
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	ec45 4b10 	vmov	d0, r4, r5
 8005b00:	4653      	mov	r3, sl
 8005b02:	4632      	mov	r2, r6
 8005b04:	f000 fccc 	bl	80064a0 <_dtoa_r>
 8005b08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	d102      	bne.n	8005b16 <__cvt+0x66>
 8005b10:	f019 0f01 	tst.w	r9, #1
 8005b14:	d022      	beq.n	8005b5c <__cvt+0xac>
 8005b16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b1a:	eb07 0906 	add.w	r9, r7, r6
 8005b1e:	d110      	bne.n	8005b42 <__cvt+0x92>
 8005b20:	783b      	ldrb	r3, [r7, #0]
 8005b22:	2b30      	cmp	r3, #48	; 0x30
 8005b24:	d10a      	bne.n	8005b3c <__cvt+0x8c>
 8005b26:	2200      	movs	r2, #0
 8005b28:	2300      	movs	r3, #0
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	4629      	mov	r1, r5
 8005b2e:	f7fa ffcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b32:	b918      	cbnz	r0, 8005b3c <__cvt+0x8c>
 8005b34:	f1c6 0601 	rsb	r6, r6, #1
 8005b38:	f8ca 6000 	str.w	r6, [sl]
 8005b3c:	f8da 3000 	ldr.w	r3, [sl]
 8005b40:	4499      	add	r9, r3
 8005b42:	2200      	movs	r2, #0
 8005b44:	2300      	movs	r3, #0
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b4e:	b108      	cbz	r0, 8005b54 <__cvt+0xa4>
 8005b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b54:	2230      	movs	r2, #48	; 0x30
 8005b56:	9b03      	ldr	r3, [sp, #12]
 8005b58:	454b      	cmp	r3, r9
 8005b5a:	d307      	bcc.n	8005b6c <__cvt+0xbc>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b60:	1bdb      	subs	r3, r3, r7
 8005b62:	4638      	mov	r0, r7
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	b004      	add	sp, #16
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	e7f0      	b.n	8005b56 <__cvt+0xa6>

08005b74 <__exponent>:
 8005b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b76:	4603      	mov	r3, r0
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	bfb8      	it	lt
 8005b7c:	4249      	neglt	r1, r1
 8005b7e:	f803 2b02 	strb.w	r2, [r3], #2
 8005b82:	bfb4      	ite	lt
 8005b84:	222d      	movlt	r2, #45	; 0x2d
 8005b86:	222b      	movge	r2, #43	; 0x2b
 8005b88:	2909      	cmp	r1, #9
 8005b8a:	7042      	strb	r2, [r0, #1]
 8005b8c:	dd2a      	ble.n	8005be4 <__exponent+0x70>
 8005b8e:	f10d 0407 	add.w	r4, sp, #7
 8005b92:	46a4      	mov	ip, r4
 8005b94:	270a      	movs	r7, #10
 8005b96:	46a6      	mov	lr, r4
 8005b98:	460a      	mov	r2, r1
 8005b9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b9e:	fb07 1516 	mls	r5, r7, r6, r1
 8005ba2:	3530      	adds	r5, #48	; 0x30
 8005ba4:	2a63      	cmp	r2, #99	; 0x63
 8005ba6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005baa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bae:	4631      	mov	r1, r6
 8005bb0:	dcf1      	bgt.n	8005b96 <__exponent+0x22>
 8005bb2:	3130      	adds	r1, #48	; 0x30
 8005bb4:	f1ae 0502 	sub.w	r5, lr, #2
 8005bb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bbc:	1c44      	adds	r4, r0, #1
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4561      	cmp	r1, ip
 8005bc2:	d30a      	bcc.n	8005bda <__exponent+0x66>
 8005bc4:	f10d 0209 	add.w	r2, sp, #9
 8005bc8:	eba2 020e 	sub.w	r2, r2, lr
 8005bcc:	4565      	cmp	r5, ip
 8005bce:	bf88      	it	hi
 8005bd0:	2200      	movhi	r2, #0
 8005bd2:	4413      	add	r3, r2
 8005bd4:	1a18      	subs	r0, r3, r0
 8005bd6:	b003      	add	sp, #12
 8005bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005be2:	e7ed      	b.n	8005bc0 <__exponent+0x4c>
 8005be4:	2330      	movs	r3, #48	; 0x30
 8005be6:	3130      	adds	r1, #48	; 0x30
 8005be8:	7083      	strb	r3, [r0, #2]
 8005bea:	70c1      	strb	r1, [r0, #3]
 8005bec:	1d03      	adds	r3, r0, #4
 8005bee:	e7f1      	b.n	8005bd4 <__exponent+0x60>

08005bf0 <_printf_float>:
 8005bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	ed2d 8b02 	vpush	{d8}
 8005bf8:	b08d      	sub	sp, #52	; 0x34
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c00:	4616      	mov	r6, r2
 8005c02:	461f      	mov	r7, r3
 8005c04:	4605      	mov	r5, r0
 8005c06:	f001 fa37 	bl	8007078 <_localeconv_r>
 8005c0a:	f8d0 a000 	ldr.w	sl, [r0]
 8005c0e:	4650      	mov	r0, sl
 8005c10:	f7fa fade 	bl	80001d0 <strlen>
 8005c14:	2300      	movs	r3, #0
 8005c16:	930a      	str	r3, [sp, #40]	; 0x28
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c24:	3307      	adds	r3, #7
 8005c26:	f023 0307 	bic.w	r3, r3, #7
 8005c2a:	f103 0208 	add.w	r2, r3, #8
 8005c2e:	f8c8 2000 	str.w	r2, [r8]
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c42:	9307      	str	r3, [sp, #28]
 8005c44:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c48:	ee08 0a10 	vmov	s16, r0
 8005c4c:	4b9f      	ldr	r3, [pc, #636]	; (8005ecc <_printf_float+0x2dc>)
 8005c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c52:	f04f 32ff 	mov.w	r2, #4294967295
 8005c56:	f7fa ff69 	bl	8000b2c <__aeabi_dcmpun>
 8005c5a:	bb88      	cbnz	r0, 8005cc0 <_printf_float+0xd0>
 8005c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c60:	4b9a      	ldr	r3, [pc, #616]	; (8005ecc <_printf_float+0x2dc>)
 8005c62:	f04f 32ff 	mov.w	r2, #4294967295
 8005c66:	f7fa ff43 	bl	8000af0 <__aeabi_dcmple>
 8005c6a:	bb48      	cbnz	r0, 8005cc0 <_printf_float+0xd0>
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4640      	mov	r0, r8
 8005c72:	4649      	mov	r1, r9
 8005c74:	f7fa ff32 	bl	8000adc <__aeabi_dcmplt>
 8005c78:	b110      	cbz	r0, 8005c80 <_printf_float+0x90>
 8005c7a:	232d      	movs	r3, #45	; 0x2d
 8005c7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c80:	4b93      	ldr	r3, [pc, #588]	; (8005ed0 <_printf_float+0x2e0>)
 8005c82:	4894      	ldr	r0, [pc, #592]	; (8005ed4 <_printf_float+0x2e4>)
 8005c84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005c88:	bf94      	ite	ls
 8005c8a:	4698      	movls	r8, r3
 8005c8c:	4680      	movhi	r8, r0
 8005c8e:	2303      	movs	r3, #3
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	9b05      	ldr	r3, [sp, #20]
 8005c94:	f023 0204 	bic.w	r2, r3, #4
 8005c98:	6022      	str	r2, [r4, #0]
 8005c9a:	f04f 0900 	mov.w	r9, #0
 8005c9e:	9700      	str	r7, [sp, #0]
 8005ca0:	4633      	mov	r3, r6
 8005ca2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	f000 f9d8 	bl	800605c <_printf_common>
 8005cac:	3001      	adds	r0, #1
 8005cae:	f040 8090 	bne.w	8005dd2 <_printf_float+0x1e2>
 8005cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb6:	b00d      	add	sp, #52	; 0x34
 8005cb8:	ecbd 8b02 	vpop	{d8}
 8005cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc0:	4642      	mov	r2, r8
 8005cc2:	464b      	mov	r3, r9
 8005cc4:	4640      	mov	r0, r8
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	f7fa ff30 	bl	8000b2c <__aeabi_dcmpun>
 8005ccc:	b140      	cbz	r0, 8005ce0 <_printf_float+0xf0>
 8005cce:	464b      	mov	r3, r9
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bfbc      	itt	lt
 8005cd4:	232d      	movlt	r3, #45	; 0x2d
 8005cd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cda:	487f      	ldr	r0, [pc, #508]	; (8005ed8 <_printf_float+0x2e8>)
 8005cdc:	4b7f      	ldr	r3, [pc, #508]	; (8005edc <_printf_float+0x2ec>)
 8005cde:	e7d1      	b.n	8005c84 <_printf_float+0x94>
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ce6:	9206      	str	r2, [sp, #24]
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	d13f      	bne.n	8005d6c <_printf_float+0x17c>
 8005cec:	2306      	movs	r3, #6
 8005cee:	6063      	str	r3, [r4, #4]
 8005cf0:	9b05      	ldr	r3, [sp, #20]
 8005cf2:	6861      	ldr	r1, [r4, #4]
 8005cf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9303      	str	r3, [sp, #12]
 8005cfc:	ab0a      	add	r3, sp, #40	; 0x28
 8005cfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d02:	ab09      	add	r3, sp, #36	; 0x24
 8005d04:	ec49 8b10 	vmov	d0, r8, r9
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	6022      	str	r2, [r4, #0]
 8005d0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d10:	4628      	mov	r0, r5
 8005d12:	f7ff fecd 	bl	8005ab0 <__cvt>
 8005d16:	9b06      	ldr	r3, [sp, #24]
 8005d18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d1a:	2b47      	cmp	r3, #71	; 0x47
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	d108      	bne.n	8005d32 <_printf_float+0x142>
 8005d20:	1cc8      	adds	r0, r1, #3
 8005d22:	db02      	blt.n	8005d2a <_printf_float+0x13a>
 8005d24:	6863      	ldr	r3, [r4, #4]
 8005d26:	4299      	cmp	r1, r3
 8005d28:	dd41      	ble.n	8005dae <_printf_float+0x1be>
 8005d2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d2e:	fa5f fb8b 	uxtb.w	fp, fp
 8005d32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d36:	d820      	bhi.n	8005d7a <_printf_float+0x18a>
 8005d38:	3901      	subs	r1, #1
 8005d3a:	465a      	mov	r2, fp
 8005d3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d40:	9109      	str	r1, [sp, #36]	; 0x24
 8005d42:	f7ff ff17 	bl	8005b74 <__exponent>
 8005d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d48:	1813      	adds	r3, r2, r0
 8005d4a:	2a01      	cmp	r2, #1
 8005d4c:	4681      	mov	r9, r0
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	dc02      	bgt.n	8005d58 <_printf_float+0x168>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	07d2      	lsls	r2, r2, #31
 8005d56:	d501      	bpl.n	8005d5c <_printf_float+0x16c>
 8005d58:	3301      	adds	r3, #1
 8005d5a:	6123      	str	r3, [r4, #16]
 8005d5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d09c      	beq.n	8005c9e <_printf_float+0xae>
 8005d64:	232d      	movs	r3, #45	; 0x2d
 8005d66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d6a:	e798      	b.n	8005c9e <_printf_float+0xae>
 8005d6c:	9a06      	ldr	r2, [sp, #24]
 8005d6e:	2a47      	cmp	r2, #71	; 0x47
 8005d70:	d1be      	bne.n	8005cf0 <_printf_float+0x100>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1bc      	bne.n	8005cf0 <_printf_float+0x100>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e7b9      	b.n	8005cee <_printf_float+0xfe>
 8005d7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d7e:	d118      	bne.n	8005db2 <_printf_float+0x1c2>
 8005d80:	2900      	cmp	r1, #0
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	dd0b      	ble.n	8005d9e <_printf_float+0x1ae>
 8005d86:	6121      	str	r1, [r4, #16]
 8005d88:	b913      	cbnz	r3, 8005d90 <_printf_float+0x1a0>
 8005d8a:	6822      	ldr	r2, [r4, #0]
 8005d8c:	07d0      	lsls	r0, r2, #31
 8005d8e:	d502      	bpl.n	8005d96 <_printf_float+0x1a6>
 8005d90:	3301      	adds	r3, #1
 8005d92:	440b      	add	r3, r1
 8005d94:	6123      	str	r3, [r4, #16]
 8005d96:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d98:	f04f 0900 	mov.w	r9, #0
 8005d9c:	e7de      	b.n	8005d5c <_printf_float+0x16c>
 8005d9e:	b913      	cbnz	r3, 8005da6 <_printf_float+0x1b6>
 8005da0:	6822      	ldr	r2, [r4, #0]
 8005da2:	07d2      	lsls	r2, r2, #31
 8005da4:	d501      	bpl.n	8005daa <_printf_float+0x1ba>
 8005da6:	3302      	adds	r3, #2
 8005da8:	e7f4      	b.n	8005d94 <_printf_float+0x1a4>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e7f2      	b.n	8005d94 <_printf_float+0x1a4>
 8005dae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005db4:	4299      	cmp	r1, r3
 8005db6:	db05      	blt.n	8005dc4 <_printf_float+0x1d4>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	6121      	str	r1, [r4, #16]
 8005dbc:	07d8      	lsls	r0, r3, #31
 8005dbe:	d5ea      	bpl.n	8005d96 <_printf_float+0x1a6>
 8005dc0:	1c4b      	adds	r3, r1, #1
 8005dc2:	e7e7      	b.n	8005d94 <_printf_float+0x1a4>
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	bfd4      	ite	le
 8005dc8:	f1c1 0202 	rsble	r2, r1, #2
 8005dcc:	2201      	movgt	r2, #1
 8005dce:	4413      	add	r3, r2
 8005dd0:	e7e0      	b.n	8005d94 <_printf_float+0x1a4>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	055a      	lsls	r2, r3, #21
 8005dd6:	d407      	bmi.n	8005de8 <_printf_float+0x1f8>
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	4642      	mov	r2, r8
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4628      	mov	r0, r5
 8005de0:	47b8      	blx	r7
 8005de2:	3001      	adds	r0, #1
 8005de4:	d12c      	bne.n	8005e40 <_printf_float+0x250>
 8005de6:	e764      	b.n	8005cb2 <_printf_float+0xc2>
 8005de8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dec:	f240 80e0 	bls.w	8005fb0 <_printf_float+0x3c0>
 8005df0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005df4:	2200      	movs	r2, #0
 8005df6:	2300      	movs	r3, #0
 8005df8:	f7fa fe66 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d034      	beq.n	8005e6a <_printf_float+0x27a>
 8005e00:	4a37      	ldr	r2, [pc, #220]	; (8005ee0 <_printf_float+0x2f0>)
 8005e02:	2301      	movs	r3, #1
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f af51 	beq.w	8005cb2 <_printf_float+0xc2>
 8005e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e14:	429a      	cmp	r2, r3
 8005e16:	db02      	blt.n	8005e1e <_printf_float+0x22e>
 8005e18:	6823      	ldr	r3, [r4, #0]
 8005e1a:	07d8      	lsls	r0, r3, #31
 8005e1c:	d510      	bpl.n	8005e40 <_printf_float+0x250>
 8005e1e:	ee18 3a10 	vmov	r3, s16
 8005e22:	4652      	mov	r2, sl
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f af41 	beq.w	8005cb2 <_printf_float+0xc2>
 8005e30:	f04f 0800 	mov.w	r8, #0
 8005e34:	f104 091a 	add.w	r9, r4, #26
 8005e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	4543      	cmp	r3, r8
 8005e3e:	dc09      	bgt.n	8005e54 <_printf_float+0x264>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	079b      	lsls	r3, r3, #30
 8005e44:	f100 8105 	bmi.w	8006052 <_printf_float+0x462>
 8005e48:	68e0      	ldr	r0, [r4, #12]
 8005e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e4c:	4298      	cmp	r0, r3
 8005e4e:	bfb8      	it	lt
 8005e50:	4618      	movlt	r0, r3
 8005e52:	e730      	b.n	8005cb6 <_printf_float+0xc6>
 8005e54:	2301      	movs	r3, #1
 8005e56:	464a      	mov	r2, r9
 8005e58:	4631      	mov	r1, r6
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	47b8      	blx	r7
 8005e5e:	3001      	adds	r0, #1
 8005e60:	f43f af27 	beq.w	8005cb2 <_printf_float+0xc2>
 8005e64:	f108 0801 	add.w	r8, r8, #1
 8005e68:	e7e6      	b.n	8005e38 <_printf_float+0x248>
 8005e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dc39      	bgt.n	8005ee4 <_printf_float+0x2f4>
 8005e70:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <_printf_float+0x2f0>)
 8005e72:	2301      	movs	r3, #1
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f af19 	beq.w	8005cb2 <_printf_float+0xc2>
 8005e80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e84:	4313      	orrs	r3, r2
 8005e86:	d102      	bne.n	8005e8e <_printf_float+0x29e>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	07d9      	lsls	r1, r3, #31
 8005e8c:	d5d8      	bpl.n	8005e40 <_printf_float+0x250>
 8005e8e:	ee18 3a10 	vmov	r3, s16
 8005e92:	4652      	mov	r2, sl
 8005e94:	4631      	mov	r1, r6
 8005e96:	4628      	mov	r0, r5
 8005e98:	47b8      	blx	r7
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f43f af09 	beq.w	8005cb2 <_printf_float+0xc2>
 8005ea0:	f04f 0900 	mov.w	r9, #0
 8005ea4:	f104 0a1a 	add.w	sl, r4, #26
 8005ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eaa:	425b      	negs	r3, r3
 8005eac:	454b      	cmp	r3, r9
 8005eae:	dc01      	bgt.n	8005eb4 <_printf_float+0x2c4>
 8005eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eb2:	e792      	b.n	8005dda <_printf_float+0x1ea>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4652      	mov	r2, sl
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	f43f aef7 	beq.w	8005cb2 <_printf_float+0xc2>
 8005ec4:	f109 0901 	add.w	r9, r9, #1
 8005ec8:	e7ee      	b.n	8005ea8 <_printf_float+0x2b8>
 8005eca:	bf00      	nop
 8005ecc:	7fefffff 	.word	0x7fefffff
 8005ed0:	080084ac 	.word	0x080084ac
 8005ed4:	080084b0 	.word	0x080084b0
 8005ed8:	080084b8 	.word	0x080084b8
 8005edc:	080084b4 	.word	0x080084b4
 8005ee0:	080084bc 	.word	0x080084bc
 8005ee4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ee6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	bfa8      	it	ge
 8005eec:	461a      	movge	r2, r3
 8005eee:	2a00      	cmp	r2, #0
 8005ef0:	4691      	mov	r9, r2
 8005ef2:	dc37      	bgt.n	8005f64 <_printf_float+0x374>
 8005ef4:	f04f 0b00 	mov.w	fp, #0
 8005ef8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005efc:	f104 021a 	add.w	r2, r4, #26
 8005f00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f02:	9305      	str	r3, [sp, #20]
 8005f04:	eba3 0309 	sub.w	r3, r3, r9
 8005f08:	455b      	cmp	r3, fp
 8005f0a:	dc33      	bgt.n	8005f74 <_printf_float+0x384>
 8005f0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f10:	429a      	cmp	r2, r3
 8005f12:	db3b      	blt.n	8005f8c <_printf_float+0x39c>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	07da      	lsls	r2, r3, #31
 8005f18:	d438      	bmi.n	8005f8c <_printf_float+0x39c>
 8005f1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1c:	9b05      	ldr	r3, [sp, #20]
 8005f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	eba2 0901 	sub.w	r9, r2, r1
 8005f26:	4599      	cmp	r9, r3
 8005f28:	bfa8      	it	ge
 8005f2a:	4699      	movge	r9, r3
 8005f2c:	f1b9 0f00 	cmp.w	r9, #0
 8005f30:	dc35      	bgt.n	8005f9e <_printf_float+0x3ae>
 8005f32:	f04f 0800 	mov.w	r8, #0
 8005f36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f3a:	f104 0a1a 	add.w	sl, r4, #26
 8005f3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	eba3 0309 	sub.w	r3, r3, r9
 8005f48:	4543      	cmp	r3, r8
 8005f4a:	f77f af79 	ble.w	8005e40 <_printf_float+0x250>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4652      	mov	r2, sl
 8005f52:	4631      	mov	r1, r6
 8005f54:	4628      	mov	r0, r5
 8005f56:	47b8      	blx	r7
 8005f58:	3001      	adds	r0, #1
 8005f5a:	f43f aeaa 	beq.w	8005cb2 <_printf_float+0xc2>
 8005f5e:	f108 0801 	add.w	r8, r8, #1
 8005f62:	e7ec      	b.n	8005f3e <_printf_float+0x34e>
 8005f64:	4613      	mov	r3, r2
 8005f66:	4631      	mov	r1, r6
 8005f68:	4642      	mov	r2, r8
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	47b8      	blx	r7
 8005f6e:	3001      	adds	r0, #1
 8005f70:	d1c0      	bne.n	8005ef4 <_printf_float+0x304>
 8005f72:	e69e      	b.n	8005cb2 <_printf_float+0xc2>
 8005f74:	2301      	movs	r3, #1
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	9205      	str	r2, [sp, #20]
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f ae97 	beq.w	8005cb2 <_printf_float+0xc2>
 8005f84:	9a05      	ldr	r2, [sp, #20]
 8005f86:	f10b 0b01 	add.w	fp, fp, #1
 8005f8a:	e7b9      	b.n	8005f00 <_printf_float+0x310>
 8005f8c:	ee18 3a10 	vmov	r3, s16
 8005f90:	4652      	mov	r2, sl
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	47b8      	blx	r7
 8005f98:	3001      	adds	r0, #1
 8005f9a:	d1be      	bne.n	8005f1a <_printf_float+0x32a>
 8005f9c:	e689      	b.n	8005cb2 <_printf_float+0xc2>
 8005f9e:	9a05      	ldr	r2, [sp, #20]
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	4442      	add	r2, r8
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	d1c1      	bne.n	8005f32 <_printf_float+0x342>
 8005fae:	e680      	b.n	8005cb2 <_printf_float+0xc2>
 8005fb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fb2:	2a01      	cmp	r2, #1
 8005fb4:	dc01      	bgt.n	8005fba <_printf_float+0x3ca>
 8005fb6:	07db      	lsls	r3, r3, #31
 8005fb8:	d538      	bpl.n	800602c <_printf_float+0x43c>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4642      	mov	r2, r8
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4628      	mov	r0, r5
 8005fc2:	47b8      	blx	r7
 8005fc4:	3001      	adds	r0, #1
 8005fc6:	f43f ae74 	beq.w	8005cb2 <_printf_float+0xc2>
 8005fca:	ee18 3a10 	vmov	r3, s16
 8005fce:	4652      	mov	r2, sl
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	47b8      	blx	r7
 8005fd6:	3001      	adds	r0, #1
 8005fd8:	f43f ae6b 	beq.w	8005cb2 <_printf_float+0xc2>
 8005fdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	f7fa fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fe8:	b9d8      	cbnz	r0, 8006022 <_printf_float+0x432>
 8005fea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fec:	f108 0201 	add.w	r2, r8, #1
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4628      	mov	r0, r5
 8005ff6:	47b8      	blx	r7
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d10e      	bne.n	800601a <_printf_float+0x42a>
 8005ffc:	e659      	b.n	8005cb2 <_printf_float+0xc2>
 8005ffe:	2301      	movs	r3, #1
 8006000:	4652      	mov	r2, sl
 8006002:	4631      	mov	r1, r6
 8006004:	4628      	mov	r0, r5
 8006006:	47b8      	blx	r7
 8006008:	3001      	adds	r0, #1
 800600a:	f43f ae52 	beq.w	8005cb2 <_printf_float+0xc2>
 800600e:	f108 0801 	add.w	r8, r8, #1
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	3b01      	subs	r3, #1
 8006016:	4543      	cmp	r3, r8
 8006018:	dcf1      	bgt.n	8005ffe <_printf_float+0x40e>
 800601a:	464b      	mov	r3, r9
 800601c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006020:	e6dc      	b.n	8005ddc <_printf_float+0x1ec>
 8006022:	f04f 0800 	mov.w	r8, #0
 8006026:	f104 0a1a 	add.w	sl, r4, #26
 800602a:	e7f2      	b.n	8006012 <_printf_float+0x422>
 800602c:	2301      	movs	r3, #1
 800602e:	4642      	mov	r2, r8
 8006030:	e7df      	b.n	8005ff2 <_printf_float+0x402>
 8006032:	2301      	movs	r3, #1
 8006034:	464a      	mov	r2, r9
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f ae38 	beq.w	8005cb2 <_printf_float+0xc2>
 8006042:	f108 0801 	add.w	r8, r8, #1
 8006046:	68e3      	ldr	r3, [r4, #12]
 8006048:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800604a:	1a5b      	subs	r3, r3, r1
 800604c:	4543      	cmp	r3, r8
 800604e:	dcf0      	bgt.n	8006032 <_printf_float+0x442>
 8006050:	e6fa      	b.n	8005e48 <_printf_float+0x258>
 8006052:	f04f 0800 	mov.w	r8, #0
 8006056:	f104 0919 	add.w	r9, r4, #25
 800605a:	e7f4      	b.n	8006046 <_printf_float+0x456>

0800605c <_printf_common>:
 800605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006060:	4616      	mov	r6, r2
 8006062:	4699      	mov	r9, r3
 8006064:	688a      	ldr	r2, [r1, #8]
 8006066:	690b      	ldr	r3, [r1, #16]
 8006068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800606c:	4293      	cmp	r3, r2
 800606e:	bfb8      	it	lt
 8006070:	4613      	movlt	r3, r2
 8006072:	6033      	str	r3, [r6, #0]
 8006074:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006078:	4607      	mov	r7, r0
 800607a:	460c      	mov	r4, r1
 800607c:	b10a      	cbz	r2, 8006082 <_printf_common+0x26>
 800607e:	3301      	adds	r3, #1
 8006080:	6033      	str	r3, [r6, #0]
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	0699      	lsls	r1, r3, #26
 8006086:	bf42      	ittt	mi
 8006088:	6833      	ldrmi	r3, [r6, #0]
 800608a:	3302      	addmi	r3, #2
 800608c:	6033      	strmi	r3, [r6, #0]
 800608e:	6825      	ldr	r5, [r4, #0]
 8006090:	f015 0506 	ands.w	r5, r5, #6
 8006094:	d106      	bne.n	80060a4 <_printf_common+0x48>
 8006096:	f104 0a19 	add.w	sl, r4, #25
 800609a:	68e3      	ldr	r3, [r4, #12]
 800609c:	6832      	ldr	r2, [r6, #0]
 800609e:	1a9b      	subs	r3, r3, r2
 80060a0:	42ab      	cmp	r3, r5
 80060a2:	dc26      	bgt.n	80060f2 <_printf_common+0x96>
 80060a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060a8:	1e13      	subs	r3, r2, #0
 80060aa:	6822      	ldr	r2, [r4, #0]
 80060ac:	bf18      	it	ne
 80060ae:	2301      	movne	r3, #1
 80060b0:	0692      	lsls	r2, r2, #26
 80060b2:	d42b      	bmi.n	800610c <_printf_common+0xb0>
 80060b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060b8:	4649      	mov	r1, r9
 80060ba:	4638      	mov	r0, r7
 80060bc:	47c0      	blx	r8
 80060be:	3001      	adds	r0, #1
 80060c0:	d01e      	beq.n	8006100 <_printf_common+0xa4>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	68e5      	ldr	r5, [r4, #12]
 80060c6:	6832      	ldr	r2, [r6, #0]
 80060c8:	f003 0306 	and.w	r3, r3, #6
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	bf08      	it	eq
 80060d0:	1aad      	subeq	r5, r5, r2
 80060d2:	68a3      	ldr	r3, [r4, #8]
 80060d4:	6922      	ldr	r2, [r4, #16]
 80060d6:	bf0c      	ite	eq
 80060d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060dc:	2500      	movne	r5, #0
 80060de:	4293      	cmp	r3, r2
 80060e0:	bfc4      	itt	gt
 80060e2:	1a9b      	subgt	r3, r3, r2
 80060e4:	18ed      	addgt	r5, r5, r3
 80060e6:	2600      	movs	r6, #0
 80060e8:	341a      	adds	r4, #26
 80060ea:	42b5      	cmp	r5, r6
 80060ec:	d11a      	bne.n	8006124 <_printf_common+0xc8>
 80060ee:	2000      	movs	r0, #0
 80060f0:	e008      	b.n	8006104 <_printf_common+0xa8>
 80060f2:	2301      	movs	r3, #1
 80060f4:	4652      	mov	r2, sl
 80060f6:	4649      	mov	r1, r9
 80060f8:	4638      	mov	r0, r7
 80060fa:	47c0      	blx	r8
 80060fc:	3001      	adds	r0, #1
 80060fe:	d103      	bne.n	8006108 <_printf_common+0xac>
 8006100:	f04f 30ff 	mov.w	r0, #4294967295
 8006104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006108:	3501      	adds	r5, #1
 800610a:	e7c6      	b.n	800609a <_printf_common+0x3e>
 800610c:	18e1      	adds	r1, r4, r3
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	2030      	movs	r0, #48	; 0x30
 8006112:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006116:	4422      	add	r2, r4
 8006118:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800611c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006120:	3302      	adds	r3, #2
 8006122:	e7c7      	b.n	80060b4 <_printf_common+0x58>
 8006124:	2301      	movs	r3, #1
 8006126:	4622      	mov	r2, r4
 8006128:	4649      	mov	r1, r9
 800612a:	4638      	mov	r0, r7
 800612c:	47c0      	blx	r8
 800612e:	3001      	adds	r0, #1
 8006130:	d0e6      	beq.n	8006100 <_printf_common+0xa4>
 8006132:	3601      	adds	r6, #1
 8006134:	e7d9      	b.n	80060ea <_printf_common+0x8e>
	...

08006138 <_printf_i>:
 8006138:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	460c      	mov	r4, r1
 800613e:	4691      	mov	r9, r2
 8006140:	7e27      	ldrb	r7, [r4, #24]
 8006142:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006144:	2f78      	cmp	r7, #120	; 0x78
 8006146:	4680      	mov	r8, r0
 8006148:	469a      	mov	sl, r3
 800614a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800614e:	d807      	bhi.n	8006160 <_printf_i+0x28>
 8006150:	2f62      	cmp	r7, #98	; 0x62
 8006152:	d80a      	bhi.n	800616a <_printf_i+0x32>
 8006154:	2f00      	cmp	r7, #0
 8006156:	f000 80d8 	beq.w	800630a <_printf_i+0x1d2>
 800615a:	2f58      	cmp	r7, #88	; 0x58
 800615c:	f000 80a3 	beq.w	80062a6 <_printf_i+0x16e>
 8006160:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006164:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006168:	e03a      	b.n	80061e0 <_printf_i+0xa8>
 800616a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800616e:	2b15      	cmp	r3, #21
 8006170:	d8f6      	bhi.n	8006160 <_printf_i+0x28>
 8006172:	a001      	add	r0, pc, #4	; (adr r0, 8006178 <_printf_i+0x40>)
 8006174:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006178:	080061d1 	.word	0x080061d1
 800617c:	080061e5 	.word	0x080061e5
 8006180:	08006161 	.word	0x08006161
 8006184:	08006161 	.word	0x08006161
 8006188:	08006161 	.word	0x08006161
 800618c:	08006161 	.word	0x08006161
 8006190:	080061e5 	.word	0x080061e5
 8006194:	08006161 	.word	0x08006161
 8006198:	08006161 	.word	0x08006161
 800619c:	08006161 	.word	0x08006161
 80061a0:	08006161 	.word	0x08006161
 80061a4:	080062f1 	.word	0x080062f1
 80061a8:	08006215 	.word	0x08006215
 80061ac:	080062d3 	.word	0x080062d3
 80061b0:	08006161 	.word	0x08006161
 80061b4:	08006161 	.word	0x08006161
 80061b8:	08006313 	.word	0x08006313
 80061bc:	08006161 	.word	0x08006161
 80061c0:	08006215 	.word	0x08006215
 80061c4:	08006161 	.word	0x08006161
 80061c8:	08006161 	.word	0x08006161
 80061cc:	080062db 	.word	0x080062db
 80061d0:	680b      	ldr	r3, [r1, #0]
 80061d2:	1d1a      	adds	r2, r3, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	600a      	str	r2, [r1, #0]
 80061d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e0:	2301      	movs	r3, #1
 80061e2:	e0a3      	b.n	800632c <_printf_i+0x1f4>
 80061e4:	6825      	ldr	r5, [r4, #0]
 80061e6:	6808      	ldr	r0, [r1, #0]
 80061e8:	062e      	lsls	r6, r5, #24
 80061ea:	f100 0304 	add.w	r3, r0, #4
 80061ee:	d50a      	bpl.n	8006206 <_printf_i+0xce>
 80061f0:	6805      	ldr	r5, [r0, #0]
 80061f2:	600b      	str	r3, [r1, #0]
 80061f4:	2d00      	cmp	r5, #0
 80061f6:	da03      	bge.n	8006200 <_printf_i+0xc8>
 80061f8:	232d      	movs	r3, #45	; 0x2d
 80061fa:	426d      	negs	r5, r5
 80061fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006200:	485e      	ldr	r0, [pc, #376]	; (800637c <_printf_i+0x244>)
 8006202:	230a      	movs	r3, #10
 8006204:	e019      	b.n	800623a <_printf_i+0x102>
 8006206:	f015 0f40 	tst.w	r5, #64	; 0x40
 800620a:	6805      	ldr	r5, [r0, #0]
 800620c:	600b      	str	r3, [r1, #0]
 800620e:	bf18      	it	ne
 8006210:	b22d      	sxthne	r5, r5
 8006212:	e7ef      	b.n	80061f4 <_printf_i+0xbc>
 8006214:	680b      	ldr	r3, [r1, #0]
 8006216:	6825      	ldr	r5, [r4, #0]
 8006218:	1d18      	adds	r0, r3, #4
 800621a:	6008      	str	r0, [r1, #0]
 800621c:	0628      	lsls	r0, r5, #24
 800621e:	d501      	bpl.n	8006224 <_printf_i+0xec>
 8006220:	681d      	ldr	r5, [r3, #0]
 8006222:	e002      	b.n	800622a <_printf_i+0xf2>
 8006224:	0669      	lsls	r1, r5, #25
 8006226:	d5fb      	bpl.n	8006220 <_printf_i+0xe8>
 8006228:	881d      	ldrh	r5, [r3, #0]
 800622a:	4854      	ldr	r0, [pc, #336]	; (800637c <_printf_i+0x244>)
 800622c:	2f6f      	cmp	r7, #111	; 0x6f
 800622e:	bf0c      	ite	eq
 8006230:	2308      	moveq	r3, #8
 8006232:	230a      	movne	r3, #10
 8006234:	2100      	movs	r1, #0
 8006236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800623a:	6866      	ldr	r6, [r4, #4]
 800623c:	60a6      	str	r6, [r4, #8]
 800623e:	2e00      	cmp	r6, #0
 8006240:	bfa2      	ittt	ge
 8006242:	6821      	ldrge	r1, [r4, #0]
 8006244:	f021 0104 	bicge.w	r1, r1, #4
 8006248:	6021      	strge	r1, [r4, #0]
 800624a:	b90d      	cbnz	r5, 8006250 <_printf_i+0x118>
 800624c:	2e00      	cmp	r6, #0
 800624e:	d04d      	beq.n	80062ec <_printf_i+0x1b4>
 8006250:	4616      	mov	r6, r2
 8006252:	fbb5 f1f3 	udiv	r1, r5, r3
 8006256:	fb03 5711 	mls	r7, r3, r1, r5
 800625a:	5dc7      	ldrb	r7, [r0, r7]
 800625c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006260:	462f      	mov	r7, r5
 8006262:	42bb      	cmp	r3, r7
 8006264:	460d      	mov	r5, r1
 8006266:	d9f4      	bls.n	8006252 <_printf_i+0x11a>
 8006268:	2b08      	cmp	r3, #8
 800626a:	d10b      	bne.n	8006284 <_printf_i+0x14c>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	07df      	lsls	r7, r3, #31
 8006270:	d508      	bpl.n	8006284 <_printf_i+0x14c>
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	6861      	ldr	r1, [r4, #4]
 8006276:	4299      	cmp	r1, r3
 8006278:	bfde      	ittt	le
 800627a:	2330      	movle	r3, #48	; 0x30
 800627c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006280:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006284:	1b92      	subs	r2, r2, r6
 8006286:	6122      	str	r2, [r4, #16]
 8006288:	f8cd a000 	str.w	sl, [sp]
 800628c:	464b      	mov	r3, r9
 800628e:	aa03      	add	r2, sp, #12
 8006290:	4621      	mov	r1, r4
 8006292:	4640      	mov	r0, r8
 8006294:	f7ff fee2 	bl	800605c <_printf_common>
 8006298:	3001      	adds	r0, #1
 800629a:	d14c      	bne.n	8006336 <_printf_i+0x1fe>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295
 80062a0:	b004      	add	sp, #16
 80062a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a6:	4835      	ldr	r0, [pc, #212]	; (800637c <_printf_i+0x244>)
 80062a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	680e      	ldr	r6, [r1, #0]
 80062b0:	061f      	lsls	r7, r3, #24
 80062b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80062b6:	600e      	str	r6, [r1, #0]
 80062b8:	d514      	bpl.n	80062e4 <_printf_i+0x1ac>
 80062ba:	07d9      	lsls	r1, r3, #31
 80062bc:	bf44      	itt	mi
 80062be:	f043 0320 	orrmi.w	r3, r3, #32
 80062c2:	6023      	strmi	r3, [r4, #0]
 80062c4:	b91d      	cbnz	r5, 80062ce <_printf_i+0x196>
 80062c6:	6823      	ldr	r3, [r4, #0]
 80062c8:	f023 0320 	bic.w	r3, r3, #32
 80062cc:	6023      	str	r3, [r4, #0]
 80062ce:	2310      	movs	r3, #16
 80062d0:	e7b0      	b.n	8006234 <_printf_i+0xfc>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	f043 0320 	orr.w	r3, r3, #32
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	2378      	movs	r3, #120	; 0x78
 80062dc:	4828      	ldr	r0, [pc, #160]	; (8006380 <_printf_i+0x248>)
 80062de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062e2:	e7e3      	b.n	80062ac <_printf_i+0x174>
 80062e4:	065e      	lsls	r6, r3, #25
 80062e6:	bf48      	it	mi
 80062e8:	b2ad      	uxthmi	r5, r5
 80062ea:	e7e6      	b.n	80062ba <_printf_i+0x182>
 80062ec:	4616      	mov	r6, r2
 80062ee:	e7bb      	b.n	8006268 <_printf_i+0x130>
 80062f0:	680b      	ldr	r3, [r1, #0]
 80062f2:	6826      	ldr	r6, [r4, #0]
 80062f4:	6960      	ldr	r0, [r4, #20]
 80062f6:	1d1d      	adds	r5, r3, #4
 80062f8:	600d      	str	r5, [r1, #0]
 80062fa:	0635      	lsls	r5, r6, #24
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	d501      	bpl.n	8006304 <_printf_i+0x1cc>
 8006300:	6018      	str	r0, [r3, #0]
 8006302:	e002      	b.n	800630a <_printf_i+0x1d2>
 8006304:	0671      	lsls	r1, r6, #25
 8006306:	d5fb      	bpl.n	8006300 <_printf_i+0x1c8>
 8006308:	8018      	strh	r0, [r3, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	4616      	mov	r6, r2
 8006310:	e7ba      	b.n	8006288 <_printf_i+0x150>
 8006312:	680b      	ldr	r3, [r1, #0]
 8006314:	1d1a      	adds	r2, r3, #4
 8006316:	600a      	str	r2, [r1, #0]
 8006318:	681e      	ldr	r6, [r3, #0]
 800631a:	6862      	ldr	r2, [r4, #4]
 800631c:	2100      	movs	r1, #0
 800631e:	4630      	mov	r0, r6
 8006320:	f7f9 ff5e 	bl	80001e0 <memchr>
 8006324:	b108      	cbz	r0, 800632a <_printf_i+0x1f2>
 8006326:	1b80      	subs	r0, r0, r6
 8006328:	6060      	str	r0, [r4, #4]
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	2300      	movs	r3, #0
 8006330:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006334:	e7a8      	b.n	8006288 <_printf_i+0x150>
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	4632      	mov	r2, r6
 800633a:	4649      	mov	r1, r9
 800633c:	4640      	mov	r0, r8
 800633e:	47d0      	blx	sl
 8006340:	3001      	adds	r0, #1
 8006342:	d0ab      	beq.n	800629c <_printf_i+0x164>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	079b      	lsls	r3, r3, #30
 8006348:	d413      	bmi.n	8006372 <_printf_i+0x23a>
 800634a:	68e0      	ldr	r0, [r4, #12]
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	4298      	cmp	r0, r3
 8006350:	bfb8      	it	lt
 8006352:	4618      	movlt	r0, r3
 8006354:	e7a4      	b.n	80062a0 <_printf_i+0x168>
 8006356:	2301      	movs	r3, #1
 8006358:	4632      	mov	r2, r6
 800635a:	4649      	mov	r1, r9
 800635c:	4640      	mov	r0, r8
 800635e:	47d0      	blx	sl
 8006360:	3001      	adds	r0, #1
 8006362:	d09b      	beq.n	800629c <_printf_i+0x164>
 8006364:	3501      	adds	r5, #1
 8006366:	68e3      	ldr	r3, [r4, #12]
 8006368:	9903      	ldr	r1, [sp, #12]
 800636a:	1a5b      	subs	r3, r3, r1
 800636c:	42ab      	cmp	r3, r5
 800636e:	dcf2      	bgt.n	8006356 <_printf_i+0x21e>
 8006370:	e7eb      	b.n	800634a <_printf_i+0x212>
 8006372:	2500      	movs	r5, #0
 8006374:	f104 0619 	add.w	r6, r4, #25
 8006378:	e7f5      	b.n	8006366 <_printf_i+0x22e>
 800637a:	bf00      	nop
 800637c:	080084be 	.word	0x080084be
 8006380:	080084cf 	.word	0x080084cf

08006384 <quorem>:
 8006384:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	6903      	ldr	r3, [r0, #16]
 800638a:	690c      	ldr	r4, [r1, #16]
 800638c:	42a3      	cmp	r3, r4
 800638e:	4607      	mov	r7, r0
 8006390:	f2c0 8081 	blt.w	8006496 <quorem+0x112>
 8006394:	3c01      	subs	r4, #1
 8006396:	f101 0814 	add.w	r8, r1, #20
 800639a:	f100 0514 	add.w	r5, r0, #20
 800639e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063a2:	9301      	str	r3, [sp, #4]
 80063a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063ac:	3301      	adds	r3, #1
 80063ae:	429a      	cmp	r2, r3
 80063b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80063bc:	d331      	bcc.n	8006422 <quorem+0x9e>
 80063be:	f04f 0e00 	mov.w	lr, #0
 80063c2:	4640      	mov	r0, r8
 80063c4:	46ac      	mov	ip, r5
 80063c6:	46f2      	mov	sl, lr
 80063c8:	f850 2b04 	ldr.w	r2, [r0], #4
 80063cc:	b293      	uxth	r3, r2
 80063ce:	fb06 e303 	mla	r3, r6, r3, lr
 80063d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	ebaa 0303 	sub.w	r3, sl, r3
 80063dc:	0c12      	lsrs	r2, r2, #16
 80063de:	f8dc a000 	ldr.w	sl, [ip]
 80063e2:	fb06 e202 	mla	r2, r6, r2, lr
 80063e6:	fa13 f38a 	uxtah	r3, r3, sl
 80063ea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063ee:	fa1f fa82 	uxth.w	sl, r2
 80063f2:	f8dc 2000 	ldr.w	r2, [ip]
 80063f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063fe:	b29b      	uxth	r3, r3
 8006400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006404:	4581      	cmp	r9, r0
 8006406:	f84c 3b04 	str.w	r3, [ip], #4
 800640a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800640e:	d2db      	bcs.n	80063c8 <quorem+0x44>
 8006410:	f855 300b 	ldr.w	r3, [r5, fp]
 8006414:	b92b      	cbnz	r3, 8006422 <quorem+0x9e>
 8006416:	9b01      	ldr	r3, [sp, #4]
 8006418:	3b04      	subs	r3, #4
 800641a:	429d      	cmp	r5, r3
 800641c:	461a      	mov	r2, r3
 800641e:	d32e      	bcc.n	800647e <quorem+0xfa>
 8006420:	613c      	str	r4, [r7, #16]
 8006422:	4638      	mov	r0, r7
 8006424:	f001 f8c0 	bl	80075a8 <__mcmp>
 8006428:	2800      	cmp	r0, #0
 800642a:	db24      	blt.n	8006476 <quorem+0xf2>
 800642c:	3601      	adds	r6, #1
 800642e:	4628      	mov	r0, r5
 8006430:	f04f 0c00 	mov.w	ip, #0
 8006434:	f858 2b04 	ldr.w	r2, [r8], #4
 8006438:	f8d0 e000 	ldr.w	lr, [r0]
 800643c:	b293      	uxth	r3, r2
 800643e:	ebac 0303 	sub.w	r3, ip, r3
 8006442:	0c12      	lsrs	r2, r2, #16
 8006444:	fa13 f38e 	uxtah	r3, r3, lr
 8006448:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800644c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006450:	b29b      	uxth	r3, r3
 8006452:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006456:	45c1      	cmp	r9, r8
 8006458:	f840 3b04 	str.w	r3, [r0], #4
 800645c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006460:	d2e8      	bcs.n	8006434 <quorem+0xb0>
 8006462:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006466:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800646a:	b922      	cbnz	r2, 8006476 <quorem+0xf2>
 800646c:	3b04      	subs	r3, #4
 800646e:	429d      	cmp	r5, r3
 8006470:	461a      	mov	r2, r3
 8006472:	d30a      	bcc.n	800648a <quorem+0x106>
 8006474:	613c      	str	r4, [r7, #16]
 8006476:	4630      	mov	r0, r6
 8006478:	b003      	add	sp, #12
 800647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	3b04      	subs	r3, #4
 8006482:	2a00      	cmp	r2, #0
 8006484:	d1cc      	bne.n	8006420 <quorem+0x9c>
 8006486:	3c01      	subs	r4, #1
 8006488:	e7c7      	b.n	800641a <quorem+0x96>
 800648a:	6812      	ldr	r2, [r2, #0]
 800648c:	3b04      	subs	r3, #4
 800648e:	2a00      	cmp	r2, #0
 8006490:	d1f0      	bne.n	8006474 <quorem+0xf0>
 8006492:	3c01      	subs	r4, #1
 8006494:	e7eb      	b.n	800646e <quorem+0xea>
 8006496:	2000      	movs	r0, #0
 8006498:	e7ee      	b.n	8006478 <quorem+0xf4>
 800649a:	0000      	movs	r0, r0
 800649c:	0000      	movs	r0, r0
	...

080064a0 <_dtoa_r>:
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a4:	ed2d 8b02 	vpush	{d8}
 80064a8:	ec57 6b10 	vmov	r6, r7, d0
 80064ac:	b095      	sub	sp, #84	; 0x54
 80064ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064b4:	9105      	str	r1, [sp, #20]
 80064b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80064ba:	4604      	mov	r4, r0
 80064bc:	9209      	str	r2, [sp, #36]	; 0x24
 80064be:	930f      	str	r3, [sp, #60]	; 0x3c
 80064c0:	b975      	cbnz	r5, 80064e0 <_dtoa_r+0x40>
 80064c2:	2010      	movs	r0, #16
 80064c4:	f000 fddc 	bl	8007080 <malloc>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6260      	str	r0, [r4, #36]	; 0x24
 80064cc:	b920      	cbnz	r0, 80064d8 <_dtoa_r+0x38>
 80064ce:	4bb2      	ldr	r3, [pc, #712]	; (8006798 <_dtoa_r+0x2f8>)
 80064d0:	21ea      	movs	r1, #234	; 0xea
 80064d2:	48b2      	ldr	r0, [pc, #712]	; (800679c <_dtoa_r+0x2fc>)
 80064d4:	f001 fa32 	bl	800793c <__assert_func>
 80064d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80064dc:	6005      	str	r5, [r0, #0]
 80064de:	60c5      	str	r5, [r0, #12]
 80064e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064e2:	6819      	ldr	r1, [r3, #0]
 80064e4:	b151      	cbz	r1, 80064fc <_dtoa_r+0x5c>
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	604a      	str	r2, [r1, #4]
 80064ea:	2301      	movs	r3, #1
 80064ec:	4093      	lsls	r3, r2
 80064ee:	608b      	str	r3, [r1, #8]
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fe1b 	bl	800712c <_Bfree>
 80064f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064f8:	2200      	movs	r2, #0
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	1e3b      	subs	r3, r7, #0
 80064fe:	bfb9      	ittee	lt
 8006500:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006504:	9303      	strlt	r3, [sp, #12]
 8006506:	2300      	movge	r3, #0
 8006508:	f8c8 3000 	strge.w	r3, [r8]
 800650c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006510:	4ba3      	ldr	r3, [pc, #652]	; (80067a0 <_dtoa_r+0x300>)
 8006512:	bfbc      	itt	lt
 8006514:	2201      	movlt	r2, #1
 8006516:	f8c8 2000 	strlt.w	r2, [r8]
 800651a:	ea33 0309 	bics.w	r3, r3, r9
 800651e:	d11b      	bne.n	8006558 <_dtoa_r+0xb8>
 8006520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006522:	f242 730f 	movw	r3, #9999	; 0x270f
 8006526:	6013      	str	r3, [r2, #0]
 8006528:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800652c:	4333      	orrs	r3, r6
 800652e:	f000 857a 	beq.w	8007026 <_dtoa_r+0xb86>
 8006532:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006534:	b963      	cbnz	r3, 8006550 <_dtoa_r+0xb0>
 8006536:	4b9b      	ldr	r3, [pc, #620]	; (80067a4 <_dtoa_r+0x304>)
 8006538:	e024      	b.n	8006584 <_dtoa_r+0xe4>
 800653a:	4b9b      	ldr	r3, [pc, #620]	; (80067a8 <_dtoa_r+0x308>)
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006542:	6013      	str	r3, [r2, #0]
 8006544:	9800      	ldr	r0, [sp, #0]
 8006546:	b015      	add	sp, #84	; 0x54
 8006548:	ecbd 8b02 	vpop	{d8}
 800654c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006550:	4b94      	ldr	r3, [pc, #592]	; (80067a4 <_dtoa_r+0x304>)
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	3303      	adds	r3, #3
 8006556:	e7f3      	b.n	8006540 <_dtoa_r+0xa0>
 8006558:	ed9d 7b02 	vldr	d7, [sp, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	ec51 0b17 	vmov	r0, r1, d7
 8006562:	2300      	movs	r3, #0
 8006564:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006568:	f7fa faae 	bl	8000ac8 <__aeabi_dcmpeq>
 800656c:	4680      	mov	r8, r0
 800656e:	b158      	cbz	r0, 8006588 <_dtoa_r+0xe8>
 8006570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006572:	2301      	movs	r3, #1
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 8551 	beq.w	8007020 <_dtoa_r+0xb80>
 800657e:	488b      	ldr	r0, [pc, #556]	; (80067ac <_dtoa_r+0x30c>)
 8006580:	6018      	str	r0, [r3, #0]
 8006582:	1e43      	subs	r3, r0, #1
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	e7dd      	b.n	8006544 <_dtoa_r+0xa4>
 8006588:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800658c:	aa12      	add	r2, sp, #72	; 0x48
 800658e:	a913      	add	r1, sp, #76	; 0x4c
 8006590:	4620      	mov	r0, r4
 8006592:	f001 f8ad 	bl	80076f0 <__d2b>
 8006596:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800659a:	4683      	mov	fp, r0
 800659c:	2d00      	cmp	r5, #0
 800659e:	d07c      	beq.n	800669a <_dtoa_r+0x1fa>
 80065a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80065a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80065ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065ba:	4b7d      	ldr	r3, [pc, #500]	; (80067b0 <_dtoa_r+0x310>)
 80065bc:	2200      	movs	r2, #0
 80065be:	4630      	mov	r0, r6
 80065c0:	4639      	mov	r1, r7
 80065c2:	f7f9 fe61 	bl	8000288 <__aeabi_dsub>
 80065c6:	a36e      	add	r3, pc, #440	; (adr r3, 8006780 <_dtoa_r+0x2e0>)
 80065c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065cc:	f7fa f814 	bl	80005f8 <__aeabi_dmul>
 80065d0:	a36d      	add	r3, pc, #436	; (adr r3, 8006788 <_dtoa_r+0x2e8>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f7f9 fe59 	bl	800028c <__adddf3>
 80065da:	4606      	mov	r6, r0
 80065dc:	4628      	mov	r0, r5
 80065de:	460f      	mov	r7, r1
 80065e0:	f7f9 ffa0 	bl	8000524 <__aeabi_i2d>
 80065e4:	a36a      	add	r3, pc, #424	; (adr r3, 8006790 <_dtoa_r+0x2f0>)
 80065e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ea:	f7fa f805 	bl	80005f8 <__aeabi_dmul>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4630      	mov	r0, r6
 80065f4:	4639      	mov	r1, r7
 80065f6:	f7f9 fe49 	bl	800028c <__adddf3>
 80065fa:	4606      	mov	r6, r0
 80065fc:	460f      	mov	r7, r1
 80065fe:	f7fa faab 	bl	8000b58 <__aeabi_d2iz>
 8006602:	2200      	movs	r2, #0
 8006604:	4682      	mov	sl, r0
 8006606:	2300      	movs	r3, #0
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7fa fa66 	bl	8000adc <__aeabi_dcmplt>
 8006610:	b148      	cbz	r0, 8006626 <_dtoa_r+0x186>
 8006612:	4650      	mov	r0, sl
 8006614:	f7f9 ff86 	bl	8000524 <__aeabi_i2d>
 8006618:	4632      	mov	r2, r6
 800661a:	463b      	mov	r3, r7
 800661c:	f7fa fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8006620:	b908      	cbnz	r0, 8006626 <_dtoa_r+0x186>
 8006622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006626:	f1ba 0f16 	cmp.w	sl, #22
 800662a:	d854      	bhi.n	80066d6 <_dtoa_r+0x236>
 800662c:	4b61      	ldr	r3, [pc, #388]	; (80067b4 <_dtoa_r+0x314>)
 800662e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800663a:	f7fa fa4f 	bl	8000adc <__aeabi_dcmplt>
 800663e:	2800      	cmp	r0, #0
 8006640:	d04b      	beq.n	80066da <_dtoa_r+0x23a>
 8006642:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006646:	2300      	movs	r3, #0
 8006648:	930e      	str	r3, [sp, #56]	; 0x38
 800664a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800664c:	1b5d      	subs	r5, r3, r5
 800664e:	1e6b      	subs	r3, r5, #1
 8006650:	9304      	str	r3, [sp, #16]
 8006652:	bf43      	ittte	mi
 8006654:	2300      	movmi	r3, #0
 8006656:	f1c5 0801 	rsbmi	r8, r5, #1
 800665a:	9304      	strmi	r3, [sp, #16]
 800665c:	f04f 0800 	movpl.w	r8, #0
 8006660:	f1ba 0f00 	cmp.w	sl, #0
 8006664:	db3b      	blt.n	80066de <_dtoa_r+0x23e>
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800666c:	4453      	add	r3, sl
 800666e:	9304      	str	r3, [sp, #16]
 8006670:	2300      	movs	r3, #0
 8006672:	9306      	str	r3, [sp, #24]
 8006674:	9b05      	ldr	r3, [sp, #20]
 8006676:	2b09      	cmp	r3, #9
 8006678:	d869      	bhi.n	800674e <_dtoa_r+0x2ae>
 800667a:	2b05      	cmp	r3, #5
 800667c:	bfc4      	itt	gt
 800667e:	3b04      	subgt	r3, #4
 8006680:	9305      	strgt	r3, [sp, #20]
 8006682:	9b05      	ldr	r3, [sp, #20]
 8006684:	f1a3 0302 	sub.w	r3, r3, #2
 8006688:	bfcc      	ite	gt
 800668a:	2500      	movgt	r5, #0
 800668c:	2501      	movle	r5, #1
 800668e:	2b03      	cmp	r3, #3
 8006690:	d869      	bhi.n	8006766 <_dtoa_r+0x2c6>
 8006692:	e8df f003 	tbb	[pc, r3]
 8006696:	4e2c      	.short	0x4e2c
 8006698:	5a4c      	.short	0x5a4c
 800669a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800669e:	441d      	add	r5, r3
 80066a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066a4:	2b20      	cmp	r3, #32
 80066a6:	bfc1      	itttt	gt
 80066a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066b0:	fa09 f303 	lslgt.w	r3, r9, r3
 80066b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066b8:	bfda      	itte	le
 80066ba:	f1c3 0320 	rsble	r3, r3, #32
 80066be:	fa06 f003 	lslle.w	r0, r6, r3
 80066c2:	4318      	orrgt	r0, r3
 80066c4:	f7f9 ff1e 	bl	8000504 <__aeabi_ui2d>
 80066c8:	2301      	movs	r3, #1
 80066ca:	4606      	mov	r6, r0
 80066cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80066d0:	3d01      	subs	r5, #1
 80066d2:	9310      	str	r3, [sp, #64]	; 0x40
 80066d4:	e771      	b.n	80065ba <_dtoa_r+0x11a>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e7b6      	b.n	8006648 <_dtoa_r+0x1a8>
 80066da:	900e      	str	r0, [sp, #56]	; 0x38
 80066dc:	e7b5      	b.n	800664a <_dtoa_r+0x1aa>
 80066de:	f1ca 0300 	rsb	r3, sl, #0
 80066e2:	9306      	str	r3, [sp, #24]
 80066e4:	2300      	movs	r3, #0
 80066e6:	eba8 080a 	sub.w	r8, r8, sl
 80066ea:	930d      	str	r3, [sp, #52]	; 0x34
 80066ec:	e7c2      	b.n	8006674 <_dtoa_r+0x1d4>
 80066ee:	2300      	movs	r3, #0
 80066f0:	9308      	str	r3, [sp, #32]
 80066f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	dc39      	bgt.n	800676c <_dtoa_r+0x2cc>
 80066f8:	f04f 0901 	mov.w	r9, #1
 80066fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8006700:	464b      	mov	r3, r9
 8006702:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006706:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006708:	2200      	movs	r2, #0
 800670a:	6042      	str	r2, [r0, #4]
 800670c:	2204      	movs	r2, #4
 800670e:	f102 0614 	add.w	r6, r2, #20
 8006712:	429e      	cmp	r6, r3
 8006714:	6841      	ldr	r1, [r0, #4]
 8006716:	d92f      	bls.n	8006778 <_dtoa_r+0x2d8>
 8006718:	4620      	mov	r0, r4
 800671a:	f000 fcc7 	bl	80070ac <_Balloc>
 800671e:	9000      	str	r0, [sp, #0]
 8006720:	2800      	cmp	r0, #0
 8006722:	d14b      	bne.n	80067bc <_dtoa_r+0x31c>
 8006724:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <_dtoa_r+0x318>)
 8006726:	4602      	mov	r2, r0
 8006728:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800672c:	e6d1      	b.n	80064d2 <_dtoa_r+0x32>
 800672e:	2301      	movs	r3, #1
 8006730:	e7de      	b.n	80066f0 <_dtoa_r+0x250>
 8006732:	2300      	movs	r3, #0
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006738:	eb0a 0903 	add.w	r9, sl, r3
 800673c:	f109 0301 	add.w	r3, r9, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	bfb8      	it	lt
 8006746:	2301      	movlt	r3, #1
 8006748:	e7dd      	b.n	8006706 <_dtoa_r+0x266>
 800674a:	2301      	movs	r3, #1
 800674c:	e7f2      	b.n	8006734 <_dtoa_r+0x294>
 800674e:	2501      	movs	r5, #1
 8006750:	2300      	movs	r3, #0
 8006752:	9305      	str	r3, [sp, #20]
 8006754:	9508      	str	r5, [sp, #32]
 8006756:	f04f 39ff 	mov.w	r9, #4294967295
 800675a:	2200      	movs	r2, #0
 800675c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006760:	2312      	movs	r3, #18
 8006762:	9209      	str	r2, [sp, #36]	; 0x24
 8006764:	e7cf      	b.n	8006706 <_dtoa_r+0x266>
 8006766:	2301      	movs	r3, #1
 8006768:	9308      	str	r3, [sp, #32]
 800676a:	e7f4      	b.n	8006756 <_dtoa_r+0x2b6>
 800676c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006770:	f8cd 9004 	str.w	r9, [sp, #4]
 8006774:	464b      	mov	r3, r9
 8006776:	e7c6      	b.n	8006706 <_dtoa_r+0x266>
 8006778:	3101      	adds	r1, #1
 800677a:	6041      	str	r1, [r0, #4]
 800677c:	0052      	lsls	r2, r2, #1
 800677e:	e7c6      	b.n	800670e <_dtoa_r+0x26e>
 8006780:	636f4361 	.word	0x636f4361
 8006784:	3fd287a7 	.word	0x3fd287a7
 8006788:	8b60c8b3 	.word	0x8b60c8b3
 800678c:	3fc68a28 	.word	0x3fc68a28
 8006790:	509f79fb 	.word	0x509f79fb
 8006794:	3fd34413 	.word	0x3fd34413
 8006798:	080084ed 	.word	0x080084ed
 800679c:	08008504 	.word	0x08008504
 80067a0:	7ff00000 	.word	0x7ff00000
 80067a4:	080084e9 	.word	0x080084e9
 80067a8:	080084e0 	.word	0x080084e0
 80067ac:	080084bd 	.word	0x080084bd
 80067b0:	3ff80000 	.word	0x3ff80000
 80067b4:	08008600 	.word	0x08008600
 80067b8:	08008563 	.word	0x08008563
 80067bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067be:	9a00      	ldr	r2, [sp, #0]
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	9b01      	ldr	r3, [sp, #4]
 80067c4:	2b0e      	cmp	r3, #14
 80067c6:	f200 80ad 	bhi.w	8006924 <_dtoa_r+0x484>
 80067ca:	2d00      	cmp	r5, #0
 80067cc:	f000 80aa 	beq.w	8006924 <_dtoa_r+0x484>
 80067d0:	f1ba 0f00 	cmp.w	sl, #0
 80067d4:	dd36      	ble.n	8006844 <_dtoa_r+0x3a4>
 80067d6:	4ac3      	ldr	r2, [pc, #780]	; (8006ae4 <_dtoa_r+0x644>)
 80067d8:	f00a 030f 	and.w	r3, sl, #15
 80067dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067e0:	ed93 7b00 	vldr	d7, [r3]
 80067e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80067e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80067ec:	eeb0 8a47 	vmov.f32	s16, s14
 80067f0:	eef0 8a67 	vmov.f32	s17, s15
 80067f4:	d016      	beq.n	8006824 <_dtoa_r+0x384>
 80067f6:	4bbc      	ldr	r3, [pc, #752]	; (8006ae8 <_dtoa_r+0x648>)
 80067f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006800:	f7fa f824 	bl	800084c <__aeabi_ddiv>
 8006804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006808:	f007 070f 	and.w	r7, r7, #15
 800680c:	2503      	movs	r5, #3
 800680e:	4eb6      	ldr	r6, [pc, #728]	; (8006ae8 <_dtoa_r+0x648>)
 8006810:	b957      	cbnz	r7, 8006828 <_dtoa_r+0x388>
 8006812:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006816:	ec53 2b18 	vmov	r2, r3, d8
 800681a:	f7fa f817 	bl	800084c <__aeabi_ddiv>
 800681e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006822:	e029      	b.n	8006878 <_dtoa_r+0x3d8>
 8006824:	2502      	movs	r5, #2
 8006826:	e7f2      	b.n	800680e <_dtoa_r+0x36e>
 8006828:	07f9      	lsls	r1, r7, #31
 800682a:	d508      	bpl.n	800683e <_dtoa_r+0x39e>
 800682c:	ec51 0b18 	vmov	r0, r1, d8
 8006830:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006834:	f7f9 fee0 	bl	80005f8 <__aeabi_dmul>
 8006838:	ec41 0b18 	vmov	d8, r0, r1
 800683c:	3501      	adds	r5, #1
 800683e:	107f      	asrs	r7, r7, #1
 8006840:	3608      	adds	r6, #8
 8006842:	e7e5      	b.n	8006810 <_dtoa_r+0x370>
 8006844:	f000 80a6 	beq.w	8006994 <_dtoa_r+0x4f4>
 8006848:	f1ca 0600 	rsb	r6, sl, #0
 800684c:	4ba5      	ldr	r3, [pc, #660]	; (8006ae4 <_dtoa_r+0x644>)
 800684e:	4fa6      	ldr	r7, [pc, #664]	; (8006ae8 <_dtoa_r+0x648>)
 8006850:	f006 020f 	and.w	r2, r6, #15
 8006854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006860:	f7f9 feca 	bl	80005f8 <__aeabi_dmul>
 8006864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006868:	1136      	asrs	r6, r6, #4
 800686a:	2300      	movs	r3, #0
 800686c:	2502      	movs	r5, #2
 800686e:	2e00      	cmp	r6, #0
 8006870:	f040 8085 	bne.w	800697e <_dtoa_r+0x4de>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1d2      	bne.n	800681e <_dtoa_r+0x37e>
 8006878:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 808c 	beq.w	8006998 <_dtoa_r+0x4f8>
 8006880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006884:	4b99      	ldr	r3, [pc, #612]	; (8006aec <_dtoa_r+0x64c>)
 8006886:	2200      	movs	r2, #0
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7fa f926 	bl	8000adc <__aeabi_dcmplt>
 8006890:	2800      	cmp	r0, #0
 8006892:	f000 8081 	beq.w	8006998 <_dtoa_r+0x4f8>
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d07d      	beq.n	8006998 <_dtoa_r+0x4f8>
 800689c:	f1b9 0f00 	cmp.w	r9, #0
 80068a0:	dd3c      	ble.n	800691c <_dtoa_r+0x47c>
 80068a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80068a6:	9307      	str	r3, [sp, #28]
 80068a8:	2200      	movs	r2, #0
 80068aa:	4b91      	ldr	r3, [pc, #580]	; (8006af0 <_dtoa_r+0x650>)
 80068ac:	4630      	mov	r0, r6
 80068ae:	4639      	mov	r1, r7
 80068b0:	f7f9 fea2 	bl	80005f8 <__aeabi_dmul>
 80068b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b8:	3501      	adds	r5, #1
 80068ba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80068be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068c2:	4628      	mov	r0, r5
 80068c4:	f7f9 fe2e 	bl	8000524 <__aeabi_i2d>
 80068c8:	4632      	mov	r2, r6
 80068ca:	463b      	mov	r3, r7
 80068cc:	f7f9 fe94 	bl	80005f8 <__aeabi_dmul>
 80068d0:	4b88      	ldr	r3, [pc, #544]	; (8006af4 <_dtoa_r+0x654>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	f7f9 fcda 	bl	800028c <__adddf3>
 80068d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80068dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068e0:	9303      	str	r3, [sp, #12]
 80068e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d15c      	bne.n	80069a2 <_dtoa_r+0x502>
 80068e8:	4b83      	ldr	r3, [pc, #524]	; (8006af8 <_dtoa_r+0x658>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	4630      	mov	r0, r6
 80068ee:	4639      	mov	r1, r7
 80068f0:	f7f9 fcca 	bl	8000288 <__aeabi_dsub>
 80068f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068f8:	4606      	mov	r6, r0
 80068fa:	460f      	mov	r7, r1
 80068fc:	f7fa f90c 	bl	8000b18 <__aeabi_dcmpgt>
 8006900:	2800      	cmp	r0, #0
 8006902:	f040 8296 	bne.w	8006e32 <_dtoa_r+0x992>
 8006906:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800690a:	4630      	mov	r0, r6
 800690c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006910:	4639      	mov	r1, r7
 8006912:	f7fa f8e3 	bl	8000adc <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	f040 8288 	bne.w	8006e2c <_dtoa_r+0x98c>
 800691c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006920:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006924:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006926:	2b00      	cmp	r3, #0
 8006928:	f2c0 8158 	blt.w	8006bdc <_dtoa_r+0x73c>
 800692c:	f1ba 0f0e 	cmp.w	sl, #14
 8006930:	f300 8154 	bgt.w	8006bdc <_dtoa_r+0x73c>
 8006934:	4b6b      	ldr	r3, [pc, #428]	; (8006ae4 <_dtoa_r+0x644>)
 8006936:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800693a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800693e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	f280 80e3 	bge.w	8006b0c <_dtoa_r+0x66c>
 8006946:	9b01      	ldr	r3, [sp, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f300 80df 	bgt.w	8006b0c <_dtoa_r+0x66c>
 800694e:	f040 826d 	bne.w	8006e2c <_dtoa_r+0x98c>
 8006952:	4b69      	ldr	r3, [pc, #420]	; (8006af8 <_dtoa_r+0x658>)
 8006954:	2200      	movs	r2, #0
 8006956:	4640      	mov	r0, r8
 8006958:	4649      	mov	r1, r9
 800695a:	f7f9 fe4d 	bl	80005f8 <__aeabi_dmul>
 800695e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006962:	f7fa f8cf 	bl	8000b04 <__aeabi_dcmpge>
 8006966:	9e01      	ldr	r6, [sp, #4]
 8006968:	4637      	mov	r7, r6
 800696a:	2800      	cmp	r0, #0
 800696c:	f040 8243 	bne.w	8006df6 <_dtoa_r+0x956>
 8006970:	9d00      	ldr	r5, [sp, #0]
 8006972:	2331      	movs	r3, #49	; 0x31
 8006974:	f805 3b01 	strb.w	r3, [r5], #1
 8006978:	f10a 0a01 	add.w	sl, sl, #1
 800697c:	e23f      	b.n	8006dfe <_dtoa_r+0x95e>
 800697e:	07f2      	lsls	r2, r6, #31
 8006980:	d505      	bpl.n	800698e <_dtoa_r+0x4ee>
 8006982:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006986:	f7f9 fe37 	bl	80005f8 <__aeabi_dmul>
 800698a:	3501      	adds	r5, #1
 800698c:	2301      	movs	r3, #1
 800698e:	1076      	asrs	r6, r6, #1
 8006990:	3708      	adds	r7, #8
 8006992:	e76c      	b.n	800686e <_dtoa_r+0x3ce>
 8006994:	2502      	movs	r5, #2
 8006996:	e76f      	b.n	8006878 <_dtoa_r+0x3d8>
 8006998:	9b01      	ldr	r3, [sp, #4]
 800699a:	f8cd a01c 	str.w	sl, [sp, #28]
 800699e:	930c      	str	r3, [sp, #48]	; 0x30
 80069a0:	e78d      	b.n	80068be <_dtoa_r+0x41e>
 80069a2:	9900      	ldr	r1, [sp, #0]
 80069a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80069a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069a8:	4b4e      	ldr	r3, [pc, #312]	; (8006ae4 <_dtoa_r+0x644>)
 80069aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069ae:	4401      	add	r1, r0
 80069b0:	9102      	str	r1, [sp, #8]
 80069b2:	9908      	ldr	r1, [sp, #32]
 80069b4:	eeb0 8a47 	vmov.f32	s16, s14
 80069b8:	eef0 8a67 	vmov.f32	s17, s15
 80069bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069c4:	2900      	cmp	r1, #0
 80069c6:	d045      	beq.n	8006a54 <_dtoa_r+0x5b4>
 80069c8:	494c      	ldr	r1, [pc, #304]	; (8006afc <_dtoa_r+0x65c>)
 80069ca:	2000      	movs	r0, #0
 80069cc:	f7f9 ff3e 	bl	800084c <__aeabi_ddiv>
 80069d0:	ec53 2b18 	vmov	r2, r3, d8
 80069d4:	f7f9 fc58 	bl	8000288 <__aeabi_dsub>
 80069d8:	9d00      	ldr	r5, [sp, #0]
 80069da:	ec41 0b18 	vmov	d8, r0, r1
 80069de:	4639      	mov	r1, r7
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7fa f8b9 	bl	8000b58 <__aeabi_d2iz>
 80069e6:	900c      	str	r0, [sp, #48]	; 0x30
 80069e8:	f7f9 fd9c 	bl	8000524 <__aeabi_i2d>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4630      	mov	r0, r6
 80069f2:	4639      	mov	r1, r7
 80069f4:	f7f9 fc48 	bl	8000288 <__aeabi_dsub>
 80069f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069fa:	3330      	adds	r3, #48	; 0x30
 80069fc:	f805 3b01 	strb.w	r3, [r5], #1
 8006a00:	ec53 2b18 	vmov	r2, r3, d8
 8006a04:	4606      	mov	r6, r0
 8006a06:	460f      	mov	r7, r1
 8006a08:	f7fa f868 	bl	8000adc <__aeabi_dcmplt>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d165      	bne.n	8006adc <_dtoa_r+0x63c>
 8006a10:	4632      	mov	r2, r6
 8006a12:	463b      	mov	r3, r7
 8006a14:	4935      	ldr	r1, [pc, #212]	; (8006aec <_dtoa_r+0x64c>)
 8006a16:	2000      	movs	r0, #0
 8006a18:	f7f9 fc36 	bl	8000288 <__aeabi_dsub>
 8006a1c:	ec53 2b18 	vmov	r2, r3, d8
 8006a20:	f7fa f85c 	bl	8000adc <__aeabi_dcmplt>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f040 80b9 	bne.w	8006b9c <_dtoa_r+0x6fc>
 8006a2a:	9b02      	ldr	r3, [sp, #8]
 8006a2c:	429d      	cmp	r5, r3
 8006a2e:	f43f af75 	beq.w	800691c <_dtoa_r+0x47c>
 8006a32:	4b2f      	ldr	r3, [pc, #188]	; (8006af0 <_dtoa_r+0x650>)
 8006a34:	ec51 0b18 	vmov	r0, r1, d8
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f7f9 fddd 	bl	80005f8 <__aeabi_dmul>
 8006a3e:	4b2c      	ldr	r3, [pc, #176]	; (8006af0 <_dtoa_r+0x650>)
 8006a40:	ec41 0b18 	vmov	d8, r0, r1
 8006a44:	2200      	movs	r2, #0
 8006a46:	4630      	mov	r0, r6
 8006a48:	4639      	mov	r1, r7
 8006a4a:	f7f9 fdd5 	bl	80005f8 <__aeabi_dmul>
 8006a4e:	4606      	mov	r6, r0
 8006a50:	460f      	mov	r7, r1
 8006a52:	e7c4      	b.n	80069de <_dtoa_r+0x53e>
 8006a54:	ec51 0b17 	vmov	r0, r1, d7
 8006a58:	f7f9 fdce 	bl	80005f8 <__aeabi_dmul>
 8006a5c:	9b02      	ldr	r3, [sp, #8]
 8006a5e:	9d00      	ldr	r5, [sp, #0]
 8006a60:	930c      	str	r3, [sp, #48]	; 0x30
 8006a62:	ec41 0b18 	vmov	d8, r0, r1
 8006a66:	4639      	mov	r1, r7
 8006a68:	4630      	mov	r0, r6
 8006a6a:	f7fa f875 	bl	8000b58 <__aeabi_d2iz>
 8006a6e:	9011      	str	r0, [sp, #68]	; 0x44
 8006a70:	f7f9 fd58 	bl	8000524 <__aeabi_i2d>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	4630      	mov	r0, r6
 8006a7a:	4639      	mov	r1, r7
 8006a7c:	f7f9 fc04 	bl	8000288 <__aeabi_dsub>
 8006a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a82:	3330      	adds	r3, #48	; 0x30
 8006a84:	f805 3b01 	strb.w	r3, [r5], #1
 8006a88:	9b02      	ldr	r3, [sp, #8]
 8006a8a:	429d      	cmp	r5, r3
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	460f      	mov	r7, r1
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	d134      	bne.n	8006b00 <_dtoa_r+0x660>
 8006a96:	4b19      	ldr	r3, [pc, #100]	; (8006afc <_dtoa_r+0x65c>)
 8006a98:	ec51 0b18 	vmov	r0, r1, d8
 8006a9c:	f7f9 fbf6 	bl	800028c <__adddf3>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4630      	mov	r0, r6
 8006aa6:	4639      	mov	r1, r7
 8006aa8:	f7fa f836 	bl	8000b18 <__aeabi_dcmpgt>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d175      	bne.n	8006b9c <_dtoa_r+0x6fc>
 8006ab0:	ec53 2b18 	vmov	r2, r3, d8
 8006ab4:	4911      	ldr	r1, [pc, #68]	; (8006afc <_dtoa_r+0x65c>)
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	f7f9 fbe6 	bl	8000288 <__aeabi_dsub>
 8006abc:	4602      	mov	r2, r0
 8006abe:	460b      	mov	r3, r1
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	f7fa f80a 	bl	8000adc <__aeabi_dcmplt>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f43f af27 	beq.w	800691c <_dtoa_r+0x47c>
 8006ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ad0:	1e6b      	subs	r3, r5, #1
 8006ad2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ad4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ad8:	2b30      	cmp	r3, #48	; 0x30
 8006ada:	d0f8      	beq.n	8006ace <_dtoa_r+0x62e>
 8006adc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006ae0:	e04a      	b.n	8006b78 <_dtoa_r+0x6d8>
 8006ae2:	bf00      	nop
 8006ae4:	08008600 	.word	0x08008600
 8006ae8:	080085d8 	.word	0x080085d8
 8006aec:	3ff00000 	.word	0x3ff00000
 8006af0:	40240000 	.word	0x40240000
 8006af4:	401c0000 	.word	0x401c0000
 8006af8:	40140000 	.word	0x40140000
 8006afc:	3fe00000 	.word	0x3fe00000
 8006b00:	4baf      	ldr	r3, [pc, #700]	; (8006dc0 <_dtoa_r+0x920>)
 8006b02:	f7f9 fd79 	bl	80005f8 <__aeabi_dmul>
 8006b06:	4606      	mov	r6, r0
 8006b08:	460f      	mov	r7, r1
 8006b0a:	e7ac      	b.n	8006a66 <_dtoa_r+0x5c6>
 8006b0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b10:	9d00      	ldr	r5, [sp, #0]
 8006b12:	4642      	mov	r2, r8
 8006b14:	464b      	mov	r3, r9
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fe97 	bl	800084c <__aeabi_ddiv>
 8006b1e:	f7fa f81b 	bl	8000b58 <__aeabi_d2iz>
 8006b22:	9002      	str	r0, [sp, #8]
 8006b24:	f7f9 fcfe 	bl	8000524 <__aeabi_i2d>
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	f7f9 fd64 	bl	80005f8 <__aeabi_dmul>
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4630      	mov	r0, r6
 8006b36:	4639      	mov	r1, r7
 8006b38:	f7f9 fba6 	bl	8000288 <__aeabi_dsub>
 8006b3c:	9e02      	ldr	r6, [sp, #8]
 8006b3e:	9f01      	ldr	r7, [sp, #4]
 8006b40:	3630      	adds	r6, #48	; 0x30
 8006b42:	f805 6b01 	strb.w	r6, [r5], #1
 8006b46:	9e00      	ldr	r6, [sp, #0]
 8006b48:	1bae      	subs	r6, r5, r6
 8006b4a:	42b7      	cmp	r7, r6
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	d137      	bne.n	8006bc2 <_dtoa_r+0x722>
 8006b52:	f7f9 fb9b 	bl	800028c <__adddf3>
 8006b56:	4642      	mov	r2, r8
 8006b58:	464b      	mov	r3, r9
 8006b5a:	4606      	mov	r6, r0
 8006b5c:	460f      	mov	r7, r1
 8006b5e:	f7f9 ffdb 	bl	8000b18 <__aeabi_dcmpgt>
 8006b62:	b9c8      	cbnz	r0, 8006b98 <_dtoa_r+0x6f8>
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	4630      	mov	r0, r6
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	f7f9 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b70:	b110      	cbz	r0, 8006b78 <_dtoa_r+0x6d8>
 8006b72:	9b02      	ldr	r3, [sp, #8]
 8006b74:	07d9      	lsls	r1, r3, #31
 8006b76:	d40f      	bmi.n	8006b98 <_dtoa_r+0x6f8>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4659      	mov	r1, fp
 8006b7c:	f000 fad6 	bl	800712c <_Bfree>
 8006b80:	2300      	movs	r3, #0
 8006b82:	702b      	strb	r3, [r5, #0]
 8006b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b86:	f10a 0001 	add.w	r0, sl, #1
 8006b8a:	6018      	str	r0, [r3, #0]
 8006b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f43f acd8 	beq.w	8006544 <_dtoa_r+0xa4>
 8006b94:	601d      	str	r5, [r3, #0]
 8006b96:	e4d5      	b.n	8006544 <_dtoa_r+0xa4>
 8006b98:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b9c:	462b      	mov	r3, r5
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ba4:	2a39      	cmp	r2, #57	; 0x39
 8006ba6:	d108      	bne.n	8006bba <_dtoa_r+0x71a>
 8006ba8:	9a00      	ldr	r2, [sp, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d1f7      	bne.n	8006b9e <_dtoa_r+0x6fe>
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	9900      	ldr	r1, [sp, #0]
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	9207      	str	r2, [sp, #28]
 8006bb6:	2230      	movs	r2, #48	; 0x30
 8006bb8:	700a      	strb	r2, [r1, #0]
 8006bba:	781a      	ldrb	r2, [r3, #0]
 8006bbc:	3201      	adds	r2, #1
 8006bbe:	701a      	strb	r2, [r3, #0]
 8006bc0:	e78c      	b.n	8006adc <_dtoa_r+0x63c>
 8006bc2:	4b7f      	ldr	r3, [pc, #508]	; (8006dc0 <_dtoa_r+0x920>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f7f9 fd17 	bl	80005f8 <__aeabi_dmul>
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4606      	mov	r6, r0
 8006bd0:	460f      	mov	r7, r1
 8006bd2:	f7f9 ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d09b      	beq.n	8006b12 <_dtoa_r+0x672>
 8006bda:	e7cd      	b.n	8006b78 <_dtoa_r+0x6d8>
 8006bdc:	9a08      	ldr	r2, [sp, #32]
 8006bde:	2a00      	cmp	r2, #0
 8006be0:	f000 80c4 	beq.w	8006d6c <_dtoa_r+0x8cc>
 8006be4:	9a05      	ldr	r2, [sp, #20]
 8006be6:	2a01      	cmp	r2, #1
 8006be8:	f300 80a8 	bgt.w	8006d3c <_dtoa_r+0x89c>
 8006bec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006bee:	2a00      	cmp	r2, #0
 8006bf0:	f000 80a0 	beq.w	8006d34 <_dtoa_r+0x894>
 8006bf4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bf8:	9e06      	ldr	r6, [sp, #24]
 8006bfa:	4645      	mov	r5, r8
 8006bfc:	9a04      	ldr	r2, [sp, #16]
 8006bfe:	2101      	movs	r1, #1
 8006c00:	441a      	add	r2, r3
 8006c02:	4620      	mov	r0, r4
 8006c04:	4498      	add	r8, r3
 8006c06:	9204      	str	r2, [sp, #16]
 8006c08:	f000 fb4c 	bl	80072a4 <__i2b>
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	2d00      	cmp	r5, #0
 8006c10:	dd0b      	ble.n	8006c2a <_dtoa_r+0x78a>
 8006c12:	9b04      	ldr	r3, [sp, #16]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	dd08      	ble.n	8006c2a <_dtoa_r+0x78a>
 8006c18:	42ab      	cmp	r3, r5
 8006c1a:	9a04      	ldr	r2, [sp, #16]
 8006c1c:	bfa8      	it	ge
 8006c1e:	462b      	movge	r3, r5
 8006c20:	eba8 0803 	sub.w	r8, r8, r3
 8006c24:	1aed      	subs	r5, r5, r3
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	9304      	str	r3, [sp, #16]
 8006c2a:	9b06      	ldr	r3, [sp, #24]
 8006c2c:	b1fb      	cbz	r3, 8006c6e <_dtoa_r+0x7ce>
 8006c2e:	9b08      	ldr	r3, [sp, #32]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 809f 	beq.w	8006d74 <_dtoa_r+0x8d4>
 8006c36:	2e00      	cmp	r6, #0
 8006c38:	dd11      	ble.n	8006c5e <_dtoa_r+0x7be>
 8006c3a:	4639      	mov	r1, r7
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fbec 	bl	800741c <__pow5mult>
 8006c44:	465a      	mov	r2, fp
 8006c46:	4601      	mov	r1, r0
 8006c48:	4607      	mov	r7, r0
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f000 fb40 	bl	80072d0 <__multiply>
 8006c50:	4659      	mov	r1, fp
 8006c52:	9007      	str	r0, [sp, #28]
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 fa69 	bl	800712c <_Bfree>
 8006c5a:	9b07      	ldr	r3, [sp, #28]
 8006c5c:	469b      	mov	fp, r3
 8006c5e:	9b06      	ldr	r3, [sp, #24]
 8006c60:	1b9a      	subs	r2, r3, r6
 8006c62:	d004      	beq.n	8006c6e <_dtoa_r+0x7ce>
 8006c64:	4659      	mov	r1, fp
 8006c66:	4620      	mov	r0, r4
 8006c68:	f000 fbd8 	bl	800741c <__pow5mult>
 8006c6c:	4683      	mov	fp, r0
 8006c6e:	2101      	movs	r1, #1
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fb17 	bl	80072a4 <__i2b>
 8006c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	dd7c      	ble.n	8006d78 <_dtoa_r+0x8d8>
 8006c7e:	461a      	mov	r2, r3
 8006c80:	4601      	mov	r1, r0
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fbca 	bl	800741c <__pow5mult>
 8006c88:	9b05      	ldr	r3, [sp, #20]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	dd76      	ble.n	8006d7e <_dtoa_r+0x8de>
 8006c90:	2300      	movs	r3, #0
 8006c92:	9306      	str	r3, [sp, #24]
 8006c94:	6933      	ldr	r3, [r6, #16]
 8006c96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006c9a:	6918      	ldr	r0, [r3, #16]
 8006c9c:	f000 fab2 	bl	8007204 <__hi0bits>
 8006ca0:	f1c0 0020 	rsb	r0, r0, #32
 8006ca4:	9b04      	ldr	r3, [sp, #16]
 8006ca6:	4418      	add	r0, r3
 8006ca8:	f010 001f 	ands.w	r0, r0, #31
 8006cac:	f000 8086 	beq.w	8006dbc <_dtoa_r+0x91c>
 8006cb0:	f1c0 0320 	rsb	r3, r0, #32
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	dd7f      	ble.n	8006db8 <_dtoa_r+0x918>
 8006cb8:	f1c0 001c 	rsb	r0, r0, #28
 8006cbc:	9b04      	ldr	r3, [sp, #16]
 8006cbe:	4403      	add	r3, r0
 8006cc0:	4480      	add	r8, r0
 8006cc2:	4405      	add	r5, r0
 8006cc4:	9304      	str	r3, [sp, #16]
 8006cc6:	f1b8 0f00 	cmp.w	r8, #0
 8006cca:	dd05      	ble.n	8006cd8 <_dtoa_r+0x838>
 8006ccc:	4659      	mov	r1, fp
 8006cce:	4642      	mov	r2, r8
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f000 fbfd 	bl	80074d0 <__lshift>
 8006cd6:	4683      	mov	fp, r0
 8006cd8:	9b04      	ldr	r3, [sp, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	dd05      	ble.n	8006cea <_dtoa_r+0x84a>
 8006cde:	4631      	mov	r1, r6
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 fbf4 	bl	80074d0 <__lshift>
 8006ce8:	4606      	mov	r6, r0
 8006cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d069      	beq.n	8006dc4 <_dtoa_r+0x924>
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4658      	mov	r0, fp
 8006cf4:	f000 fc58 	bl	80075a8 <__mcmp>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	da63      	bge.n	8006dc4 <_dtoa_r+0x924>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4659      	mov	r1, fp
 8006d00:	220a      	movs	r2, #10
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 fa34 	bl	8007170 <__multadd>
 8006d08:	9b08      	ldr	r3, [sp, #32]
 8006d0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d0e:	4683      	mov	fp, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 818f 	beq.w	8007034 <_dtoa_r+0xb94>
 8006d16:	4639      	mov	r1, r7
 8006d18:	2300      	movs	r3, #0
 8006d1a:	220a      	movs	r2, #10
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 fa27 	bl	8007170 <__multadd>
 8006d22:	f1b9 0f00 	cmp.w	r9, #0
 8006d26:	4607      	mov	r7, r0
 8006d28:	f300 808e 	bgt.w	8006e48 <_dtoa_r+0x9a8>
 8006d2c:	9b05      	ldr	r3, [sp, #20]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	dc50      	bgt.n	8006dd4 <_dtoa_r+0x934>
 8006d32:	e089      	b.n	8006e48 <_dtoa_r+0x9a8>
 8006d34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d3a:	e75d      	b.n	8006bf8 <_dtoa_r+0x758>
 8006d3c:	9b01      	ldr	r3, [sp, #4]
 8006d3e:	1e5e      	subs	r6, r3, #1
 8006d40:	9b06      	ldr	r3, [sp, #24]
 8006d42:	42b3      	cmp	r3, r6
 8006d44:	bfbf      	itttt	lt
 8006d46:	9b06      	ldrlt	r3, [sp, #24]
 8006d48:	9606      	strlt	r6, [sp, #24]
 8006d4a:	1af2      	sublt	r2, r6, r3
 8006d4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006d4e:	bfb6      	itet	lt
 8006d50:	189b      	addlt	r3, r3, r2
 8006d52:	1b9e      	subge	r6, r3, r6
 8006d54:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006d56:	9b01      	ldr	r3, [sp, #4]
 8006d58:	bfb8      	it	lt
 8006d5a:	2600      	movlt	r6, #0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfb5      	itete	lt
 8006d60:	eba8 0503 	sublt.w	r5, r8, r3
 8006d64:	9b01      	ldrge	r3, [sp, #4]
 8006d66:	2300      	movlt	r3, #0
 8006d68:	4645      	movge	r5, r8
 8006d6a:	e747      	b.n	8006bfc <_dtoa_r+0x75c>
 8006d6c:	9e06      	ldr	r6, [sp, #24]
 8006d6e:	9f08      	ldr	r7, [sp, #32]
 8006d70:	4645      	mov	r5, r8
 8006d72:	e74c      	b.n	8006c0e <_dtoa_r+0x76e>
 8006d74:	9a06      	ldr	r2, [sp, #24]
 8006d76:	e775      	b.n	8006c64 <_dtoa_r+0x7c4>
 8006d78:	9b05      	ldr	r3, [sp, #20]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	dc18      	bgt.n	8006db0 <_dtoa_r+0x910>
 8006d7e:	9b02      	ldr	r3, [sp, #8]
 8006d80:	b9b3      	cbnz	r3, 8006db0 <_dtoa_r+0x910>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d88:	b9a3      	cbnz	r3, 8006db4 <_dtoa_r+0x914>
 8006d8a:	9b03      	ldr	r3, [sp, #12]
 8006d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d90:	0d1b      	lsrs	r3, r3, #20
 8006d92:	051b      	lsls	r3, r3, #20
 8006d94:	b12b      	cbz	r3, 8006da2 <_dtoa_r+0x902>
 8006d96:	9b04      	ldr	r3, [sp, #16]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	9304      	str	r3, [sp, #16]
 8006d9c:	f108 0801 	add.w	r8, r8, #1
 8006da0:	2301      	movs	r3, #1
 8006da2:	9306      	str	r3, [sp, #24]
 8006da4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f47f af74 	bne.w	8006c94 <_dtoa_r+0x7f4>
 8006dac:	2001      	movs	r0, #1
 8006dae:	e779      	b.n	8006ca4 <_dtoa_r+0x804>
 8006db0:	2300      	movs	r3, #0
 8006db2:	e7f6      	b.n	8006da2 <_dtoa_r+0x902>
 8006db4:	9b02      	ldr	r3, [sp, #8]
 8006db6:	e7f4      	b.n	8006da2 <_dtoa_r+0x902>
 8006db8:	d085      	beq.n	8006cc6 <_dtoa_r+0x826>
 8006dba:	4618      	mov	r0, r3
 8006dbc:	301c      	adds	r0, #28
 8006dbe:	e77d      	b.n	8006cbc <_dtoa_r+0x81c>
 8006dc0:	40240000 	.word	0x40240000
 8006dc4:	9b01      	ldr	r3, [sp, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	dc38      	bgt.n	8006e3c <_dtoa_r+0x99c>
 8006dca:	9b05      	ldr	r3, [sp, #20]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	dd35      	ble.n	8006e3c <_dtoa_r+0x99c>
 8006dd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006dd4:	f1b9 0f00 	cmp.w	r9, #0
 8006dd8:	d10d      	bne.n	8006df6 <_dtoa_r+0x956>
 8006dda:	4631      	mov	r1, r6
 8006ddc:	464b      	mov	r3, r9
 8006dde:	2205      	movs	r2, #5
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 f9c5 	bl	8007170 <__multadd>
 8006de6:	4601      	mov	r1, r0
 8006de8:	4606      	mov	r6, r0
 8006dea:	4658      	mov	r0, fp
 8006dec:	f000 fbdc 	bl	80075a8 <__mcmp>
 8006df0:	2800      	cmp	r0, #0
 8006df2:	f73f adbd 	bgt.w	8006970 <_dtoa_r+0x4d0>
 8006df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df8:	9d00      	ldr	r5, [sp, #0]
 8006dfa:	ea6f 0a03 	mvn.w	sl, r3
 8006dfe:	f04f 0800 	mov.w	r8, #0
 8006e02:	4631      	mov	r1, r6
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 f991 	bl	800712c <_Bfree>
 8006e0a:	2f00      	cmp	r7, #0
 8006e0c:	f43f aeb4 	beq.w	8006b78 <_dtoa_r+0x6d8>
 8006e10:	f1b8 0f00 	cmp.w	r8, #0
 8006e14:	d005      	beq.n	8006e22 <_dtoa_r+0x982>
 8006e16:	45b8      	cmp	r8, r7
 8006e18:	d003      	beq.n	8006e22 <_dtoa_r+0x982>
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	f000 f985 	bl	800712c <_Bfree>
 8006e22:	4639      	mov	r1, r7
 8006e24:	4620      	mov	r0, r4
 8006e26:	f000 f981 	bl	800712c <_Bfree>
 8006e2a:	e6a5      	b.n	8006b78 <_dtoa_r+0x6d8>
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4637      	mov	r7, r6
 8006e30:	e7e1      	b.n	8006df6 <_dtoa_r+0x956>
 8006e32:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006e34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e38:	4637      	mov	r7, r6
 8006e3a:	e599      	b.n	8006970 <_dtoa_r+0x4d0>
 8006e3c:	9b08      	ldr	r3, [sp, #32]
 8006e3e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80fd 	beq.w	8007042 <_dtoa_r+0xba2>
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x9b8>
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	462a      	mov	r2, r5
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fb3d 	bl	80074d0 <__lshift>
 8006e56:	4607      	mov	r7, r0
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d05c      	beq.n	8006f18 <_dtoa_r+0xa78>
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	4620      	mov	r0, r4
 8006e62:	f000 f923 	bl	80070ac <_Balloc>
 8006e66:	4605      	mov	r5, r0
 8006e68:	b928      	cbnz	r0, 8006e76 <_dtoa_r+0x9d6>
 8006e6a:	4b80      	ldr	r3, [pc, #512]	; (800706c <_dtoa_r+0xbcc>)
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e72:	f7ff bb2e 	b.w	80064d2 <_dtoa_r+0x32>
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	3202      	adds	r2, #2
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	f107 010c 	add.w	r1, r7, #12
 8006e80:	300c      	adds	r0, #12
 8006e82:	f000 f905 	bl	8007090 <memcpy>
 8006e86:	2201      	movs	r2, #1
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fb20 	bl	80074d0 <__lshift>
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	9301      	str	r3, [sp, #4]
 8006e96:	9b00      	ldr	r3, [sp, #0]
 8006e98:	444b      	add	r3, r9
 8006e9a:	9307      	str	r3, [sp, #28]
 8006e9c:	9b02      	ldr	r3, [sp, #8]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	46b8      	mov	r8, r7
 8006ea4:	9306      	str	r3, [sp, #24]
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	9b01      	ldr	r3, [sp, #4]
 8006eaa:	4631      	mov	r1, r6
 8006eac:	3b01      	subs	r3, #1
 8006eae:	4658      	mov	r0, fp
 8006eb0:	9302      	str	r3, [sp, #8]
 8006eb2:	f7ff fa67 	bl	8006384 <quorem>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	3330      	adds	r3, #48	; 0x30
 8006eba:	9004      	str	r0, [sp, #16]
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	4658      	mov	r0, fp
 8006ec0:	9308      	str	r3, [sp, #32]
 8006ec2:	f000 fb71 	bl	80075a8 <__mcmp>
 8006ec6:	463a      	mov	r2, r7
 8006ec8:	4681      	mov	r9, r0
 8006eca:	4631      	mov	r1, r6
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f000 fb87 	bl	80075e0 <__mdiff>
 8006ed2:	68c2      	ldr	r2, [r0, #12]
 8006ed4:	9b08      	ldr	r3, [sp, #32]
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	bb02      	cbnz	r2, 8006f1c <_dtoa_r+0xa7c>
 8006eda:	4601      	mov	r1, r0
 8006edc:	4658      	mov	r0, fp
 8006ede:	f000 fb63 	bl	80075a8 <__mcmp>
 8006ee2:	9b08      	ldr	r3, [sp, #32]
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	4620      	mov	r0, r4
 8006eea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006eee:	f000 f91d 	bl	800712c <_Bfree>
 8006ef2:	9b05      	ldr	r3, [sp, #20]
 8006ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ef6:	9d01      	ldr	r5, [sp, #4]
 8006ef8:	ea43 0102 	orr.w	r1, r3, r2
 8006efc:	9b06      	ldr	r3, [sp, #24]
 8006efe:	430b      	orrs	r3, r1
 8006f00:	9b08      	ldr	r3, [sp, #32]
 8006f02:	d10d      	bne.n	8006f20 <_dtoa_r+0xa80>
 8006f04:	2b39      	cmp	r3, #57	; 0x39
 8006f06:	d029      	beq.n	8006f5c <_dtoa_r+0xabc>
 8006f08:	f1b9 0f00 	cmp.w	r9, #0
 8006f0c:	dd01      	ble.n	8006f12 <_dtoa_r+0xa72>
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	3331      	adds	r3, #49	; 0x31
 8006f12:	9a02      	ldr	r2, [sp, #8]
 8006f14:	7013      	strb	r3, [r2, #0]
 8006f16:	e774      	b.n	8006e02 <_dtoa_r+0x962>
 8006f18:	4638      	mov	r0, r7
 8006f1a:	e7b9      	b.n	8006e90 <_dtoa_r+0x9f0>
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	e7e2      	b.n	8006ee6 <_dtoa_r+0xa46>
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	db06      	blt.n	8006f34 <_dtoa_r+0xa94>
 8006f26:	9905      	ldr	r1, [sp, #20]
 8006f28:	ea41 0909 	orr.w	r9, r1, r9
 8006f2c:	9906      	ldr	r1, [sp, #24]
 8006f2e:	ea59 0101 	orrs.w	r1, r9, r1
 8006f32:	d120      	bne.n	8006f76 <_dtoa_r+0xad6>
 8006f34:	2a00      	cmp	r2, #0
 8006f36:	ddec      	ble.n	8006f12 <_dtoa_r+0xa72>
 8006f38:	4659      	mov	r1, fp
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	f000 fac6 	bl	80074d0 <__lshift>
 8006f44:	4631      	mov	r1, r6
 8006f46:	4683      	mov	fp, r0
 8006f48:	f000 fb2e 	bl	80075a8 <__mcmp>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	dc02      	bgt.n	8006f58 <_dtoa_r+0xab8>
 8006f52:	d1de      	bne.n	8006f12 <_dtoa_r+0xa72>
 8006f54:	07da      	lsls	r2, r3, #31
 8006f56:	d5dc      	bpl.n	8006f12 <_dtoa_r+0xa72>
 8006f58:	2b39      	cmp	r3, #57	; 0x39
 8006f5a:	d1d8      	bne.n	8006f0e <_dtoa_r+0xa6e>
 8006f5c:	9a02      	ldr	r2, [sp, #8]
 8006f5e:	2339      	movs	r3, #57	; 0x39
 8006f60:	7013      	strb	r3, [r2, #0]
 8006f62:	462b      	mov	r3, r5
 8006f64:	461d      	mov	r5, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006f6c:	2a39      	cmp	r2, #57	; 0x39
 8006f6e:	d050      	beq.n	8007012 <_dtoa_r+0xb72>
 8006f70:	3201      	adds	r2, #1
 8006f72:	701a      	strb	r2, [r3, #0]
 8006f74:	e745      	b.n	8006e02 <_dtoa_r+0x962>
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	dd03      	ble.n	8006f82 <_dtoa_r+0xae2>
 8006f7a:	2b39      	cmp	r3, #57	; 0x39
 8006f7c:	d0ee      	beq.n	8006f5c <_dtoa_r+0xabc>
 8006f7e:	3301      	adds	r3, #1
 8006f80:	e7c7      	b.n	8006f12 <_dtoa_r+0xa72>
 8006f82:	9a01      	ldr	r2, [sp, #4]
 8006f84:	9907      	ldr	r1, [sp, #28]
 8006f86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f8a:	428a      	cmp	r2, r1
 8006f8c:	d02a      	beq.n	8006fe4 <_dtoa_r+0xb44>
 8006f8e:	4659      	mov	r1, fp
 8006f90:	2300      	movs	r3, #0
 8006f92:	220a      	movs	r2, #10
 8006f94:	4620      	mov	r0, r4
 8006f96:	f000 f8eb 	bl	8007170 <__multadd>
 8006f9a:	45b8      	cmp	r8, r7
 8006f9c:	4683      	mov	fp, r0
 8006f9e:	f04f 0300 	mov.w	r3, #0
 8006fa2:	f04f 020a 	mov.w	r2, #10
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	4620      	mov	r0, r4
 8006faa:	d107      	bne.n	8006fbc <_dtoa_r+0xb1c>
 8006fac:	f000 f8e0 	bl	8007170 <__multadd>
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	4607      	mov	r7, r0
 8006fb4:	9b01      	ldr	r3, [sp, #4]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	9301      	str	r3, [sp, #4]
 8006fba:	e775      	b.n	8006ea8 <_dtoa_r+0xa08>
 8006fbc:	f000 f8d8 	bl	8007170 <__multadd>
 8006fc0:	4639      	mov	r1, r7
 8006fc2:	4680      	mov	r8, r0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	220a      	movs	r2, #10
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f000 f8d1 	bl	8007170 <__multadd>
 8006fce:	4607      	mov	r7, r0
 8006fd0:	e7f0      	b.n	8006fb4 <_dtoa_r+0xb14>
 8006fd2:	f1b9 0f00 	cmp.w	r9, #0
 8006fd6:	9a00      	ldr	r2, [sp, #0]
 8006fd8:	bfcc      	ite	gt
 8006fda:	464d      	movgt	r5, r9
 8006fdc:	2501      	movle	r5, #1
 8006fde:	4415      	add	r5, r2
 8006fe0:	f04f 0800 	mov.w	r8, #0
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4620      	mov	r0, r4
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	f000 fa70 	bl	80074d0 <__lshift>
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4683      	mov	fp, r0
 8006ff4:	f000 fad8 	bl	80075a8 <__mcmp>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	dcb2      	bgt.n	8006f62 <_dtoa_r+0xac2>
 8006ffc:	d102      	bne.n	8007004 <_dtoa_r+0xb64>
 8006ffe:	9b01      	ldr	r3, [sp, #4]
 8007000:	07db      	lsls	r3, r3, #31
 8007002:	d4ae      	bmi.n	8006f62 <_dtoa_r+0xac2>
 8007004:	462b      	mov	r3, r5
 8007006:	461d      	mov	r5, r3
 8007008:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800700c:	2a30      	cmp	r2, #48	; 0x30
 800700e:	d0fa      	beq.n	8007006 <_dtoa_r+0xb66>
 8007010:	e6f7      	b.n	8006e02 <_dtoa_r+0x962>
 8007012:	9a00      	ldr	r2, [sp, #0]
 8007014:	429a      	cmp	r2, r3
 8007016:	d1a5      	bne.n	8006f64 <_dtoa_r+0xac4>
 8007018:	f10a 0a01 	add.w	sl, sl, #1
 800701c:	2331      	movs	r3, #49	; 0x31
 800701e:	e779      	b.n	8006f14 <_dtoa_r+0xa74>
 8007020:	4b13      	ldr	r3, [pc, #76]	; (8007070 <_dtoa_r+0xbd0>)
 8007022:	f7ff baaf 	b.w	8006584 <_dtoa_r+0xe4>
 8007026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007028:	2b00      	cmp	r3, #0
 800702a:	f47f aa86 	bne.w	800653a <_dtoa_r+0x9a>
 800702e:	4b11      	ldr	r3, [pc, #68]	; (8007074 <_dtoa_r+0xbd4>)
 8007030:	f7ff baa8 	b.w	8006584 <_dtoa_r+0xe4>
 8007034:	f1b9 0f00 	cmp.w	r9, #0
 8007038:	dc03      	bgt.n	8007042 <_dtoa_r+0xba2>
 800703a:	9b05      	ldr	r3, [sp, #20]
 800703c:	2b02      	cmp	r3, #2
 800703e:	f73f aec9 	bgt.w	8006dd4 <_dtoa_r+0x934>
 8007042:	9d00      	ldr	r5, [sp, #0]
 8007044:	4631      	mov	r1, r6
 8007046:	4658      	mov	r0, fp
 8007048:	f7ff f99c 	bl	8006384 <quorem>
 800704c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007050:	f805 3b01 	strb.w	r3, [r5], #1
 8007054:	9a00      	ldr	r2, [sp, #0]
 8007056:	1aaa      	subs	r2, r5, r2
 8007058:	4591      	cmp	r9, r2
 800705a:	ddba      	ble.n	8006fd2 <_dtoa_r+0xb32>
 800705c:	4659      	mov	r1, fp
 800705e:	2300      	movs	r3, #0
 8007060:	220a      	movs	r2, #10
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f884 	bl	8007170 <__multadd>
 8007068:	4683      	mov	fp, r0
 800706a:	e7eb      	b.n	8007044 <_dtoa_r+0xba4>
 800706c:	08008563 	.word	0x08008563
 8007070:	080084bc 	.word	0x080084bc
 8007074:	080084e0 	.word	0x080084e0

08007078 <_localeconv_r>:
 8007078:	4800      	ldr	r0, [pc, #0]	; (800707c <_localeconv_r+0x4>)
 800707a:	4770      	bx	lr
 800707c:	20000160 	.word	0x20000160

08007080 <malloc>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <malloc+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f000 bbef 	b.w	8007868 <_malloc_r>
 800708a:	bf00      	nop
 800708c:	2000000c 	.word	0x2000000c

08007090 <memcpy>:
 8007090:	440a      	add	r2, r1
 8007092:	4291      	cmp	r1, r2
 8007094:	f100 33ff 	add.w	r3, r0, #4294967295
 8007098:	d100      	bne.n	800709c <memcpy+0xc>
 800709a:	4770      	bx	lr
 800709c:	b510      	push	{r4, lr}
 800709e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a6:	4291      	cmp	r1, r2
 80070a8:	d1f9      	bne.n	800709e <memcpy+0xe>
 80070aa:	bd10      	pop	{r4, pc}

080070ac <_Balloc>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070b0:	4604      	mov	r4, r0
 80070b2:	460d      	mov	r5, r1
 80070b4:	b976      	cbnz	r6, 80070d4 <_Balloc+0x28>
 80070b6:	2010      	movs	r0, #16
 80070b8:	f7ff ffe2 	bl	8007080 <malloc>
 80070bc:	4602      	mov	r2, r0
 80070be:	6260      	str	r0, [r4, #36]	; 0x24
 80070c0:	b920      	cbnz	r0, 80070cc <_Balloc+0x20>
 80070c2:	4b18      	ldr	r3, [pc, #96]	; (8007124 <_Balloc+0x78>)
 80070c4:	4818      	ldr	r0, [pc, #96]	; (8007128 <_Balloc+0x7c>)
 80070c6:	2166      	movs	r1, #102	; 0x66
 80070c8:	f000 fc38 	bl	800793c <__assert_func>
 80070cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070d0:	6006      	str	r6, [r0, #0]
 80070d2:	60c6      	str	r6, [r0, #12]
 80070d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80070d6:	68f3      	ldr	r3, [r6, #12]
 80070d8:	b183      	cbz	r3, 80070fc <_Balloc+0x50>
 80070da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070e2:	b9b8      	cbnz	r0, 8007114 <_Balloc+0x68>
 80070e4:	2101      	movs	r1, #1
 80070e6:	fa01 f605 	lsl.w	r6, r1, r5
 80070ea:	1d72      	adds	r2, r6, #5
 80070ec:	0092      	lsls	r2, r2, #2
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 fb5a 	bl	80077a8 <_calloc_r>
 80070f4:	b160      	cbz	r0, 8007110 <_Balloc+0x64>
 80070f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070fa:	e00e      	b.n	800711a <_Balloc+0x6e>
 80070fc:	2221      	movs	r2, #33	; 0x21
 80070fe:	2104      	movs	r1, #4
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fb51 	bl	80077a8 <_calloc_r>
 8007106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007108:	60f0      	str	r0, [r6, #12]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e4      	bne.n	80070da <_Balloc+0x2e>
 8007110:	2000      	movs	r0, #0
 8007112:	bd70      	pop	{r4, r5, r6, pc}
 8007114:	6802      	ldr	r2, [r0, #0]
 8007116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800711a:	2300      	movs	r3, #0
 800711c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007120:	e7f7      	b.n	8007112 <_Balloc+0x66>
 8007122:	bf00      	nop
 8007124:	080084ed 	.word	0x080084ed
 8007128:	08008574 	.word	0x08008574

0800712c <_Bfree>:
 800712c:	b570      	push	{r4, r5, r6, lr}
 800712e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007130:	4605      	mov	r5, r0
 8007132:	460c      	mov	r4, r1
 8007134:	b976      	cbnz	r6, 8007154 <_Bfree+0x28>
 8007136:	2010      	movs	r0, #16
 8007138:	f7ff ffa2 	bl	8007080 <malloc>
 800713c:	4602      	mov	r2, r0
 800713e:	6268      	str	r0, [r5, #36]	; 0x24
 8007140:	b920      	cbnz	r0, 800714c <_Bfree+0x20>
 8007142:	4b09      	ldr	r3, [pc, #36]	; (8007168 <_Bfree+0x3c>)
 8007144:	4809      	ldr	r0, [pc, #36]	; (800716c <_Bfree+0x40>)
 8007146:	218a      	movs	r1, #138	; 0x8a
 8007148:	f000 fbf8 	bl	800793c <__assert_func>
 800714c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007150:	6006      	str	r6, [r0, #0]
 8007152:	60c6      	str	r6, [r0, #12]
 8007154:	b13c      	cbz	r4, 8007166 <_Bfree+0x3a>
 8007156:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007160:	6021      	str	r1, [r4, #0]
 8007162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	080084ed 	.word	0x080084ed
 800716c:	08008574 	.word	0x08008574

08007170 <__multadd>:
 8007170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	690e      	ldr	r6, [r1, #16]
 8007176:	4607      	mov	r7, r0
 8007178:	4698      	mov	r8, r3
 800717a:	460c      	mov	r4, r1
 800717c:	f101 0014 	add.w	r0, r1, #20
 8007180:	2300      	movs	r3, #0
 8007182:	6805      	ldr	r5, [r0, #0]
 8007184:	b2a9      	uxth	r1, r5
 8007186:	fb02 8101 	mla	r1, r2, r1, r8
 800718a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800718e:	0c2d      	lsrs	r5, r5, #16
 8007190:	fb02 c505 	mla	r5, r2, r5, ip
 8007194:	b289      	uxth	r1, r1
 8007196:	3301      	adds	r3, #1
 8007198:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800719c:	429e      	cmp	r6, r3
 800719e:	f840 1b04 	str.w	r1, [r0], #4
 80071a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80071a6:	dcec      	bgt.n	8007182 <__multadd+0x12>
 80071a8:	f1b8 0f00 	cmp.w	r8, #0
 80071ac:	d022      	beq.n	80071f4 <__multadd+0x84>
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	42b3      	cmp	r3, r6
 80071b2:	dc19      	bgt.n	80071e8 <__multadd+0x78>
 80071b4:	6861      	ldr	r1, [r4, #4]
 80071b6:	4638      	mov	r0, r7
 80071b8:	3101      	adds	r1, #1
 80071ba:	f7ff ff77 	bl	80070ac <_Balloc>
 80071be:	4605      	mov	r5, r0
 80071c0:	b928      	cbnz	r0, 80071ce <__multadd+0x5e>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <__multadd+0x8c>)
 80071c6:	480e      	ldr	r0, [pc, #56]	; (8007200 <__multadd+0x90>)
 80071c8:	21b5      	movs	r1, #181	; 0xb5
 80071ca:	f000 fbb7 	bl	800793c <__assert_func>
 80071ce:	6922      	ldr	r2, [r4, #16]
 80071d0:	3202      	adds	r2, #2
 80071d2:	f104 010c 	add.w	r1, r4, #12
 80071d6:	0092      	lsls	r2, r2, #2
 80071d8:	300c      	adds	r0, #12
 80071da:	f7ff ff59 	bl	8007090 <memcpy>
 80071de:	4621      	mov	r1, r4
 80071e0:	4638      	mov	r0, r7
 80071e2:	f7ff ffa3 	bl	800712c <_Bfree>
 80071e6:	462c      	mov	r4, r5
 80071e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80071ec:	3601      	adds	r6, #1
 80071ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80071f2:	6126      	str	r6, [r4, #16]
 80071f4:	4620      	mov	r0, r4
 80071f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fa:	bf00      	nop
 80071fc:	08008563 	.word	0x08008563
 8007200:	08008574 	.word	0x08008574

08007204 <__hi0bits>:
 8007204:	0c03      	lsrs	r3, r0, #16
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	b9d3      	cbnz	r3, 8007240 <__hi0bits+0x3c>
 800720a:	0400      	lsls	r0, r0, #16
 800720c:	2310      	movs	r3, #16
 800720e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007212:	bf04      	itt	eq
 8007214:	0200      	lsleq	r0, r0, #8
 8007216:	3308      	addeq	r3, #8
 8007218:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800721c:	bf04      	itt	eq
 800721e:	0100      	lsleq	r0, r0, #4
 8007220:	3304      	addeq	r3, #4
 8007222:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007226:	bf04      	itt	eq
 8007228:	0080      	lsleq	r0, r0, #2
 800722a:	3302      	addeq	r3, #2
 800722c:	2800      	cmp	r0, #0
 800722e:	db05      	blt.n	800723c <__hi0bits+0x38>
 8007230:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007234:	f103 0301 	add.w	r3, r3, #1
 8007238:	bf08      	it	eq
 800723a:	2320      	moveq	r3, #32
 800723c:	4618      	mov	r0, r3
 800723e:	4770      	bx	lr
 8007240:	2300      	movs	r3, #0
 8007242:	e7e4      	b.n	800720e <__hi0bits+0xa>

08007244 <__lo0bits>:
 8007244:	6803      	ldr	r3, [r0, #0]
 8007246:	f013 0207 	ands.w	r2, r3, #7
 800724a:	4601      	mov	r1, r0
 800724c:	d00b      	beq.n	8007266 <__lo0bits+0x22>
 800724e:	07da      	lsls	r2, r3, #31
 8007250:	d424      	bmi.n	800729c <__lo0bits+0x58>
 8007252:	0798      	lsls	r0, r3, #30
 8007254:	bf49      	itett	mi
 8007256:	085b      	lsrmi	r3, r3, #1
 8007258:	089b      	lsrpl	r3, r3, #2
 800725a:	2001      	movmi	r0, #1
 800725c:	600b      	strmi	r3, [r1, #0]
 800725e:	bf5c      	itt	pl
 8007260:	600b      	strpl	r3, [r1, #0]
 8007262:	2002      	movpl	r0, #2
 8007264:	4770      	bx	lr
 8007266:	b298      	uxth	r0, r3
 8007268:	b9b0      	cbnz	r0, 8007298 <__lo0bits+0x54>
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	2010      	movs	r0, #16
 800726e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007272:	bf04      	itt	eq
 8007274:	0a1b      	lsreq	r3, r3, #8
 8007276:	3008      	addeq	r0, #8
 8007278:	071a      	lsls	r2, r3, #28
 800727a:	bf04      	itt	eq
 800727c:	091b      	lsreq	r3, r3, #4
 800727e:	3004      	addeq	r0, #4
 8007280:	079a      	lsls	r2, r3, #30
 8007282:	bf04      	itt	eq
 8007284:	089b      	lsreq	r3, r3, #2
 8007286:	3002      	addeq	r0, #2
 8007288:	07da      	lsls	r2, r3, #31
 800728a:	d403      	bmi.n	8007294 <__lo0bits+0x50>
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	f100 0001 	add.w	r0, r0, #1
 8007292:	d005      	beq.n	80072a0 <__lo0bits+0x5c>
 8007294:	600b      	str	r3, [r1, #0]
 8007296:	4770      	bx	lr
 8007298:	4610      	mov	r0, r2
 800729a:	e7e8      	b.n	800726e <__lo0bits+0x2a>
 800729c:	2000      	movs	r0, #0
 800729e:	4770      	bx	lr
 80072a0:	2020      	movs	r0, #32
 80072a2:	4770      	bx	lr

080072a4 <__i2b>:
 80072a4:	b510      	push	{r4, lr}
 80072a6:	460c      	mov	r4, r1
 80072a8:	2101      	movs	r1, #1
 80072aa:	f7ff feff 	bl	80070ac <_Balloc>
 80072ae:	4602      	mov	r2, r0
 80072b0:	b928      	cbnz	r0, 80072be <__i2b+0x1a>
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <__i2b+0x24>)
 80072b4:	4805      	ldr	r0, [pc, #20]	; (80072cc <__i2b+0x28>)
 80072b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072ba:	f000 fb3f 	bl	800793c <__assert_func>
 80072be:	2301      	movs	r3, #1
 80072c0:	6144      	str	r4, [r0, #20]
 80072c2:	6103      	str	r3, [r0, #16]
 80072c4:	bd10      	pop	{r4, pc}
 80072c6:	bf00      	nop
 80072c8:	08008563 	.word	0x08008563
 80072cc:	08008574 	.word	0x08008574

080072d0 <__multiply>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	4614      	mov	r4, r2
 80072d6:	690a      	ldr	r2, [r1, #16]
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	429a      	cmp	r2, r3
 80072dc:	bfb8      	it	lt
 80072de:	460b      	movlt	r3, r1
 80072e0:	460d      	mov	r5, r1
 80072e2:	bfbc      	itt	lt
 80072e4:	4625      	movlt	r5, r4
 80072e6:	461c      	movlt	r4, r3
 80072e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80072ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072f0:	68ab      	ldr	r3, [r5, #8]
 80072f2:	6869      	ldr	r1, [r5, #4]
 80072f4:	eb0a 0709 	add.w	r7, sl, r9
 80072f8:	42bb      	cmp	r3, r7
 80072fa:	b085      	sub	sp, #20
 80072fc:	bfb8      	it	lt
 80072fe:	3101      	addlt	r1, #1
 8007300:	f7ff fed4 	bl	80070ac <_Balloc>
 8007304:	b930      	cbnz	r0, 8007314 <__multiply+0x44>
 8007306:	4602      	mov	r2, r0
 8007308:	4b42      	ldr	r3, [pc, #264]	; (8007414 <__multiply+0x144>)
 800730a:	4843      	ldr	r0, [pc, #268]	; (8007418 <__multiply+0x148>)
 800730c:	f240 115d 	movw	r1, #349	; 0x15d
 8007310:	f000 fb14 	bl	800793c <__assert_func>
 8007314:	f100 0614 	add.w	r6, r0, #20
 8007318:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800731c:	4633      	mov	r3, r6
 800731e:	2200      	movs	r2, #0
 8007320:	4543      	cmp	r3, r8
 8007322:	d31e      	bcc.n	8007362 <__multiply+0x92>
 8007324:	f105 0c14 	add.w	ip, r5, #20
 8007328:	f104 0314 	add.w	r3, r4, #20
 800732c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007330:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007334:	9202      	str	r2, [sp, #8]
 8007336:	ebac 0205 	sub.w	r2, ip, r5
 800733a:	3a15      	subs	r2, #21
 800733c:	f022 0203 	bic.w	r2, r2, #3
 8007340:	3204      	adds	r2, #4
 8007342:	f105 0115 	add.w	r1, r5, #21
 8007346:	458c      	cmp	ip, r1
 8007348:	bf38      	it	cc
 800734a:	2204      	movcc	r2, #4
 800734c:	9201      	str	r2, [sp, #4]
 800734e:	9a02      	ldr	r2, [sp, #8]
 8007350:	9303      	str	r3, [sp, #12]
 8007352:	429a      	cmp	r2, r3
 8007354:	d808      	bhi.n	8007368 <__multiply+0x98>
 8007356:	2f00      	cmp	r7, #0
 8007358:	dc55      	bgt.n	8007406 <__multiply+0x136>
 800735a:	6107      	str	r7, [r0, #16]
 800735c:	b005      	add	sp, #20
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	f843 2b04 	str.w	r2, [r3], #4
 8007366:	e7db      	b.n	8007320 <__multiply+0x50>
 8007368:	f8b3 a000 	ldrh.w	sl, [r3]
 800736c:	f1ba 0f00 	cmp.w	sl, #0
 8007370:	d020      	beq.n	80073b4 <__multiply+0xe4>
 8007372:	f105 0e14 	add.w	lr, r5, #20
 8007376:	46b1      	mov	r9, r6
 8007378:	2200      	movs	r2, #0
 800737a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800737e:	f8d9 b000 	ldr.w	fp, [r9]
 8007382:	b2a1      	uxth	r1, r4
 8007384:	fa1f fb8b 	uxth.w	fp, fp
 8007388:	fb0a b101 	mla	r1, sl, r1, fp
 800738c:	4411      	add	r1, r2
 800738e:	f8d9 2000 	ldr.w	r2, [r9]
 8007392:	0c24      	lsrs	r4, r4, #16
 8007394:	0c12      	lsrs	r2, r2, #16
 8007396:	fb0a 2404 	mla	r4, sl, r4, r2
 800739a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800739e:	b289      	uxth	r1, r1
 80073a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80073a4:	45f4      	cmp	ip, lr
 80073a6:	f849 1b04 	str.w	r1, [r9], #4
 80073aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80073ae:	d8e4      	bhi.n	800737a <__multiply+0xaa>
 80073b0:	9901      	ldr	r1, [sp, #4]
 80073b2:	5072      	str	r2, [r6, r1]
 80073b4:	9a03      	ldr	r2, [sp, #12]
 80073b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073ba:	3304      	adds	r3, #4
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	d01f      	beq.n	8007402 <__multiply+0x132>
 80073c2:	6834      	ldr	r4, [r6, #0]
 80073c4:	f105 0114 	add.w	r1, r5, #20
 80073c8:	46b6      	mov	lr, r6
 80073ca:	f04f 0a00 	mov.w	sl, #0
 80073ce:	880a      	ldrh	r2, [r1, #0]
 80073d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80073d4:	fb09 b202 	mla	r2, r9, r2, fp
 80073d8:	4492      	add	sl, r2
 80073da:	b2a4      	uxth	r4, r4
 80073dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80073e0:	f84e 4b04 	str.w	r4, [lr], #4
 80073e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80073e8:	f8be 2000 	ldrh.w	r2, [lr]
 80073ec:	0c24      	lsrs	r4, r4, #16
 80073ee:	fb09 2404 	mla	r4, r9, r4, r2
 80073f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80073f6:	458c      	cmp	ip, r1
 80073f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80073fc:	d8e7      	bhi.n	80073ce <__multiply+0xfe>
 80073fe:	9a01      	ldr	r2, [sp, #4]
 8007400:	50b4      	str	r4, [r6, r2]
 8007402:	3604      	adds	r6, #4
 8007404:	e7a3      	b.n	800734e <__multiply+0x7e>
 8007406:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1a5      	bne.n	800735a <__multiply+0x8a>
 800740e:	3f01      	subs	r7, #1
 8007410:	e7a1      	b.n	8007356 <__multiply+0x86>
 8007412:	bf00      	nop
 8007414:	08008563 	.word	0x08008563
 8007418:	08008574 	.word	0x08008574

0800741c <__pow5mult>:
 800741c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007420:	4615      	mov	r5, r2
 8007422:	f012 0203 	ands.w	r2, r2, #3
 8007426:	4606      	mov	r6, r0
 8007428:	460f      	mov	r7, r1
 800742a:	d007      	beq.n	800743c <__pow5mult+0x20>
 800742c:	4c25      	ldr	r4, [pc, #148]	; (80074c4 <__pow5mult+0xa8>)
 800742e:	3a01      	subs	r2, #1
 8007430:	2300      	movs	r3, #0
 8007432:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007436:	f7ff fe9b 	bl	8007170 <__multadd>
 800743a:	4607      	mov	r7, r0
 800743c:	10ad      	asrs	r5, r5, #2
 800743e:	d03d      	beq.n	80074bc <__pow5mult+0xa0>
 8007440:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007442:	b97c      	cbnz	r4, 8007464 <__pow5mult+0x48>
 8007444:	2010      	movs	r0, #16
 8007446:	f7ff fe1b 	bl	8007080 <malloc>
 800744a:	4602      	mov	r2, r0
 800744c:	6270      	str	r0, [r6, #36]	; 0x24
 800744e:	b928      	cbnz	r0, 800745c <__pow5mult+0x40>
 8007450:	4b1d      	ldr	r3, [pc, #116]	; (80074c8 <__pow5mult+0xac>)
 8007452:	481e      	ldr	r0, [pc, #120]	; (80074cc <__pow5mult+0xb0>)
 8007454:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007458:	f000 fa70 	bl	800793c <__assert_func>
 800745c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007460:	6004      	str	r4, [r0, #0]
 8007462:	60c4      	str	r4, [r0, #12]
 8007464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800746c:	b94c      	cbnz	r4, 8007482 <__pow5mult+0x66>
 800746e:	f240 2171 	movw	r1, #625	; 0x271
 8007472:	4630      	mov	r0, r6
 8007474:	f7ff ff16 	bl	80072a4 <__i2b>
 8007478:	2300      	movs	r3, #0
 800747a:	f8c8 0008 	str.w	r0, [r8, #8]
 800747e:	4604      	mov	r4, r0
 8007480:	6003      	str	r3, [r0, #0]
 8007482:	f04f 0900 	mov.w	r9, #0
 8007486:	07eb      	lsls	r3, r5, #31
 8007488:	d50a      	bpl.n	80074a0 <__pow5mult+0x84>
 800748a:	4639      	mov	r1, r7
 800748c:	4622      	mov	r2, r4
 800748e:	4630      	mov	r0, r6
 8007490:	f7ff ff1e 	bl	80072d0 <__multiply>
 8007494:	4639      	mov	r1, r7
 8007496:	4680      	mov	r8, r0
 8007498:	4630      	mov	r0, r6
 800749a:	f7ff fe47 	bl	800712c <_Bfree>
 800749e:	4647      	mov	r7, r8
 80074a0:	106d      	asrs	r5, r5, #1
 80074a2:	d00b      	beq.n	80074bc <__pow5mult+0xa0>
 80074a4:	6820      	ldr	r0, [r4, #0]
 80074a6:	b938      	cbnz	r0, 80074b8 <__pow5mult+0x9c>
 80074a8:	4622      	mov	r2, r4
 80074aa:	4621      	mov	r1, r4
 80074ac:	4630      	mov	r0, r6
 80074ae:	f7ff ff0f 	bl	80072d0 <__multiply>
 80074b2:	6020      	str	r0, [r4, #0]
 80074b4:	f8c0 9000 	str.w	r9, [r0]
 80074b8:	4604      	mov	r4, r0
 80074ba:	e7e4      	b.n	8007486 <__pow5mult+0x6a>
 80074bc:	4638      	mov	r0, r7
 80074be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074c2:	bf00      	nop
 80074c4:	080086c8 	.word	0x080086c8
 80074c8:	080084ed 	.word	0x080084ed
 80074cc:	08008574 	.word	0x08008574

080074d0 <__lshift>:
 80074d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074d4:	460c      	mov	r4, r1
 80074d6:	6849      	ldr	r1, [r1, #4]
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074de:	68a3      	ldr	r3, [r4, #8]
 80074e0:	4607      	mov	r7, r0
 80074e2:	4691      	mov	r9, r2
 80074e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074e8:	f108 0601 	add.w	r6, r8, #1
 80074ec:	42b3      	cmp	r3, r6
 80074ee:	db0b      	blt.n	8007508 <__lshift+0x38>
 80074f0:	4638      	mov	r0, r7
 80074f2:	f7ff fddb 	bl	80070ac <_Balloc>
 80074f6:	4605      	mov	r5, r0
 80074f8:	b948      	cbnz	r0, 800750e <__lshift+0x3e>
 80074fa:	4602      	mov	r2, r0
 80074fc:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <__lshift+0xd0>)
 80074fe:	4829      	ldr	r0, [pc, #164]	; (80075a4 <__lshift+0xd4>)
 8007500:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007504:	f000 fa1a 	bl	800793c <__assert_func>
 8007508:	3101      	adds	r1, #1
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	e7ee      	b.n	80074ec <__lshift+0x1c>
 800750e:	2300      	movs	r3, #0
 8007510:	f100 0114 	add.w	r1, r0, #20
 8007514:	f100 0210 	add.w	r2, r0, #16
 8007518:	4618      	mov	r0, r3
 800751a:	4553      	cmp	r3, sl
 800751c:	db33      	blt.n	8007586 <__lshift+0xb6>
 800751e:	6920      	ldr	r0, [r4, #16]
 8007520:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007524:	f104 0314 	add.w	r3, r4, #20
 8007528:	f019 091f 	ands.w	r9, r9, #31
 800752c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007530:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007534:	d02b      	beq.n	800758e <__lshift+0xbe>
 8007536:	f1c9 0e20 	rsb	lr, r9, #32
 800753a:	468a      	mov	sl, r1
 800753c:	2200      	movs	r2, #0
 800753e:	6818      	ldr	r0, [r3, #0]
 8007540:	fa00 f009 	lsl.w	r0, r0, r9
 8007544:	4302      	orrs	r2, r0
 8007546:	f84a 2b04 	str.w	r2, [sl], #4
 800754a:	f853 2b04 	ldr.w	r2, [r3], #4
 800754e:	459c      	cmp	ip, r3
 8007550:	fa22 f20e 	lsr.w	r2, r2, lr
 8007554:	d8f3      	bhi.n	800753e <__lshift+0x6e>
 8007556:	ebac 0304 	sub.w	r3, ip, r4
 800755a:	3b15      	subs	r3, #21
 800755c:	f023 0303 	bic.w	r3, r3, #3
 8007560:	3304      	adds	r3, #4
 8007562:	f104 0015 	add.w	r0, r4, #21
 8007566:	4584      	cmp	ip, r0
 8007568:	bf38      	it	cc
 800756a:	2304      	movcc	r3, #4
 800756c:	50ca      	str	r2, [r1, r3]
 800756e:	b10a      	cbz	r2, 8007574 <__lshift+0xa4>
 8007570:	f108 0602 	add.w	r6, r8, #2
 8007574:	3e01      	subs	r6, #1
 8007576:	4638      	mov	r0, r7
 8007578:	612e      	str	r6, [r5, #16]
 800757a:	4621      	mov	r1, r4
 800757c:	f7ff fdd6 	bl	800712c <_Bfree>
 8007580:	4628      	mov	r0, r5
 8007582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007586:	f842 0f04 	str.w	r0, [r2, #4]!
 800758a:	3301      	adds	r3, #1
 800758c:	e7c5      	b.n	800751a <__lshift+0x4a>
 800758e:	3904      	subs	r1, #4
 8007590:	f853 2b04 	ldr.w	r2, [r3], #4
 8007594:	f841 2f04 	str.w	r2, [r1, #4]!
 8007598:	459c      	cmp	ip, r3
 800759a:	d8f9      	bhi.n	8007590 <__lshift+0xc0>
 800759c:	e7ea      	b.n	8007574 <__lshift+0xa4>
 800759e:	bf00      	nop
 80075a0:	08008563 	.word	0x08008563
 80075a4:	08008574 	.word	0x08008574

080075a8 <__mcmp>:
 80075a8:	b530      	push	{r4, r5, lr}
 80075aa:	6902      	ldr	r2, [r0, #16]
 80075ac:	690c      	ldr	r4, [r1, #16]
 80075ae:	1b12      	subs	r2, r2, r4
 80075b0:	d10e      	bne.n	80075d0 <__mcmp+0x28>
 80075b2:	f100 0314 	add.w	r3, r0, #20
 80075b6:	3114      	adds	r1, #20
 80075b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80075c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80075c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80075c8:	42a5      	cmp	r5, r4
 80075ca:	d003      	beq.n	80075d4 <__mcmp+0x2c>
 80075cc:	d305      	bcc.n	80075da <__mcmp+0x32>
 80075ce:	2201      	movs	r2, #1
 80075d0:	4610      	mov	r0, r2
 80075d2:	bd30      	pop	{r4, r5, pc}
 80075d4:	4283      	cmp	r3, r0
 80075d6:	d3f3      	bcc.n	80075c0 <__mcmp+0x18>
 80075d8:	e7fa      	b.n	80075d0 <__mcmp+0x28>
 80075da:	f04f 32ff 	mov.w	r2, #4294967295
 80075de:	e7f7      	b.n	80075d0 <__mcmp+0x28>

080075e0 <__mdiff>:
 80075e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e4:	460c      	mov	r4, r1
 80075e6:	4606      	mov	r6, r0
 80075e8:	4611      	mov	r1, r2
 80075ea:	4620      	mov	r0, r4
 80075ec:	4617      	mov	r7, r2
 80075ee:	f7ff ffdb 	bl	80075a8 <__mcmp>
 80075f2:	1e05      	subs	r5, r0, #0
 80075f4:	d110      	bne.n	8007618 <__mdiff+0x38>
 80075f6:	4629      	mov	r1, r5
 80075f8:	4630      	mov	r0, r6
 80075fa:	f7ff fd57 	bl	80070ac <_Balloc>
 80075fe:	b930      	cbnz	r0, 800760e <__mdiff+0x2e>
 8007600:	4b39      	ldr	r3, [pc, #228]	; (80076e8 <__mdiff+0x108>)
 8007602:	4602      	mov	r2, r0
 8007604:	f240 2132 	movw	r1, #562	; 0x232
 8007608:	4838      	ldr	r0, [pc, #224]	; (80076ec <__mdiff+0x10c>)
 800760a:	f000 f997 	bl	800793c <__assert_func>
 800760e:	2301      	movs	r3, #1
 8007610:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007614:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007618:	bfa4      	itt	ge
 800761a:	463b      	movge	r3, r7
 800761c:	4627      	movge	r7, r4
 800761e:	4630      	mov	r0, r6
 8007620:	6879      	ldr	r1, [r7, #4]
 8007622:	bfa6      	itte	ge
 8007624:	461c      	movge	r4, r3
 8007626:	2500      	movge	r5, #0
 8007628:	2501      	movlt	r5, #1
 800762a:	f7ff fd3f 	bl	80070ac <_Balloc>
 800762e:	b920      	cbnz	r0, 800763a <__mdiff+0x5a>
 8007630:	4b2d      	ldr	r3, [pc, #180]	; (80076e8 <__mdiff+0x108>)
 8007632:	4602      	mov	r2, r0
 8007634:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007638:	e7e6      	b.n	8007608 <__mdiff+0x28>
 800763a:	693e      	ldr	r6, [r7, #16]
 800763c:	60c5      	str	r5, [r0, #12]
 800763e:	6925      	ldr	r5, [r4, #16]
 8007640:	f107 0114 	add.w	r1, r7, #20
 8007644:	f104 0914 	add.w	r9, r4, #20
 8007648:	f100 0e14 	add.w	lr, r0, #20
 800764c:	f107 0210 	add.w	r2, r7, #16
 8007650:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007654:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007658:	46f2      	mov	sl, lr
 800765a:	2700      	movs	r7, #0
 800765c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007664:	fa1f f883 	uxth.w	r8, r3
 8007668:	fa17 f78b 	uxtah	r7, r7, fp
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	eba7 0808 	sub.w	r8, r7, r8
 8007672:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007676:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800767a:	fa1f f888 	uxth.w	r8, r8
 800767e:	141f      	asrs	r7, r3, #16
 8007680:	454d      	cmp	r5, r9
 8007682:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007686:	f84a 3b04 	str.w	r3, [sl], #4
 800768a:	d8e7      	bhi.n	800765c <__mdiff+0x7c>
 800768c:	1b2b      	subs	r3, r5, r4
 800768e:	3b15      	subs	r3, #21
 8007690:	f023 0303 	bic.w	r3, r3, #3
 8007694:	3304      	adds	r3, #4
 8007696:	3415      	adds	r4, #21
 8007698:	42a5      	cmp	r5, r4
 800769a:	bf38      	it	cc
 800769c:	2304      	movcc	r3, #4
 800769e:	4419      	add	r1, r3
 80076a0:	4473      	add	r3, lr
 80076a2:	469e      	mov	lr, r3
 80076a4:	460d      	mov	r5, r1
 80076a6:	4565      	cmp	r5, ip
 80076a8:	d30e      	bcc.n	80076c8 <__mdiff+0xe8>
 80076aa:	f10c 0203 	add.w	r2, ip, #3
 80076ae:	1a52      	subs	r2, r2, r1
 80076b0:	f022 0203 	bic.w	r2, r2, #3
 80076b4:	3903      	subs	r1, #3
 80076b6:	458c      	cmp	ip, r1
 80076b8:	bf38      	it	cc
 80076ba:	2200      	movcc	r2, #0
 80076bc:	441a      	add	r2, r3
 80076be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80076c2:	b17b      	cbz	r3, 80076e4 <__mdiff+0x104>
 80076c4:	6106      	str	r6, [r0, #16]
 80076c6:	e7a5      	b.n	8007614 <__mdiff+0x34>
 80076c8:	f855 8b04 	ldr.w	r8, [r5], #4
 80076cc:	fa17 f488 	uxtah	r4, r7, r8
 80076d0:	1422      	asrs	r2, r4, #16
 80076d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80076d6:	b2a4      	uxth	r4, r4
 80076d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80076dc:	f84e 4b04 	str.w	r4, [lr], #4
 80076e0:	1417      	asrs	r7, r2, #16
 80076e2:	e7e0      	b.n	80076a6 <__mdiff+0xc6>
 80076e4:	3e01      	subs	r6, #1
 80076e6:	e7ea      	b.n	80076be <__mdiff+0xde>
 80076e8:	08008563 	.word	0x08008563
 80076ec:	08008574 	.word	0x08008574

080076f0 <__d2b>:
 80076f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076f4:	4689      	mov	r9, r1
 80076f6:	2101      	movs	r1, #1
 80076f8:	ec57 6b10 	vmov	r6, r7, d0
 80076fc:	4690      	mov	r8, r2
 80076fe:	f7ff fcd5 	bl	80070ac <_Balloc>
 8007702:	4604      	mov	r4, r0
 8007704:	b930      	cbnz	r0, 8007714 <__d2b+0x24>
 8007706:	4602      	mov	r2, r0
 8007708:	4b25      	ldr	r3, [pc, #148]	; (80077a0 <__d2b+0xb0>)
 800770a:	4826      	ldr	r0, [pc, #152]	; (80077a4 <__d2b+0xb4>)
 800770c:	f240 310a 	movw	r1, #778	; 0x30a
 8007710:	f000 f914 	bl	800793c <__assert_func>
 8007714:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800771c:	bb35      	cbnz	r5, 800776c <__d2b+0x7c>
 800771e:	2e00      	cmp	r6, #0
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	d028      	beq.n	8007776 <__d2b+0x86>
 8007724:	4668      	mov	r0, sp
 8007726:	9600      	str	r6, [sp, #0]
 8007728:	f7ff fd8c 	bl	8007244 <__lo0bits>
 800772c:	9900      	ldr	r1, [sp, #0]
 800772e:	b300      	cbz	r0, 8007772 <__d2b+0x82>
 8007730:	9a01      	ldr	r2, [sp, #4]
 8007732:	f1c0 0320 	rsb	r3, r0, #32
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	430b      	orrs	r3, r1
 800773c:	40c2      	lsrs	r2, r0
 800773e:	6163      	str	r3, [r4, #20]
 8007740:	9201      	str	r2, [sp, #4]
 8007742:	9b01      	ldr	r3, [sp, #4]
 8007744:	61a3      	str	r3, [r4, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	bf14      	ite	ne
 800774a:	2202      	movne	r2, #2
 800774c:	2201      	moveq	r2, #1
 800774e:	6122      	str	r2, [r4, #16]
 8007750:	b1d5      	cbz	r5, 8007788 <__d2b+0x98>
 8007752:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007756:	4405      	add	r5, r0
 8007758:	f8c9 5000 	str.w	r5, [r9]
 800775c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007760:	f8c8 0000 	str.w	r0, [r8]
 8007764:	4620      	mov	r0, r4
 8007766:	b003      	add	sp, #12
 8007768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800776c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007770:	e7d5      	b.n	800771e <__d2b+0x2e>
 8007772:	6161      	str	r1, [r4, #20]
 8007774:	e7e5      	b.n	8007742 <__d2b+0x52>
 8007776:	a801      	add	r0, sp, #4
 8007778:	f7ff fd64 	bl	8007244 <__lo0bits>
 800777c:	9b01      	ldr	r3, [sp, #4]
 800777e:	6163      	str	r3, [r4, #20]
 8007780:	2201      	movs	r2, #1
 8007782:	6122      	str	r2, [r4, #16]
 8007784:	3020      	adds	r0, #32
 8007786:	e7e3      	b.n	8007750 <__d2b+0x60>
 8007788:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800778c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007790:	f8c9 0000 	str.w	r0, [r9]
 8007794:	6918      	ldr	r0, [r3, #16]
 8007796:	f7ff fd35 	bl	8007204 <__hi0bits>
 800779a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800779e:	e7df      	b.n	8007760 <__d2b+0x70>
 80077a0:	08008563 	.word	0x08008563
 80077a4:	08008574 	.word	0x08008574

080077a8 <_calloc_r>:
 80077a8:	b513      	push	{r0, r1, r4, lr}
 80077aa:	434a      	muls	r2, r1
 80077ac:	4611      	mov	r1, r2
 80077ae:	9201      	str	r2, [sp, #4]
 80077b0:	f000 f85a 	bl	8007868 <_malloc_r>
 80077b4:	4604      	mov	r4, r0
 80077b6:	b118      	cbz	r0, 80077c0 <_calloc_r+0x18>
 80077b8:	9a01      	ldr	r2, [sp, #4]
 80077ba:	2100      	movs	r1, #0
 80077bc:	f7fe f970 	bl	8005aa0 <memset>
 80077c0:	4620      	mov	r0, r4
 80077c2:	b002      	add	sp, #8
 80077c4:	bd10      	pop	{r4, pc}
	...

080077c8 <_free_r>:
 80077c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077ca:	2900      	cmp	r1, #0
 80077cc:	d048      	beq.n	8007860 <_free_r+0x98>
 80077ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d2:	9001      	str	r0, [sp, #4]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f1a1 0404 	sub.w	r4, r1, #4
 80077da:	bfb8      	it	lt
 80077dc:	18e4      	addlt	r4, r4, r3
 80077de:	f000 f8ef 	bl	80079c0 <__malloc_lock>
 80077e2:	4a20      	ldr	r2, [pc, #128]	; (8007864 <_free_r+0x9c>)
 80077e4:	9801      	ldr	r0, [sp, #4]
 80077e6:	6813      	ldr	r3, [r2, #0]
 80077e8:	4615      	mov	r5, r2
 80077ea:	b933      	cbnz	r3, 80077fa <_free_r+0x32>
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	6014      	str	r4, [r2, #0]
 80077f0:	b003      	add	sp, #12
 80077f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077f6:	f000 b8e9 	b.w	80079cc <__malloc_unlock>
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	d90b      	bls.n	8007816 <_free_r+0x4e>
 80077fe:	6821      	ldr	r1, [r4, #0]
 8007800:	1862      	adds	r2, r4, r1
 8007802:	4293      	cmp	r3, r2
 8007804:	bf04      	itt	eq
 8007806:	681a      	ldreq	r2, [r3, #0]
 8007808:	685b      	ldreq	r3, [r3, #4]
 800780a:	6063      	str	r3, [r4, #4]
 800780c:	bf04      	itt	eq
 800780e:	1852      	addeq	r2, r2, r1
 8007810:	6022      	streq	r2, [r4, #0]
 8007812:	602c      	str	r4, [r5, #0]
 8007814:	e7ec      	b.n	80077f0 <_free_r+0x28>
 8007816:	461a      	mov	r2, r3
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	b10b      	cbz	r3, 8007820 <_free_r+0x58>
 800781c:	42a3      	cmp	r3, r4
 800781e:	d9fa      	bls.n	8007816 <_free_r+0x4e>
 8007820:	6811      	ldr	r1, [r2, #0]
 8007822:	1855      	adds	r5, r2, r1
 8007824:	42a5      	cmp	r5, r4
 8007826:	d10b      	bne.n	8007840 <_free_r+0x78>
 8007828:	6824      	ldr	r4, [r4, #0]
 800782a:	4421      	add	r1, r4
 800782c:	1854      	adds	r4, r2, r1
 800782e:	42a3      	cmp	r3, r4
 8007830:	6011      	str	r1, [r2, #0]
 8007832:	d1dd      	bne.n	80077f0 <_free_r+0x28>
 8007834:	681c      	ldr	r4, [r3, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	6053      	str	r3, [r2, #4]
 800783a:	4421      	add	r1, r4
 800783c:	6011      	str	r1, [r2, #0]
 800783e:	e7d7      	b.n	80077f0 <_free_r+0x28>
 8007840:	d902      	bls.n	8007848 <_free_r+0x80>
 8007842:	230c      	movs	r3, #12
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	e7d3      	b.n	80077f0 <_free_r+0x28>
 8007848:	6825      	ldr	r5, [r4, #0]
 800784a:	1961      	adds	r1, r4, r5
 800784c:	428b      	cmp	r3, r1
 800784e:	bf04      	itt	eq
 8007850:	6819      	ldreq	r1, [r3, #0]
 8007852:	685b      	ldreq	r3, [r3, #4]
 8007854:	6063      	str	r3, [r4, #4]
 8007856:	bf04      	itt	eq
 8007858:	1949      	addeq	r1, r1, r5
 800785a:	6021      	streq	r1, [r4, #0]
 800785c:	6054      	str	r4, [r2, #4]
 800785e:	e7c7      	b.n	80077f0 <_free_r+0x28>
 8007860:	b003      	add	sp, #12
 8007862:	bd30      	pop	{r4, r5, pc}
 8007864:	200001fc 	.word	0x200001fc

08007868 <_malloc_r>:
 8007868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800786a:	1ccd      	adds	r5, r1, #3
 800786c:	f025 0503 	bic.w	r5, r5, #3
 8007870:	3508      	adds	r5, #8
 8007872:	2d0c      	cmp	r5, #12
 8007874:	bf38      	it	cc
 8007876:	250c      	movcc	r5, #12
 8007878:	2d00      	cmp	r5, #0
 800787a:	4606      	mov	r6, r0
 800787c:	db01      	blt.n	8007882 <_malloc_r+0x1a>
 800787e:	42a9      	cmp	r1, r5
 8007880:	d903      	bls.n	800788a <_malloc_r+0x22>
 8007882:	230c      	movs	r3, #12
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	2000      	movs	r0, #0
 8007888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800788a:	f000 f899 	bl	80079c0 <__malloc_lock>
 800788e:	4921      	ldr	r1, [pc, #132]	; (8007914 <_malloc_r+0xac>)
 8007890:	680a      	ldr	r2, [r1, #0]
 8007892:	4614      	mov	r4, r2
 8007894:	b99c      	cbnz	r4, 80078be <_malloc_r+0x56>
 8007896:	4f20      	ldr	r7, [pc, #128]	; (8007918 <_malloc_r+0xb0>)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	b923      	cbnz	r3, 80078a6 <_malloc_r+0x3e>
 800789c:	4621      	mov	r1, r4
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f83c 	bl	800791c <_sbrk_r>
 80078a4:	6038      	str	r0, [r7, #0]
 80078a6:	4629      	mov	r1, r5
 80078a8:	4630      	mov	r0, r6
 80078aa:	f000 f837 	bl	800791c <_sbrk_r>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	d123      	bne.n	80078fa <_malloc_r+0x92>
 80078b2:	230c      	movs	r3, #12
 80078b4:	6033      	str	r3, [r6, #0]
 80078b6:	4630      	mov	r0, r6
 80078b8:	f000 f888 	bl	80079cc <__malloc_unlock>
 80078bc:	e7e3      	b.n	8007886 <_malloc_r+0x1e>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	1b5b      	subs	r3, r3, r5
 80078c2:	d417      	bmi.n	80078f4 <_malloc_r+0x8c>
 80078c4:	2b0b      	cmp	r3, #11
 80078c6:	d903      	bls.n	80078d0 <_malloc_r+0x68>
 80078c8:	6023      	str	r3, [r4, #0]
 80078ca:	441c      	add	r4, r3
 80078cc:	6025      	str	r5, [r4, #0]
 80078ce:	e004      	b.n	80078da <_malloc_r+0x72>
 80078d0:	6863      	ldr	r3, [r4, #4]
 80078d2:	42a2      	cmp	r2, r4
 80078d4:	bf0c      	ite	eq
 80078d6:	600b      	streq	r3, [r1, #0]
 80078d8:	6053      	strne	r3, [r2, #4]
 80078da:	4630      	mov	r0, r6
 80078dc:	f000 f876 	bl	80079cc <__malloc_unlock>
 80078e0:	f104 000b 	add.w	r0, r4, #11
 80078e4:	1d23      	adds	r3, r4, #4
 80078e6:	f020 0007 	bic.w	r0, r0, #7
 80078ea:	1ac2      	subs	r2, r0, r3
 80078ec:	d0cc      	beq.n	8007888 <_malloc_r+0x20>
 80078ee:	1a1b      	subs	r3, r3, r0
 80078f0:	50a3      	str	r3, [r4, r2]
 80078f2:	e7c9      	b.n	8007888 <_malloc_r+0x20>
 80078f4:	4622      	mov	r2, r4
 80078f6:	6864      	ldr	r4, [r4, #4]
 80078f8:	e7cc      	b.n	8007894 <_malloc_r+0x2c>
 80078fa:	1cc4      	adds	r4, r0, #3
 80078fc:	f024 0403 	bic.w	r4, r4, #3
 8007900:	42a0      	cmp	r0, r4
 8007902:	d0e3      	beq.n	80078cc <_malloc_r+0x64>
 8007904:	1a21      	subs	r1, r4, r0
 8007906:	4630      	mov	r0, r6
 8007908:	f000 f808 	bl	800791c <_sbrk_r>
 800790c:	3001      	adds	r0, #1
 800790e:	d1dd      	bne.n	80078cc <_malloc_r+0x64>
 8007910:	e7cf      	b.n	80078b2 <_malloc_r+0x4a>
 8007912:	bf00      	nop
 8007914:	200001fc 	.word	0x200001fc
 8007918:	20000200 	.word	0x20000200

0800791c <_sbrk_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	4d06      	ldr	r5, [pc, #24]	; (8007938 <_sbrk_r+0x1c>)
 8007920:	2300      	movs	r3, #0
 8007922:	4604      	mov	r4, r0
 8007924:	4608      	mov	r0, r1
 8007926:	602b      	str	r3, [r5, #0]
 8007928:	f7f9 fdca 	bl	80014c0 <_sbrk>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_sbrk_r+0x1a>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_sbrk_r+0x1a>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	200003fc 	.word	0x200003fc

0800793c <__assert_func>:
 800793c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800793e:	4614      	mov	r4, r2
 8007940:	461a      	mov	r2, r3
 8007942:	4b09      	ldr	r3, [pc, #36]	; (8007968 <__assert_func+0x2c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4605      	mov	r5, r0
 8007948:	68d8      	ldr	r0, [r3, #12]
 800794a:	b14c      	cbz	r4, 8007960 <__assert_func+0x24>
 800794c:	4b07      	ldr	r3, [pc, #28]	; (800796c <__assert_func+0x30>)
 800794e:	9100      	str	r1, [sp, #0]
 8007950:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007954:	4906      	ldr	r1, [pc, #24]	; (8007970 <__assert_func+0x34>)
 8007956:	462b      	mov	r3, r5
 8007958:	f000 f80e 	bl	8007978 <fiprintf>
 800795c:	f000 fa64 	bl	8007e28 <abort>
 8007960:	4b04      	ldr	r3, [pc, #16]	; (8007974 <__assert_func+0x38>)
 8007962:	461c      	mov	r4, r3
 8007964:	e7f3      	b.n	800794e <__assert_func+0x12>
 8007966:	bf00      	nop
 8007968:	2000000c 	.word	0x2000000c
 800796c:	080086d4 	.word	0x080086d4
 8007970:	080086e1 	.word	0x080086e1
 8007974:	0800870f 	.word	0x0800870f

08007978 <fiprintf>:
 8007978:	b40e      	push	{r1, r2, r3}
 800797a:	b503      	push	{r0, r1, lr}
 800797c:	4601      	mov	r1, r0
 800797e:	ab03      	add	r3, sp, #12
 8007980:	4805      	ldr	r0, [pc, #20]	; (8007998 <fiprintf+0x20>)
 8007982:	f853 2b04 	ldr.w	r2, [r3], #4
 8007986:	6800      	ldr	r0, [r0, #0]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	f000 f84f 	bl	8007a2c <_vfiprintf_r>
 800798e:	b002      	add	sp, #8
 8007990:	f85d eb04 	ldr.w	lr, [sp], #4
 8007994:	b003      	add	sp, #12
 8007996:	4770      	bx	lr
 8007998:	2000000c 	.word	0x2000000c

0800799c <__ascii_mbtowc>:
 800799c:	b082      	sub	sp, #8
 800799e:	b901      	cbnz	r1, 80079a2 <__ascii_mbtowc+0x6>
 80079a0:	a901      	add	r1, sp, #4
 80079a2:	b142      	cbz	r2, 80079b6 <__ascii_mbtowc+0x1a>
 80079a4:	b14b      	cbz	r3, 80079ba <__ascii_mbtowc+0x1e>
 80079a6:	7813      	ldrb	r3, [r2, #0]
 80079a8:	600b      	str	r3, [r1, #0]
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	1e10      	subs	r0, r2, #0
 80079ae:	bf18      	it	ne
 80079b0:	2001      	movne	r0, #1
 80079b2:	b002      	add	sp, #8
 80079b4:	4770      	bx	lr
 80079b6:	4610      	mov	r0, r2
 80079b8:	e7fb      	b.n	80079b2 <__ascii_mbtowc+0x16>
 80079ba:	f06f 0001 	mvn.w	r0, #1
 80079be:	e7f8      	b.n	80079b2 <__ascii_mbtowc+0x16>

080079c0 <__malloc_lock>:
 80079c0:	4801      	ldr	r0, [pc, #4]	; (80079c8 <__malloc_lock+0x8>)
 80079c2:	f000 bbf1 	b.w	80081a8 <__retarget_lock_acquire_recursive>
 80079c6:	bf00      	nop
 80079c8:	20000404 	.word	0x20000404

080079cc <__malloc_unlock>:
 80079cc:	4801      	ldr	r0, [pc, #4]	; (80079d4 <__malloc_unlock+0x8>)
 80079ce:	f000 bbec 	b.w	80081aa <__retarget_lock_release_recursive>
 80079d2:	bf00      	nop
 80079d4:	20000404 	.word	0x20000404

080079d8 <__sfputc_r>:
 80079d8:	6893      	ldr	r3, [r2, #8]
 80079da:	3b01      	subs	r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	b410      	push	{r4}
 80079e0:	6093      	str	r3, [r2, #8]
 80079e2:	da08      	bge.n	80079f6 <__sfputc_r+0x1e>
 80079e4:	6994      	ldr	r4, [r2, #24]
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	db01      	blt.n	80079ee <__sfputc_r+0x16>
 80079ea:	290a      	cmp	r1, #10
 80079ec:	d103      	bne.n	80079f6 <__sfputc_r+0x1e>
 80079ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079f2:	f000 b94b 	b.w	8007c8c <__swbuf_r>
 80079f6:	6813      	ldr	r3, [r2, #0]
 80079f8:	1c58      	adds	r0, r3, #1
 80079fa:	6010      	str	r0, [r2, #0]
 80079fc:	7019      	strb	r1, [r3, #0]
 80079fe:	4608      	mov	r0, r1
 8007a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <__sfputs_r>:
 8007a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a08:	4606      	mov	r6, r0
 8007a0a:	460f      	mov	r7, r1
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	18d5      	adds	r5, r2, r3
 8007a10:	42ac      	cmp	r4, r5
 8007a12:	d101      	bne.n	8007a18 <__sfputs_r+0x12>
 8007a14:	2000      	movs	r0, #0
 8007a16:	e007      	b.n	8007a28 <__sfputs_r+0x22>
 8007a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a1c:	463a      	mov	r2, r7
 8007a1e:	4630      	mov	r0, r6
 8007a20:	f7ff ffda 	bl	80079d8 <__sfputc_r>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d1f3      	bne.n	8007a10 <__sfputs_r+0xa>
 8007a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a2c <_vfiprintf_r>:
 8007a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a30:	460d      	mov	r5, r1
 8007a32:	b09d      	sub	sp, #116	; 0x74
 8007a34:	4614      	mov	r4, r2
 8007a36:	4698      	mov	r8, r3
 8007a38:	4606      	mov	r6, r0
 8007a3a:	b118      	cbz	r0, 8007a44 <_vfiprintf_r+0x18>
 8007a3c:	6983      	ldr	r3, [r0, #24]
 8007a3e:	b90b      	cbnz	r3, 8007a44 <_vfiprintf_r+0x18>
 8007a40:	f000 fb14 	bl	800806c <__sinit>
 8007a44:	4b89      	ldr	r3, [pc, #548]	; (8007c6c <_vfiprintf_r+0x240>)
 8007a46:	429d      	cmp	r5, r3
 8007a48:	d11b      	bne.n	8007a82 <_vfiprintf_r+0x56>
 8007a4a:	6875      	ldr	r5, [r6, #4]
 8007a4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a4e:	07d9      	lsls	r1, r3, #31
 8007a50:	d405      	bmi.n	8007a5e <_vfiprintf_r+0x32>
 8007a52:	89ab      	ldrh	r3, [r5, #12]
 8007a54:	059a      	lsls	r2, r3, #22
 8007a56:	d402      	bmi.n	8007a5e <_vfiprintf_r+0x32>
 8007a58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a5a:	f000 fba5 	bl	80081a8 <__retarget_lock_acquire_recursive>
 8007a5e:	89ab      	ldrh	r3, [r5, #12]
 8007a60:	071b      	lsls	r3, r3, #28
 8007a62:	d501      	bpl.n	8007a68 <_vfiprintf_r+0x3c>
 8007a64:	692b      	ldr	r3, [r5, #16]
 8007a66:	b9eb      	cbnz	r3, 8007aa4 <_vfiprintf_r+0x78>
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f000 f96e 	bl	8007d4c <__swsetup_r>
 8007a70:	b1c0      	cbz	r0, 8007aa4 <_vfiprintf_r+0x78>
 8007a72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a74:	07dc      	lsls	r4, r3, #31
 8007a76:	d50e      	bpl.n	8007a96 <_vfiprintf_r+0x6a>
 8007a78:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7c:	b01d      	add	sp, #116	; 0x74
 8007a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a82:	4b7b      	ldr	r3, [pc, #492]	; (8007c70 <_vfiprintf_r+0x244>)
 8007a84:	429d      	cmp	r5, r3
 8007a86:	d101      	bne.n	8007a8c <_vfiprintf_r+0x60>
 8007a88:	68b5      	ldr	r5, [r6, #8]
 8007a8a:	e7df      	b.n	8007a4c <_vfiprintf_r+0x20>
 8007a8c:	4b79      	ldr	r3, [pc, #484]	; (8007c74 <_vfiprintf_r+0x248>)
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	bf08      	it	eq
 8007a92:	68f5      	ldreq	r5, [r6, #12]
 8007a94:	e7da      	b.n	8007a4c <_vfiprintf_r+0x20>
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	0598      	lsls	r0, r3, #22
 8007a9a:	d4ed      	bmi.n	8007a78 <_vfiprintf_r+0x4c>
 8007a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a9e:	f000 fb84 	bl	80081aa <__retarget_lock_release_recursive>
 8007aa2:	e7e9      	b.n	8007a78 <_vfiprintf_r+0x4c>
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa8:	2320      	movs	r3, #32
 8007aaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ab2:	2330      	movs	r3, #48	; 0x30
 8007ab4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c78 <_vfiprintf_r+0x24c>
 8007ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007abc:	f04f 0901 	mov.w	r9, #1
 8007ac0:	4623      	mov	r3, r4
 8007ac2:	469a      	mov	sl, r3
 8007ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac8:	b10a      	cbz	r2, 8007ace <_vfiprintf_r+0xa2>
 8007aca:	2a25      	cmp	r2, #37	; 0x25
 8007acc:	d1f9      	bne.n	8007ac2 <_vfiprintf_r+0x96>
 8007ace:	ebba 0b04 	subs.w	fp, sl, r4
 8007ad2:	d00b      	beq.n	8007aec <_vfiprintf_r+0xc0>
 8007ad4:	465b      	mov	r3, fp
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ff93 	bl	8007a06 <__sfputs_r>
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	f000 80aa 	beq.w	8007c3a <_vfiprintf_r+0x20e>
 8007ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ae8:	445a      	add	r2, fp
 8007aea:	9209      	str	r2, [sp, #36]	; 0x24
 8007aec:	f89a 3000 	ldrb.w	r3, [sl]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 80a2 	beq.w	8007c3a <_vfiprintf_r+0x20e>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f04f 32ff 	mov.w	r2, #4294967295
 8007afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b00:	f10a 0a01 	add.w	sl, sl, #1
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b0e:	4654      	mov	r4, sl
 8007b10:	2205      	movs	r2, #5
 8007b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b16:	4858      	ldr	r0, [pc, #352]	; (8007c78 <_vfiprintf_r+0x24c>)
 8007b18:	f7f8 fb62 	bl	80001e0 <memchr>
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	b9d8      	cbnz	r0, 8007b58 <_vfiprintf_r+0x12c>
 8007b20:	06d1      	lsls	r1, r2, #27
 8007b22:	bf44      	itt	mi
 8007b24:	2320      	movmi	r3, #32
 8007b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b2a:	0713      	lsls	r3, r2, #28
 8007b2c:	bf44      	itt	mi
 8007b2e:	232b      	movmi	r3, #43	; 0x2b
 8007b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b2a      	cmp	r3, #42	; 0x2a
 8007b3a:	d015      	beq.n	8007b68 <_vfiprintf_r+0x13c>
 8007b3c:	9a07      	ldr	r2, [sp, #28]
 8007b3e:	4654      	mov	r4, sl
 8007b40:	2000      	movs	r0, #0
 8007b42:	f04f 0c0a 	mov.w	ip, #10
 8007b46:	4621      	mov	r1, r4
 8007b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b4c:	3b30      	subs	r3, #48	; 0x30
 8007b4e:	2b09      	cmp	r3, #9
 8007b50:	d94e      	bls.n	8007bf0 <_vfiprintf_r+0x1c4>
 8007b52:	b1b0      	cbz	r0, 8007b82 <_vfiprintf_r+0x156>
 8007b54:	9207      	str	r2, [sp, #28]
 8007b56:	e014      	b.n	8007b82 <_vfiprintf_r+0x156>
 8007b58:	eba0 0308 	sub.w	r3, r0, r8
 8007b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8007b60:	4313      	orrs	r3, r2
 8007b62:	9304      	str	r3, [sp, #16]
 8007b64:	46a2      	mov	sl, r4
 8007b66:	e7d2      	b.n	8007b0e <_vfiprintf_r+0xe2>
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	1d19      	adds	r1, r3, #4
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	9103      	str	r1, [sp, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	bfbb      	ittet	lt
 8007b74:	425b      	neglt	r3, r3
 8007b76:	f042 0202 	orrlt.w	r2, r2, #2
 8007b7a:	9307      	strge	r3, [sp, #28]
 8007b7c:	9307      	strlt	r3, [sp, #28]
 8007b7e:	bfb8      	it	lt
 8007b80:	9204      	strlt	r2, [sp, #16]
 8007b82:	7823      	ldrb	r3, [r4, #0]
 8007b84:	2b2e      	cmp	r3, #46	; 0x2e
 8007b86:	d10c      	bne.n	8007ba2 <_vfiprintf_r+0x176>
 8007b88:	7863      	ldrb	r3, [r4, #1]
 8007b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b8c:	d135      	bne.n	8007bfa <_vfiprintf_r+0x1ce>
 8007b8e:	9b03      	ldr	r3, [sp, #12]
 8007b90:	1d1a      	adds	r2, r3, #4
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	9203      	str	r2, [sp, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bfb8      	it	lt
 8007b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b9e:	3402      	adds	r4, #2
 8007ba0:	9305      	str	r3, [sp, #20]
 8007ba2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c88 <_vfiprintf_r+0x25c>
 8007ba6:	7821      	ldrb	r1, [r4, #0]
 8007ba8:	2203      	movs	r2, #3
 8007baa:	4650      	mov	r0, sl
 8007bac:	f7f8 fb18 	bl	80001e0 <memchr>
 8007bb0:	b140      	cbz	r0, 8007bc4 <_vfiprintf_r+0x198>
 8007bb2:	2340      	movs	r3, #64	; 0x40
 8007bb4:	eba0 000a 	sub.w	r0, r0, sl
 8007bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8007bbc:	9b04      	ldr	r3, [sp, #16]
 8007bbe:	4303      	orrs	r3, r0
 8007bc0:	3401      	adds	r4, #1
 8007bc2:	9304      	str	r3, [sp, #16]
 8007bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bc8:	482c      	ldr	r0, [pc, #176]	; (8007c7c <_vfiprintf_r+0x250>)
 8007bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bce:	2206      	movs	r2, #6
 8007bd0:	f7f8 fb06 	bl	80001e0 <memchr>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d03f      	beq.n	8007c58 <_vfiprintf_r+0x22c>
 8007bd8:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <_vfiprintf_r+0x254>)
 8007bda:	bb1b      	cbnz	r3, 8007c24 <_vfiprintf_r+0x1f8>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	3307      	adds	r3, #7
 8007be0:	f023 0307 	bic.w	r3, r3, #7
 8007be4:	3308      	adds	r3, #8
 8007be6:	9303      	str	r3, [sp, #12]
 8007be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bea:	443b      	add	r3, r7
 8007bec:	9309      	str	r3, [sp, #36]	; 0x24
 8007bee:	e767      	b.n	8007ac0 <_vfiprintf_r+0x94>
 8007bf0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	e7a5      	b.n	8007b46 <_vfiprintf_r+0x11a>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	3401      	adds	r4, #1
 8007bfe:	9305      	str	r3, [sp, #20]
 8007c00:	4619      	mov	r1, r3
 8007c02:	f04f 0c0a 	mov.w	ip, #10
 8007c06:	4620      	mov	r0, r4
 8007c08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c0c:	3a30      	subs	r2, #48	; 0x30
 8007c0e:	2a09      	cmp	r2, #9
 8007c10:	d903      	bls.n	8007c1a <_vfiprintf_r+0x1ee>
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d0c5      	beq.n	8007ba2 <_vfiprintf_r+0x176>
 8007c16:	9105      	str	r1, [sp, #20]
 8007c18:	e7c3      	b.n	8007ba2 <_vfiprintf_r+0x176>
 8007c1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c1e:	4604      	mov	r4, r0
 8007c20:	2301      	movs	r3, #1
 8007c22:	e7f0      	b.n	8007c06 <_vfiprintf_r+0x1da>
 8007c24:	ab03      	add	r3, sp, #12
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	462a      	mov	r2, r5
 8007c2a:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <_vfiprintf_r+0x258>)
 8007c2c:	a904      	add	r1, sp, #16
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7fd ffde 	bl	8005bf0 <_printf_float>
 8007c34:	4607      	mov	r7, r0
 8007c36:	1c78      	adds	r0, r7, #1
 8007c38:	d1d6      	bne.n	8007be8 <_vfiprintf_r+0x1bc>
 8007c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c3c:	07d9      	lsls	r1, r3, #31
 8007c3e:	d405      	bmi.n	8007c4c <_vfiprintf_r+0x220>
 8007c40:	89ab      	ldrh	r3, [r5, #12]
 8007c42:	059a      	lsls	r2, r3, #22
 8007c44:	d402      	bmi.n	8007c4c <_vfiprintf_r+0x220>
 8007c46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c48:	f000 faaf 	bl	80081aa <__retarget_lock_release_recursive>
 8007c4c:	89ab      	ldrh	r3, [r5, #12]
 8007c4e:	065b      	lsls	r3, r3, #25
 8007c50:	f53f af12 	bmi.w	8007a78 <_vfiprintf_r+0x4c>
 8007c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c56:	e711      	b.n	8007a7c <_vfiprintf_r+0x50>
 8007c58:	ab03      	add	r3, sp, #12
 8007c5a:	9300      	str	r3, [sp, #0]
 8007c5c:	462a      	mov	r2, r5
 8007c5e:	4b09      	ldr	r3, [pc, #36]	; (8007c84 <_vfiprintf_r+0x258>)
 8007c60:	a904      	add	r1, sp, #16
 8007c62:	4630      	mov	r0, r6
 8007c64:	f7fe fa68 	bl	8006138 <_printf_i>
 8007c68:	e7e4      	b.n	8007c34 <_vfiprintf_r+0x208>
 8007c6a:	bf00      	nop
 8007c6c:	0800884c 	.word	0x0800884c
 8007c70:	0800886c 	.word	0x0800886c
 8007c74:	0800882c 	.word	0x0800882c
 8007c78:	0800871a 	.word	0x0800871a
 8007c7c:	08008724 	.word	0x08008724
 8007c80:	08005bf1 	.word	0x08005bf1
 8007c84:	08007a07 	.word	0x08007a07
 8007c88:	08008720 	.word	0x08008720

08007c8c <__swbuf_r>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	460e      	mov	r6, r1
 8007c90:	4614      	mov	r4, r2
 8007c92:	4605      	mov	r5, r0
 8007c94:	b118      	cbz	r0, 8007c9e <__swbuf_r+0x12>
 8007c96:	6983      	ldr	r3, [r0, #24]
 8007c98:	b90b      	cbnz	r3, 8007c9e <__swbuf_r+0x12>
 8007c9a:	f000 f9e7 	bl	800806c <__sinit>
 8007c9e:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <__swbuf_r+0x98>)
 8007ca0:	429c      	cmp	r4, r3
 8007ca2:	d12b      	bne.n	8007cfc <__swbuf_r+0x70>
 8007ca4:	686c      	ldr	r4, [r5, #4]
 8007ca6:	69a3      	ldr	r3, [r4, #24]
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	071a      	lsls	r2, r3, #28
 8007cae:	d52f      	bpl.n	8007d10 <__swbuf_r+0x84>
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	b36b      	cbz	r3, 8007d10 <__swbuf_r+0x84>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	6820      	ldr	r0, [r4, #0]
 8007cb8:	1ac0      	subs	r0, r0, r3
 8007cba:	6963      	ldr	r3, [r4, #20]
 8007cbc:	b2f6      	uxtb	r6, r6
 8007cbe:	4283      	cmp	r3, r0
 8007cc0:	4637      	mov	r7, r6
 8007cc2:	dc04      	bgt.n	8007cce <__swbuf_r+0x42>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 f93c 	bl	8007f44 <_fflush_r>
 8007ccc:	bb30      	cbnz	r0, 8007d1c <__swbuf_r+0x90>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	701e      	strb	r6, [r3, #0]
 8007cdc:	6963      	ldr	r3, [r4, #20]
 8007cde:	3001      	adds	r0, #1
 8007ce0:	4283      	cmp	r3, r0
 8007ce2:	d004      	beq.n	8007cee <__swbuf_r+0x62>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	07db      	lsls	r3, r3, #31
 8007ce8:	d506      	bpl.n	8007cf8 <__swbuf_r+0x6c>
 8007cea:	2e0a      	cmp	r6, #10
 8007cec:	d104      	bne.n	8007cf8 <__swbuf_r+0x6c>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f927 	bl	8007f44 <_fflush_r>
 8007cf6:	b988      	cbnz	r0, 8007d1c <__swbuf_r+0x90>
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <__swbuf_r+0x9c>)
 8007cfe:	429c      	cmp	r4, r3
 8007d00:	d101      	bne.n	8007d06 <__swbuf_r+0x7a>
 8007d02:	68ac      	ldr	r4, [r5, #8]
 8007d04:	e7cf      	b.n	8007ca6 <__swbuf_r+0x1a>
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <__swbuf_r+0xa0>)
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	bf08      	it	eq
 8007d0c:	68ec      	ldreq	r4, [r5, #12]
 8007d0e:	e7ca      	b.n	8007ca6 <__swbuf_r+0x1a>
 8007d10:	4621      	mov	r1, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 f81a 	bl	8007d4c <__swsetup_r>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d0cb      	beq.n	8007cb4 <__swbuf_r+0x28>
 8007d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d20:	e7ea      	b.n	8007cf8 <__swbuf_r+0x6c>
 8007d22:	bf00      	nop
 8007d24:	0800884c 	.word	0x0800884c
 8007d28:	0800886c 	.word	0x0800886c
 8007d2c:	0800882c 	.word	0x0800882c

08007d30 <__ascii_wctomb>:
 8007d30:	b149      	cbz	r1, 8007d46 <__ascii_wctomb+0x16>
 8007d32:	2aff      	cmp	r2, #255	; 0xff
 8007d34:	bf85      	ittet	hi
 8007d36:	238a      	movhi	r3, #138	; 0x8a
 8007d38:	6003      	strhi	r3, [r0, #0]
 8007d3a:	700a      	strbls	r2, [r1, #0]
 8007d3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d40:	bf98      	it	ls
 8007d42:	2001      	movls	r0, #1
 8007d44:	4770      	bx	lr
 8007d46:	4608      	mov	r0, r1
 8007d48:	4770      	bx	lr
	...

08007d4c <__swsetup_r>:
 8007d4c:	4b32      	ldr	r3, [pc, #200]	; (8007e18 <__swsetup_r+0xcc>)
 8007d4e:	b570      	push	{r4, r5, r6, lr}
 8007d50:	681d      	ldr	r5, [r3, #0]
 8007d52:	4606      	mov	r6, r0
 8007d54:	460c      	mov	r4, r1
 8007d56:	b125      	cbz	r5, 8007d62 <__swsetup_r+0x16>
 8007d58:	69ab      	ldr	r3, [r5, #24]
 8007d5a:	b913      	cbnz	r3, 8007d62 <__swsetup_r+0x16>
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	f000 f985 	bl	800806c <__sinit>
 8007d62:	4b2e      	ldr	r3, [pc, #184]	; (8007e1c <__swsetup_r+0xd0>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	d10f      	bne.n	8007d88 <__swsetup_r+0x3c>
 8007d68:	686c      	ldr	r4, [r5, #4]
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d70:	0719      	lsls	r1, r3, #28
 8007d72:	d42c      	bmi.n	8007dce <__swsetup_r+0x82>
 8007d74:	06dd      	lsls	r5, r3, #27
 8007d76:	d411      	bmi.n	8007d9c <__swsetup_r+0x50>
 8007d78:	2309      	movs	r3, #9
 8007d7a:	6033      	str	r3, [r6, #0]
 8007d7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d80:	81a3      	strh	r3, [r4, #12]
 8007d82:	f04f 30ff 	mov.w	r0, #4294967295
 8007d86:	e03e      	b.n	8007e06 <__swsetup_r+0xba>
 8007d88:	4b25      	ldr	r3, [pc, #148]	; (8007e20 <__swsetup_r+0xd4>)
 8007d8a:	429c      	cmp	r4, r3
 8007d8c:	d101      	bne.n	8007d92 <__swsetup_r+0x46>
 8007d8e:	68ac      	ldr	r4, [r5, #8]
 8007d90:	e7eb      	b.n	8007d6a <__swsetup_r+0x1e>
 8007d92:	4b24      	ldr	r3, [pc, #144]	; (8007e24 <__swsetup_r+0xd8>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	bf08      	it	eq
 8007d98:	68ec      	ldreq	r4, [r5, #12]
 8007d9a:	e7e6      	b.n	8007d6a <__swsetup_r+0x1e>
 8007d9c:	0758      	lsls	r0, r3, #29
 8007d9e:	d512      	bpl.n	8007dc6 <__swsetup_r+0x7a>
 8007da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007da2:	b141      	cbz	r1, 8007db6 <__swsetup_r+0x6a>
 8007da4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007da8:	4299      	cmp	r1, r3
 8007daa:	d002      	beq.n	8007db2 <__swsetup_r+0x66>
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7ff fd0b 	bl	80077c8 <_free_r>
 8007db2:	2300      	movs	r3, #0
 8007db4:	6363      	str	r3, [r4, #52]	; 0x34
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6063      	str	r3, [r4, #4]
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	6023      	str	r3, [r4, #0]
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	f043 0308 	orr.w	r3, r3, #8
 8007dcc:	81a3      	strh	r3, [r4, #12]
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	b94b      	cbnz	r3, 8007de6 <__swsetup_r+0x9a>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ddc:	d003      	beq.n	8007de6 <__swsetup_r+0x9a>
 8007dde:	4621      	mov	r1, r4
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 fa07 	bl	80081f4 <__smakebuf_r>
 8007de6:	89a0      	ldrh	r0, [r4, #12]
 8007de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dec:	f010 0301 	ands.w	r3, r0, #1
 8007df0:	d00a      	beq.n	8007e08 <__swsetup_r+0xbc>
 8007df2:	2300      	movs	r3, #0
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	6963      	ldr	r3, [r4, #20]
 8007df8:	425b      	negs	r3, r3
 8007dfa:	61a3      	str	r3, [r4, #24]
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	b943      	cbnz	r3, 8007e12 <__swsetup_r+0xc6>
 8007e00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e04:	d1ba      	bne.n	8007d7c <__swsetup_r+0x30>
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	0781      	lsls	r1, r0, #30
 8007e0a:	bf58      	it	pl
 8007e0c:	6963      	ldrpl	r3, [r4, #20]
 8007e0e:	60a3      	str	r3, [r4, #8]
 8007e10:	e7f4      	b.n	8007dfc <__swsetup_r+0xb0>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e7f7      	b.n	8007e06 <__swsetup_r+0xba>
 8007e16:	bf00      	nop
 8007e18:	2000000c 	.word	0x2000000c
 8007e1c:	0800884c 	.word	0x0800884c
 8007e20:	0800886c 	.word	0x0800886c
 8007e24:	0800882c 	.word	0x0800882c

08007e28 <abort>:
 8007e28:	b508      	push	{r3, lr}
 8007e2a:	2006      	movs	r0, #6
 8007e2c:	f000 fa4a 	bl	80082c4 <raise>
 8007e30:	2001      	movs	r0, #1
 8007e32:	f7f9 facd 	bl	80013d0 <_exit>
	...

08007e38 <__sflush_r>:
 8007e38:	898a      	ldrh	r2, [r1, #12]
 8007e3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3e:	4605      	mov	r5, r0
 8007e40:	0710      	lsls	r0, r2, #28
 8007e42:	460c      	mov	r4, r1
 8007e44:	d458      	bmi.n	8007ef8 <__sflush_r+0xc0>
 8007e46:	684b      	ldr	r3, [r1, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dc05      	bgt.n	8007e58 <__sflush_r+0x20>
 8007e4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dc02      	bgt.n	8007e58 <__sflush_r+0x20>
 8007e52:	2000      	movs	r0, #0
 8007e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e5a:	2e00      	cmp	r6, #0
 8007e5c:	d0f9      	beq.n	8007e52 <__sflush_r+0x1a>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e64:	682f      	ldr	r7, [r5, #0]
 8007e66:	602b      	str	r3, [r5, #0]
 8007e68:	d032      	beq.n	8007ed0 <__sflush_r+0x98>
 8007e6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	075a      	lsls	r2, r3, #29
 8007e70:	d505      	bpl.n	8007e7e <__sflush_r+0x46>
 8007e72:	6863      	ldr	r3, [r4, #4]
 8007e74:	1ac0      	subs	r0, r0, r3
 8007e76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e78:	b10b      	cbz	r3, 8007e7e <__sflush_r+0x46>
 8007e7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e7c:	1ac0      	subs	r0, r0, r3
 8007e7e:	2300      	movs	r3, #0
 8007e80:	4602      	mov	r2, r0
 8007e82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e84:	6a21      	ldr	r1, [r4, #32]
 8007e86:	4628      	mov	r0, r5
 8007e88:	47b0      	blx	r6
 8007e8a:	1c43      	adds	r3, r0, #1
 8007e8c:	89a3      	ldrh	r3, [r4, #12]
 8007e8e:	d106      	bne.n	8007e9e <__sflush_r+0x66>
 8007e90:	6829      	ldr	r1, [r5, #0]
 8007e92:	291d      	cmp	r1, #29
 8007e94:	d82c      	bhi.n	8007ef0 <__sflush_r+0xb8>
 8007e96:	4a2a      	ldr	r2, [pc, #168]	; (8007f40 <__sflush_r+0x108>)
 8007e98:	40ca      	lsrs	r2, r1
 8007e9a:	07d6      	lsls	r6, r2, #31
 8007e9c:	d528      	bpl.n	8007ef0 <__sflush_r+0xb8>
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	6062      	str	r2, [r4, #4]
 8007ea2:	04d9      	lsls	r1, r3, #19
 8007ea4:	6922      	ldr	r2, [r4, #16]
 8007ea6:	6022      	str	r2, [r4, #0]
 8007ea8:	d504      	bpl.n	8007eb4 <__sflush_r+0x7c>
 8007eaa:	1c42      	adds	r2, r0, #1
 8007eac:	d101      	bne.n	8007eb2 <__sflush_r+0x7a>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	b903      	cbnz	r3, 8007eb4 <__sflush_r+0x7c>
 8007eb2:	6560      	str	r0, [r4, #84]	; 0x54
 8007eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eb6:	602f      	str	r7, [r5, #0]
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d0ca      	beq.n	8007e52 <__sflush_r+0x1a>
 8007ebc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	d002      	beq.n	8007eca <__sflush_r+0x92>
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	f7ff fc7f 	bl	80077c8 <_free_r>
 8007eca:	2000      	movs	r0, #0
 8007ecc:	6360      	str	r0, [r4, #52]	; 0x34
 8007ece:	e7c1      	b.n	8007e54 <__sflush_r+0x1c>
 8007ed0:	6a21      	ldr	r1, [r4, #32]
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b0      	blx	r6
 8007ed8:	1c41      	adds	r1, r0, #1
 8007eda:	d1c7      	bne.n	8007e6c <__sflush_r+0x34>
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d0c4      	beq.n	8007e6c <__sflush_r+0x34>
 8007ee2:	2b1d      	cmp	r3, #29
 8007ee4:	d001      	beq.n	8007eea <__sflush_r+0xb2>
 8007ee6:	2b16      	cmp	r3, #22
 8007ee8:	d101      	bne.n	8007eee <__sflush_r+0xb6>
 8007eea:	602f      	str	r7, [r5, #0]
 8007eec:	e7b1      	b.n	8007e52 <__sflush_r+0x1a>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	e7ad      	b.n	8007e54 <__sflush_r+0x1c>
 8007ef8:	690f      	ldr	r7, [r1, #16]
 8007efa:	2f00      	cmp	r7, #0
 8007efc:	d0a9      	beq.n	8007e52 <__sflush_r+0x1a>
 8007efe:	0793      	lsls	r3, r2, #30
 8007f00:	680e      	ldr	r6, [r1, #0]
 8007f02:	bf08      	it	eq
 8007f04:	694b      	ldreq	r3, [r1, #20]
 8007f06:	600f      	str	r7, [r1, #0]
 8007f08:	bf18      	it	ne
 8007f0a:	2300      	movne	r3, #0
 8007f0c:	eba6 0807 	sub.w	r8, r6, r7
 8007f10:	608b      	str	r3, [r1, #8]
 8007f12:	f1b8 0f00 	cmp.w	r8, #0
 8007f16:	dd9c      	ble.n	8007e52 <__sflush_r+0x1a>
 8007f18:	6a21      	ldr	r1, [r4, #32]
 8007f1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f1c:	4643      	mov	r3, r8
 8007f1e:	463a      	mov	r2, r7
 8007f20:	4628      	mov	r0, r5
 8007f22:	47b0      	blx	r6
 8007f24:	2800      	cmp	r0, #0
 8007f26:	dc06      	bgt.n	8007f36 <__sflush_r+0xfe>
 8007f28:	89a3      	ldrh	r3, [r4, #12]
 8007f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2e:	81a3      	strh	r3, [r4, #12]
 8007f30:	f04f 30ff 	mov.w	r0, #4294967295
 8007f34:	e78e      	b.n	8007e54 <__sflush_r+0x1c>
 8007f36:	4407      	add	r7, r0
 8007f38:	eba8 0800 	sub.w	r8, r8, r0
 8007f3c:	e7e9      	b.n	8007f12 <__sflush_r+0xda>
 8007f3e:	bf00      	nop
 8007f40:	20400001 	.word	0x20400001

08007f44 <_fflush_r>:
 8007f44:	b538      	push	{r3, r4, r5, lr}
 8007f46:	690b      	ldr	r3, [r1, #16]
 8007f48:	4605      	mov	r5, r0
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	b913      	cbnz	r3, 8007f54 <_fflush_r+0x10>
 8007f4e:	2500      	movs	r5, #0
 8007f50:	4628      	mov	r0, r5
 8007f52:	bd38      	pop	{r3, r4, r5, pc}
 8007f54:	b118      	cbz	r0, 8007f5e <_fflush_r+0x1a>
 8007f56:	6983      	ldr	r3, [r0, #24]
 8007f58:	b90b      	cbnz	r3, 8007f5e <_fflush_r+0x1a>
 8007f5a:	f000 f887 	bl	800806c <__sinit>
 8007f5e:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <_fflush_r+0x6c>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d11b      	bne.n	8007f9c <_fflush_r+0x58>
 8007f64:	686c      	ldr	r4, [r5, #4]
 8007f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0ef      	beq.n	8007f4e <_fflush_r+0xa>
 8007f6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f70:	07d0      	lsls	r0, r2, #31
 8007f72:	d404      	bmi.n	8007f7e <_fflush_r+0x3a>
 8007f74:	0599      	lsls	r1, r3, #22
 8007f76:	d402      	bmi.n	8007f7e <_fflush_r+0x3a>
 8007f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7a:	f000 f915 	bl	80081a8 <__retarget_lock_acquire_recursive>
 8007f7e:	4628      	mov	r0, r5
 8007f80:	4621      	mov	r1, r4
 8007f82:	f7ff ff59 	bl	8007e38 <__sflush_r>
 8007f86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f88:	07da      	lsls	r2, r3, #31
 8007f8a:	4605      	mov	r5, r0
 8007f8c:	d4e0      	bmi.n	8007f50 <_fflush_r+0xc>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	059b      	lsls	r3, r3, #22
 8007f92:	d4dd      	bmi.n	8007f50 <_fflush_r+0xc>
 8007f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f96:	f000 f908 	bl	80081aa <__retarget_lock_release_recursive>
 8007f9a:	e7d9      	b.n	8007f50 <_fflush_r+0xc>
 8007f9c:	4b05      	ldr	r3, [pc, #20]	; (8007fb4 <_fflush_r+0x70>)
 8007f9e:	429c      	cmp	r4, r3
 8007fa0:	d101      	bne.n	8007fa6 <_fflush_r+0x62>
 8007fa2:	68ac      	ldr	r4, [r5, #8]
 8007fa4:	e7df      	b.n	8007f66 <_fflush_r+0x22>
 8007fa6:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <_fflush_r+0x74>)
 8007fa8:	429c      	cmp	r4, r3
 8007faa:	bf08      	it	eq
 8007fac:	68ec      	ldreq	r4, [r5, #12]
 8007fae:	e7da      	b.n	8007f66 <_fflush_r+0x22>
 8007fb0:	0800884c 	.word	0x0800884c
 8007fb4:	0800886c 	.word	0x0800886c
 8007fb8:	0800882c 	.word	0x0800882c

08007fbc <std>:
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	b510      	push	{r4, lr}
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fca:	6083      	str	r3, [r0, #8]
 8007fcc:	8181      	strh	r1, [r0, #12]
 8007fce:	6643      	str	r3, [r0, #100]	; 0x64
 8007fd0:	81c2      	strh	r2, [r0, #14]
 8007fd2:	6183      	str	r3, [r0, #24]
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	305c      	adds	r0, #92	; 0x5c
 8007fda:	f7fd fd61 	bl	8005aa0 <memset>
 8007fde:	4b05      	ldr	r3, [pc, #20]	; (8007ff4 <std+0x38>)
 8007fe0:	6263      	str	r3, [r4, #36]	; 0x24
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <std+0x3c>)
 8007fe4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fe6:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <std+0x40>)
 8007fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fea:	4b05      	ldr	r3, [pc, #20]	; (8008000 <std+0x44>)
 8007fec:	6224      	str	r4, [r4, #32]
 8007fee:	6323      	str	r3, [r4, #48]	; 0x30
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	bf00      	nop
 8007ff4:	080082fd 	.word	0x080082fd
 8007ff8:	0800831f 	.word	0x0800831f
 8007ffc:	08008357 	.word	0x08008357
 8008000:	0800837b 	.word	0x0800837b

08008004 <_cleanup_r>:
 8008004:	4901      	ldr	r1, [pc, #4]	; (800800c <_cleanup_r+0x8>)
 8008006:	f000 b8af 	b.w	8008168 <_fwalk_reent>
 800800a:	bf00      	nop
 800800c:	08007f45 	.word	0x08007f45

08008010 <__sfmoreglue>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	1e4a      	subs	r2, r1, #1
 8008014:	2568      	movs	r5, #104	; 0x68
 8008016:	4355      	muls	r5, r2
 8008018:	460e      	mov	r6, r1
 800801a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800801e:	f7ff fc23 	bl	8007868 <_malloc_r>
 8008022:	4604      	mov	r4, r0
 8008024:	b140      	cbz	r0, 8008038 <__sfmoreglue+0x28>
 8008026:	2100      	movs	r1, #0
 8008028:	e9c0 1600 	strd	r1, r6, [r0]
 800802c:	300c      	adds	r0, #12
 800802e:	60a0      	str	r0, [r4, #8]
 8008030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008034:	f7fd fd34 	bl	8005aa0 <memset>
 8008038:	4620      	mov	r0, r4
 800803a:	bd70      	pop	{r4, r5, r6, pc}

0800803c <__sfp_lock_acquire>:
 800803c:	4801      	ldr	r0, [pc, #4]	; (8008044 <__sfp_lock_acquire+0x8>)
 800803e:	f000 b8b3 	b.w	80081a8 <__retarget_lock_acquire_recursive>
 8008042:	bf00      	nop
 8008044:	20000408 	.word	0x20000408

08008048 <__sfp_lock_release>:
 8008048:	4801      	ldr	r0, [pc, #4]	; (8008050 <__sfp_lock_release+0x8>)
 800804a:	f000 b8ae 	b.w	80081aa <__retarget_lock_release_recursive>
 800804e:	bf00      	nop
 8008050:	20000408 	.word	0x20000408

08008054 <__sinit_lock_acquire>:
 8008054:	4801      	ldr	r0, [pc, #4]	; (800805c <__sinit_lock_acquire+0x8>)
 8008056:	f000 b8a7 	b.w	80081a8 <__retarget_lock_acquire_recursive>
 800805a:	bf00      	nop
 800805c:	20000403 	.word	0x20000403

08008060 <__sinit_lock_release>:
 8008060:	4801      	ldr	r0, [pc, #4]	; (8008068 <__sinit_lock_release+0x8>)
 8008062:	f000 b8a2 	b.w	80081aa <__retarget_lock_release_recursive>
 8008066:	bf00      	nop
 8008068:	20000403 	.word	0x20000403

0800806c <__sinit>:
 800806c:	b510      	push	{r4, lr}
 800806e:	4604      	mov	r4, r0
 8008070:	f7ff fff0 	bl	8008054 <__sinit_lock_acquire>
 8008074:	69a3      	ldr	r3, [r4, #24]
 8008076:	b11b      	cbz	r3, 8008080 <__sinit+0x14>
 8008078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800807c:	f7ff bff0 	b.w	8008060 <__sinit_lock_release>
 8008080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008084:	6523      	str	r3, [r4, #80]	; 0x50
 8008086:	4b13      	ldr	r3, [pc, #76]	; (80080d4 <__sinit+0x68>)
 8008088:	4a13      	ldr	r2, [pc, #76]	; (80080d8 <__sinit+0x6c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	62a2      	str	r2, [r4, #40]	; 0x28
 800808e:	42a3      	cmp	r3, r4
 8008090:	bf04      	itt	eq
 8008092:	2301      	moveq	r3, #1
 8008094:	61a3      	streq	r3, [r4, #24]
 8008096:	4620      	mov	r0, r4
 8008098:	f000 f820 	bl	80080dc <__sfp>
 800809c:	6060      	str	r0, [r4, #4]
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f81c 	bl	80080dc <__sfp>
 80080a4:	60a0      	str	r0, [r4, #8]
 80080a6:	4620      	mov	r0, r4
 80080a8:	f000 f818 	bl	80080dc <__sfp>
 80080ac:	2200      	movs	r2, #0
 80080ae:	60e0      	str	r0, [r4, #12]
 80080b0:	2104      	movs	r1, #4
 80080b2:	6860      	ldr	r0, [r4, #4]
 80080b4:	f7ff ff82 	bl	8007fbc <std>
 80080b8:	68a0      	ldr	r0, [r4, #8]
 80080ba:	2201      	movs	r2, #1
 80080bc:	2109      	movs	r1, #9
 80080be:	f7ff ff7d 	bl	8007fbc <std>
 80080c2:	68e0      	ldr	r0, [r4, #12]
 80080c4:	2202      	movs	r2, #2
 80080c6:	2112      	movs	r1, #18
 80080c8:	f7ff ff78 	bl	8007fbc <std>
 80080cc:	2301      	movs	r3, #1
 80080ce:	61a3      	str	r3, [r4, #24]
 80080d0:	e7d2      	b.n	8008078 <__sinit+0xc>
 80080d2:	bf00      	nop
 80080d4:	080084a8 	.word	0x080084a8
 80080d8:	08008005 	.word	0x08008005

080080dc <__sfp>:
 80080dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080de:	4607      	mov	r7, r0
 80080e0:	f7ff ffac 	bl	800803c <__sfp_lock_acquire>
 80080e4:	4b1e      	ldr	r3, [pc, #120]	; (8008160 <__sfp+0x84>)
 80080e6:	681e      	ldr	r6, [r3, #0]
 80080e8:	69b3      	ldr	r3, [r6, #24]
 80080ea:	b913      	cbnz	r3, 80080f2 <__sfp+0x16>
 80080ec:	4630      	mov	r0, r6
 80080ee:	f7ff ffbd 	bl	800806c <__sinit>
 80080f2:	3648      	adds	r6, #72	; 0x48
 80080f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	d503      	bpl.n	8008104 <__sfp+0x28>
 80080fc:	6833      	ldr	r3, [r6, #0]
 80080fe:	b30b      	cbz	r3, 8008144 <__sfp+0x68>
 8008100:	6836      	ldr	r6, [r6, #0]
 8008102:	e7f7      	b.n	80080f4 <__sfp+0x18>
 8008104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008108:	b9d5      	cbnz	r5, 8008140 <__sfp+0x64>
 800810a:	4b16      	ldr	r3, [pc, #88]	; (8008164 <__sfp+0x88>)
 800810c:	60e3      	str	r3, [r4, #12]
 800810e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008112:	6665      	str	r5, [r4, #100]	; 0x64
 8008114:	f000 f847 	bl	80081a6 <__retarget_lock_init_recursive>
 8008118:	f7ff ff96 	bl	8008048 <__sfp_lock_release>
 800811c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008124:	6025      	str	r5, [r4, #0]
 8008126:	61a5      	str	r5, [r4, #24]
 8008128:	2208      	movs	r2, #8
 800812a:	4629      	mov	r1, r5
 800812c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008130:	f7fd fcb6 	bl	8005aa0 <memset>
 8008134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800813c:	4620      	mov	r0, r4
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008140:	3468      	adds	r4, #104	; 0x68
 8008142:	e7d9      	b.n	80080f8 <__sfp+0x1c>
 8008144:	2104      	movs	r1, #4
 8008146:	4638      	mov	r0, r7
 8008148:	f7ff ff62 	bl	8008010 <__sfmoreglue>
 800814c:	4604      	mov	r4, r0
 800814e:	6030      	str	r0, [r6, #0]
 8008150:	2800      	cmp	r0, #0
 8008152:	d1d5      	bne.n	8008100 <__sfp+0x24>
 8008154:	f7ff ff78 	bl	8008048 <__sfp_lock_release>
 8008158:	230c      	movs	r3, #12
 800815a:	603b      	str	r3, [r7, #0]
 800815c:	e7ee      	b.n	800813c <__sfp+0x60>
 800815e:	bf00      	nop
 8008160:	080084a8 	.word	0x080084a8
 8008164:	ffff0001 	.word	0xffff0001

08008168 <_fwalk_reent>:
 8008168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800816c:	4606      	mov	r6, r0
 800816e:	4688      	mov	r8, r1
 8008170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008174:	2700      	movs	r7, #0
 8008176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800817a:	f1b9 0901 	subs.w	r9, r9, #1
 800817e:	d505      	bpl.n	800818c <_fwalk_reent+0x24>
 8008180:	6824      	ldr	r4, [r4, #0]
 8008182:	2c00      	cmp	r4, #0
 8008184:	d1f7      	bne.n	8008176 <_fwalk_reent+0xe>
 8008186:	4638      	mov	r0, r7
 8008188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818c:	89ab      	ldrh	r3, [r5, #12]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d907      	bls.n	80081a2 <_fwalk_reent+0x3a>
 8008192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008196:	3301      	adds	r3, #1
 8008198:	d003      	beq.n	80081a2 <_fwalk_reent+0x3a>
 800819a:	4629      	mov	r1, r5
 800819c:	4630      	mov	r0, r6
 800819e:	47c0      	blx	r8
 80081a0:	4307      	orrs	r7, r0
 80081a2:	3568      	adds	r5, #104	; 0x68
 80081a4:	e7e9      	b.n	800817a <_fwalk_reent+0x12>

080081a6 <__retarget_lock_init_recursive>:
 80081a6:	4770      	bx	lr

080081a8 <__retarget_lock_acquire_recursive>:
 80081a8:	4770      	bx	lr

080081aa <__retarget_lock_release_recursive>:
 80081aa:	4770      	bx	lr

080081ac <__swhatbuf_r>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	460e      	mov	r6, r1
 80081b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b4:	2900      	cmp	r1, #0
 80081b6:	b096      	sub	sp, #88	; 0x58
 80081b8:	4614      	mov	r4, r2
 80081ba:	461d      	mov	r5, r3
 80081bc:	da07      	bge.n	80081ce <__swhatbuf_r+0x22>
 80081be:	2300      	movs	r3, #0
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	89b3      	ldrh	r3, [r6, #12]
 80081c4:	061a      	lsls	r2, r3, #24
 80081c6:	d410      	bmi.n	80081ea <__swhatbuf_r+0x3e>
 80081c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081cc:	e00e      	b.n	80081ec <__swhatbuf_r+0x40>
 80081ce:	466a      	mov	r2, sp
 80081d0:	f000 f8fa 	bl	80083c8 <_fstat_r>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	dbf2      	blt.n	80081be <__swhatbuf_r+0x12>
 80081d8:	9a01      	ldr	r2, [sp, #4]
 80081da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081e2:	425a      	negs	r2, r3
 80081e4:	415a      	adcs	r2, r3
 80081e6:	602a      	str	r2, [r5, #0]
 80081e8:	e7ee      	b.n	80081c8 <__swhatbuf_r+0x1c>
 80081ea:	2340      	movs	r3, #64	; 0x40
 80081ec:	2000      	movs	r0, #0
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	b016      	add	sp, #88	; 0x58
 80081f2:	bd70      	pop	{r4, r5, r6, pc}

080081f4 <__smakebuf_r>:
 80081f4:	898b      	ldrh	r3, [r1, #12]
 80081f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081f8:	079d      	lsls	r5, r3, #30
 80081fa:	4606      	mov	r6, r0
 80081fc:	460c      	mov	r4, r1
 80081fe:	d507      	bpl.n	8008210 <__smakebuf_r+0x1c>
 8008200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	6123      	str	r3, [r4, #16]
 8008208:	2301      	movs	r3, #1
 800820a:	6163      	str	r3, [r4, #20]
 800820c:	b002      	add	sp, #8
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	ab01      	add	r3, sp, #4
 8008212:	466a      	mov	r2, sp
 8008214:	f7ff ffca 	bl	80081ac <__swhatbuf_r>
 8008218:	9900      	ldr	r1, [sp, #0]
 800821a:	4605      	mov	r5, r0
 800821c:	4630      	mov	r0, r6
 800821e:	f7ff fb23 	bl	8007868 <_malloc_r>
 8008222:	b948      	cbnz	r0, 8008238 <__smakebuf_r+0x44>
 8008224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008228:	059a      	lsls	r2, r3, #22
 800822a:	d4ef      	bmi.n	800820c <__smakebuf_r+0x18>
 800822c:	f023 0303 	bic.w	r3, r3, #3
 8008230:	f043 0302 	orr.w	r3, r3, #2
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	e7e3      	b.n	8008200 <__smakebuf_r+0xc>
 8008238:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <__smakebuf_r+0x7c>)
 800823a:	62b3      	str	r3, [r6, #40]	; 0x28
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	6020      	str	r0, [r4, #0]
 8008240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008244:	81a3      	strh	r3, [r4, #12]
 8008246:	9b00      	ldr	r3, [sp, #0]
 8008248:	6163      	str	r3, [r4, #20]
 800824a:	9b01      	ldr	r3, [sp, #4]
 800824c:	6120      	str	r0, [r4, #16]
 800824e:	b15b      	cbz	r3, 8008268 <__smakebuf_r+0x74>
 8008250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008254:	4630      	mov	r0, r6
 8008256:	f000 f8c9 	bl	80083ec <_isatty_r>
 800825a:	b128      	cbz	r0, 8008268 <__smakebuf_r+0x74>
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	f043 0301 	orr.w	r3, r3, #1
 8008266:	81a3      	strh	r3, [r4, #12]
 8008268:	89a0      	ldrh	r0, [r4, #12]
 800826a:	4305      	orrs	r5, r0
 800826c:	81a5      	strh	r5, [r4, #12]
 800826e:	e7cd      	b.n	800820c <__smakebuf_r+0x18>
 8008270:	08008005 	.word	0x08008005

08008274 <_raise_r>:
 8008274:	291f      	cmp	r1, #31
 8008276:	b538      	push	{r3, r4, r5, lr}
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	d904      	bls.n	8008288 <_raise_r+0x14>
 800827e:	2316      	movs	r3, #22
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800828a:	b112      	cbz	r2, 8008292 <_raise_r+0x1e>
 800828c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008290:	b94b      	cbnz	r3, 80082a6 <_raise_r+0x32>
 8008292:	4620      	mov	r0, r4
 8008294:	f000 f830 	bl	80082f8 <_getpid_r>
 8008298:	462a      	mov	r2, r5
 800829a:	4601      	mov	r1, r0
 800829c:	4620      	mov	r0, r4
 800829e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a2:	f000 b817 	b.w	80082d4 <_kill_r>
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d00a      	beq.n	80082c0 <_raise_r+0x4c>
 80082aa:	1c59      	adds	r1, r3, #1
 80082ac:	d103      	bne.n	80082b6 <_raise_r+0x42>
 80082ae:	2316      	movs	r3, #22
 80082b0:	6003      	str	r3, [r0, #0]
 80082b2:	2001      	movs	r0, #1
 80082b4:	e7e7      	b.n	8008286 <_raise_r+0x12>
 80082b6:	2400      	movs	r4, #0
 80082b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082bc:	4628      	mov	r0, r5
 80082be:	4798      	blx	r3
 80082c0:	2000      	movs	r0, #0
 80082c2:	e7e0      	b.n	8008286 <_raise_r+0x12>

080082c4 <raise>:
 80082c4:	4b02      	ldr	r3, [pc, #8]	; (80082d0 <raise+0xc>)
 80082c6:	4601      	mov	r1, r0
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	f7ff bfd3 	b.w	8008274 <_raise_r>
 80082ce:	bf00      	nop
 80082d0:	2000000c 	.word	0x2000000c

080082d4 <_kill_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	; (80082f4 <_kill_r+0x20>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	4611      	mov	r1, r2
 80082e0:	602b      	str	r3, [r5, #0]
 80082e2:	f7f9 f865 	bl	80013b0 <_kill>
 80082e6:	1c43      	adds	r3, r0, #1
 80082e8:	d102      	bne.n	80082f0 <_kill_r+0x1c>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	b103      	cbz	r3, 80082f0 <_kill_r+0x1c>
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	bf00      	nop
 80082f4:	200003fc 	.word	0x200003fc

080082f8 <_getpid_r>:
 80082f8:	f7f9 b852 	b.w	80013a0 <_getpid>

080082fc <__sread>:
 80082fc:	b510      	push	{r4, lr}
 80082fe:	460c      	mov	r4, r1
 8008300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008304:	f000 f894 	bl	8008430 <_read_r>
 8008308:	2800      	cmp	r0, #0
 800830a:	bfab      	itete	ge
 800830c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800830e:	89a3      	ldrhlt	r3, [r4, #12]
 8008310:	181b      	addge	r3, r3, r0
 8008312:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008316:	bfac      	ite	ge
 8008318:	6563      	strge	r3, [r4, #84]	; 0x54
 800831a:	81a3      	strhlt	r3, [r4, #12]
 800831c:	bd10      	pop	{r4, pc}

0800831e <__swrite>:
 800831e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008322:	461f      	mov	r7, r3
 8008324:	898b      	ldrh	r3, [r1, #12]
 8008326:	05db      	lsls	r3, r3, #23
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	4616      	mov	r6, r2
 800832e:	d505      	bpl.n	800833c <__swrite+0x1e>
 8008330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008334:	2302      	movs	r3, #2
 8008336:	2200      	movs	r2, #0
 8008338:	f000 f868 	bl	800840c <_lseek_r>
 800833c:	89a3      	ldrh	r3, [r4, #12]
 800833e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008342:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008346:	81a3      	strh	r3, [r4, #12]
 8008348:	4632      	mov	r2, r6
 800834a:	463b      	mov	r3, r7
 800834c:	4628      	mov	r0, r5
 800834e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008352:	f000 b817 	b.w	8008384 <_write_r>

08008356 <__sseek>:
 8008356:	b510      	push	{r4, lr}
 8008358:	460c      	mov	r4, r1
 800835a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835e:	f000 f855 	bl	800840c <_lseek_r>
 8008362:	1c43      	adds	r3, r0, #1
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	bf15      	itete	ne
 8008368:	6560      	strne	r0, [r4, #84]	; 0x54
 800836a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800836e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008372:	81a3      	strheq	r3, [r4, #12]
 8008374:	bf18      	it	ne
 8008376:	81a3      	strhne	r3, [r4, #12]
 8008378:	bd10      	pop	{r4, pc}

0800837a <__sclose>:
 800837a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800837e:	f000 b813 	b.w	80083a8 <_close_r>
	...

08008384 <_write_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	; (80083a4 <_write_r+0x20>)
 8008388:	4604      	mov	r4, r0
 800838a:	4608      	mov	r0, r1
 800838c:	4611      	mov	r1, r2
 800838e:	2200      	movs	r2, #0
 8008390:	602a      	str	r2, [r5, #0]
 8008392:	461a      	mov	r2, r3
 8008394:	f7f9 f843 	bl	800141e <_write>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_write_r+0x1e>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_write_r+0x1e>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	200003fc 	.word	0x200003fc

080083a8 <_close_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	; (80083c4 <_close_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f9 f84f 	bl	8001456 <_close>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_close_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_close_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200003fc 	.word	0x200003fc

080083c8 <_fstat_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d07      	ldr	r5, [pc, #28]	; (80083e8 <_fstat_r+0x20>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	4611      	mov	r1, r2
 80083d4:	602b      	str	r3, [r5, #0]
 80083d6:	f7f9 f84a 	bl	800146e <_fstat>
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	d102      	bne.n	80083e4 <_fstat_r+0x1c>
 80083de:	682b      	ldr	r3, [r5, #0]
 80083e0:	b103      	cbz	r3, 80083e4 <_fstat_r+0x1c>
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	bd38      	pop	{r3, r4, r5, pc}
 80083e6:	bf00      	nop
 80083e8:	200003fc 	.word	0x200003fc

080083ec <_isatty_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d06      	ldr	r5, [pc, #24]	; (8008408 <_isatty_r+0x1c>)
 80083f0:	2300      	movs	r3, #0
 80083f2:	4604      	mov	r4, r0
 80083f4:	4608      	mov	r0, r1
 80083f6:	602b      	str	r3, [r5, #0]
 80083f8:	f7f9 f849 	bl	800148e <_isatty>
 80083fc:	1c43      	adds	r3, r0, #1
 80083fe:	d102      	bne.n	8008406 <_isatty_r+0x1a>
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	b103      	cbz	r3, 8008406 <_isatty_r+0x1a>
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	bd38      	pop	{r3, r4, r5, pc}
 8008408:	200003fc 	.word	0x200003fc

0800840c <_lseek_r>:
 800840c:	b538      	push	{r3, r4, r5, lr}
 800840e:	4d07      	ldr	r5, [pc, #28]	; (800842c <_lseek_r+0x20>)
 8008410:	4604      	mov	r4, r0
 8008412:	4608      	mov	r0, r1
 8008414:	4611      	mov	r1, r2
 8008416:	2200      	movs	r2, #0
 8008418:	602a      	str	r2, [r5, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	f7f9 f842 	bl	80014a4 <_lseek>
 8008420:	1c43      	adds	r3, r0, #1
 8008422:	d102      	bne.n	800842a <_lseek_r+0x1e>
 8008424:	682b      	ldr	r3, [r5, #0]
 8008426:	b103      	cbz	r3, 800842a <_lseek_r+0x1e>
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	bd38      	pop	{r3, r4, r5, pc}
 800842c:	200003fc 	.word	0x200003fc

08008430 <_read_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4d07      	ldr	r5, [pc, #28]	; (8008450 <_read_r+0x20>)
 8008434:	4604      	mov	r4, r0
 8008436:	4608      	mov	r0, r1
 8008438:	4611      	mov	r1, r2
 800843a:	2200      	movs	r2, #0
 800843c:	602a      	str	r2, [r5, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	f7f8 ffd0 	bl	80013e4 <_read>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_read_r+0x1e>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_read_r+0x1e>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	200003fc 	.word	0x200003fc

08008454 <_init>:
 8008454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008456:	bf00      	nop
 8008458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845a:	bc08      	pop	{r3}
 800845c:	469e      	mov	lr, r3
 800845e:	4770      	bx	lr

08008460 <_fini>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr
